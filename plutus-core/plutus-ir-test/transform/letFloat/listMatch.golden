(lam
  x
  (con integer)
  (let
    (rec)
    (datatypebind
      (datatype
        (tyvardecl List (fun (type) (type)))
        (tyvardecl a (type))
        match_List
        (vardecl Nil [List a]) (vardecl Cons (fun a (fun [List a] [List a])))
      )
    )
    (let
      (rec)
      (termbind
        (strict)
        (vardecl j (con integer))
        [ [ (builtin addInteger) (con integer 3) ] x ]
      )
      [
        [
          {
            [
              { match_List (all a (type) (fun a a)) }
              { Nil (all a (type) (fun a a)) }
            ]
            (all a (type) (fun a a))
          }
          (abs a (type) (lam x a x))
        ]
        (lam
          head
          (all a (type) (fun a a))
          (lam tail [List (all a (type) (fun a a))] head)
        )
      ]
    )
  )
)
let
  data Bool | match_Bool where
    True : Bool
    False : Bool
  data (Maybe :: * -> *) a | match_Maybe where
    Nothing : Maybe a
    Just : a -> Maybe a
in
\(x : Maybe integer) ->
  let
    !k_caseOfCase : Bool -> integer
      = \(scrutinee : Bool) -> match_Bool scrutinee {integer} 1 0
  in
  match_Maybe
    {integer}
    x
    {integer}
    (k_caseOfCase ((\(b : Bool) -> b) False))
    (\(i : integer) -> k_caseOfCase True)
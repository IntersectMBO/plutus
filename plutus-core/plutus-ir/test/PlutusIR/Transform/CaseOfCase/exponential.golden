let
  data Bool | match_Bool where
    True : Bool
    False : Bool
  data (Maybe :: * -> *) a | match_Maybe where
    Nothing : Maybe a
    Just : a -> Maybe a
in
\(x : Maybe integer) ->
  match_Maybe
    {integer}
    x
    {integer}
    (match_Bool
       False
       {integer}
       (match_Maybe
          {integer}
          x
          {integer}
          (match_Bool False {integer} 1 0)
          (\(j : integer) -> match_Bool True {integer} 1 0))
       (match_Maybe
          {integer}
          x
          {integer}
          (match_Bool False {integer} 3 2)
          (\(k : integer) -> match_Bool True {integer} 3 2)))
    (\(i : integer) ->
       match_Bool
         True
         {integer}
         (match_Maybe
            {integer}
            x
            {integer}
            (match_Bool False {integer} 1 0)
            (\(j : integer) -> match_Bool True {integer} 1 0))
         (match_Maybe
            {integer}
            x
            {integer}
            (match_Bool False {integer} 3 2)
            (\(k : integer) -> match_Bool True {integer} 3 2)))
{- 
Multiple occurrences of a let binding that is a function application (funApp). It should not get 
inlined by the unconditional inlining optimization. The callsite inliner should also not inline 
funApp.
Because it is an application, it's not acceptable in terms of both cost and size. This test
verifies that the cost and size heuristics are checked.

let 
  appNum :: Integer
  appNum = 4
  in 
    let funApp :: Integer -> Integer
        funApp x = addInteger appNum x
    in
      let k :: Integer -> Integer
      k = funApp
in funApp appNum

-}

(let
    (nonrec)
    
    (termbind (strict) (vardecl appNum (con integer)) (con integer 4))
    (let
      (nonrec)
      (termbind
        (strict)
        (vardecl funApp (fun (con integer) (con integer)))
        (lam x (con integer) [[ (builtin addInteger) appNum ] x])
      )
      (let
        (nonrec)
        (termbind
          (strict)
          (vardecl k (fun (con integer) (con integer)))
          funApp
        )
      [ funApp appNum ]
      )
    )
)

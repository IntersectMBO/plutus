{- 
funApp gets inlined because it only occurs once.
k should not get inlined by the unconditional inline optimization because it occurs more
than once.
Both instances of k should get inlined by the call site inliner.

The `idFun` binding is dead - the inline tests don't do dead code removal. The outputs sometimes 
have the dead bindings removed because of the unconditional inliner. 

let
    idFun :: forall a . a -> a
    idFun = \x -> x
    funApp :: Integer -> Integer
    funApp = idFun @Integer
    k :: forall a . a -> a
    k = idFun
in k @Integer (k @(Integer -> Integer) funApp 3)
-}

(let
    (nonrec)
    (termbind
      (strict)
      (vardecl idFun (all a (type) (fun a a)))
      (abs a (type) (lam x a x))
    )
    (termbind (nonstrict) (vardecl k (all a (type) (fun a a))) idFun)
    (termbind
      (nonstrict)
      (vardecl funApp (fun (con integer) (con integer)))
      { idFun (con integer) }
    )
    [
      { k (con integer) }
      [ [ { k (fun (con integer) (con integer)) } funApp ] (con integer 3) ]
    ]
)

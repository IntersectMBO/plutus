(let
  (rec)
  (datatypebind
    (datatype
      (tyvardecl List (fun (type) (type)))
      (tyvardecl a (type))
      match_List
      (vardecl Nil [List a]) (vardecl Cons (fun a (fun [List a] [List a])))
    )
  )
  (let
    (rec)
    (termbind (strict)
      (vardecl
        map (fun (fun (con integer) (con integer)) (fun [List (con integer)] [List (con integer)]))
      )
      (lam
        f
        (fun (con integer) (con integer))
        (lam
          lst
          [List (con integer)]
          [
            [ { [ { match_List (con integer) } lst ] [List (con integer)] } { Nil (con integer) } ]
            (lam
              x
              (con integer)
              (lam xs [List (con integer)] [ { Cons (con integer) } [ f x ] [ map f xs ] ])
            )
          ]
        )
      )
    )
    map
  )
)


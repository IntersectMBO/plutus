letrec
  data (List :: * -> *) a | match_List where
    Nil : List a
    Cons : a -> List a -> List a
in
letrec
  !map : (integer -> integer) -> List integer -> List integer
    = \(f : integer -> integer) (lst : List integer) ->
        match_List
          {integer}
          lst
          {List integer}
          (Nil {integer})
          (\(x : integer) (xs : List integer) ->
             Cons {integer} (f x) (map f xs))
in
map
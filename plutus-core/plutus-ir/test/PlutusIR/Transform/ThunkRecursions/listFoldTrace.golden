letrec
  data (List :: * -> *) a | match_List where
    Nil : List a
    Cons : a -> List a -> List a
in
letrec
  ~foldl : all a b. (b -> a -> b) -> b -> List a -> b
    = /\a b ->
        \(f : b -> a -> b) (acc : b) (lst : List a) ->
          match_List
            {a}
            lst
            {b}
            acc
            (\(x : a) (xs : List a) ->
               trace {b} "hello" (foldl {a} {b} f (f acc x) xs))
in
let
  !foldl : all a b. (b -> a -> b) -> b -> List a -> b = foldl
in
foldl
(let
  (nonrec)
  (termbind
    (strict)
    (vardecl
      fix1
      (all a (type) (all b (type) (fun (fun (fun a b) (fun a b)) (fun a b))))
    )
    (abs
      a
      (type)
      (abs
        b
        (type)
        (lam
          f
          (fun (fun a b) (fun a b))
          [
            {
              (abs
                a
                (type)
                (lam
                  s
                  [
                    (lam
                      a
                      (type)
                      (ifix
                        (lam
                          self
                          (fun (type) (type))
                          (lam a (type) (fun [ self a ] a))
                        )
                        a
                      )
                    )
                    a
                  ]
                  [ (unwrap s) s ]
                )
              )
              (fun a b)
            }
            (iwrap
              (lam self (fun (type) (type)) (lam a (type) (fun [ self a ] a)))
              (fun a b)
              (lam
                s
                [
                  (lam
                    a
                    (type)
                    (ifix
                      (lam
                        self
                        (fun (type) (type))
                        (lam a (type) (fun [ self a ] a))
                      )
                      a
                    )
                  )
                  (fun a b)
                ]
                [
                  f
                  (lam
                    x
                    a
                    [
                      [
                        {
                          (abs
                            a
                            (type)
                            (lam
                              s
                              [
                                (lam
                                  a
                                  (type)
                                  (ifix
                                    (lam
                                      self
                                      (fun (type) (type))
                                      (lam a (type) (fun [ self a ] a))
                                    )
                                    a
                                  )
                                )
                                a
                              ]
                              [ (unwrap s) s ]
                            )
                          )
                          (fun a b)
                        }
                        s
                      ]
                      x
                    ]
                  )
                ]
              )
            )
          ]
        )
      )
    )
  )
  [
    (lam
      tup
      (all r (type) (fun (fun (fun (con integer) (con integer)) r) r))
      (let
        (nonrec)
        (termbind
          (strict)
          (vardecl xxx (fun (con integer) (con integer)))
          [
            { tup (fun (con integer) (con integer)) }
            (lam arg_0 (fun (con integer) (con integer)) arg_0)
          ]
        )
        (con integer 1)
      )
    )
    (abs
      r
      (type)
      (lam
        f
        (fun (fun (con integer) (con integer)) r)
        [
          f
          [
            { { fix1 (con integer) } (con integer) }
            (lam
              xxx
              (fun (con integer) (con integer))
              [
                [
                  { (builtin trace) (fun (con integer) (con integer)) }
                  (con string "hello")
                ]
                (lam z (con integer) [ xxx z ])
              ]
            )
          ]
        ]
      )
    )
  ]
)
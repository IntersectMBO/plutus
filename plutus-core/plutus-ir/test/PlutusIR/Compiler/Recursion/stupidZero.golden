program
  1.1.0
  ((/\Nat ->
      \(Zero : Nat)
       (Suc : Nat -> Nat)
       (match_Nat :
          Nat -> (all out_Nat. out_Nat -> (Nat -> out_Nat) -> out_Nat)) ->
        (\(s :
             (\a -> ifix (\(self :: * -> *) a -> self a -> a) a)
               (Nat -> Nat)) ->
           unwrap s s)
          (iwrap
             (\(self :: * -> *) a -> self a -> a)
             (Nat -> Nat)
             (\(s :
                  (\a -> ifix (\(self :: * -> *) a -> self a -> a) a)
                    (Nat -> Nat))
               (n : Nat) ->
                match_Nat n {Nat} Zero (\(p : Nat) -> unwrap s s p)))
          (Suc (Suc (Suc Zero))))
     {ifix
        (\(rec :: (* -> *) -> *) (f :: * -> *) -> f (rec f))
        (\Nat -> sop [] [Nat])}
     (iwrap
        (\(rec :: (* -> *) -> *) (f :: * -> *) -> f (rec f))
        (\Nat -> sop [] [Nat])
        (constr
           (sop
              []
              [ (ifix
                   (\(rec :: (* -> *) -> *) (f :: * -> *) -> f (rec f))
                   (\Nat -> sop [] [Nat])) ])
           0
           []))
     (\(arg_0 :
          ifix
            (\(rec :: (* -> *) -> *) (f :: * -> *) -> f (rec f))
            (\Nat -> sop [] [Nat])) ->
        iwrap
          (\(rec :: (* -> *) -> *) (f :: * -> *) -> f (rec f))
          (\Nat -> sop [] [Nat])
          (constr
             (sop
                []
                [ (ifix
                     (\(rec :: (* -> *) -> *) (f :: * -> *) -> f (rec f))
                     (\Nat -> sop [] [Nat])) ])
             1
             [arg_0]))
     (\(x :
          ifix
            (\(rec :: (* -> *) -> *) (f :: * -> *) -> f (rec f))
            (\Nat -> sop [] [Nat])) ->
        /\out_Nat ->
          \(case_Zero : out_Nat)
           (case_Suc :
              ifix
                (\(rec :: (* -> *) -> *) (f :: * -> *) -> f (rec f))
                (\Nat -> sop [] [Nat]) ->
              out_Nat) ->
            case out_Nat (unwrap x) [case_Zero, case_Suc]))
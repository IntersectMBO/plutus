program
  1.1.0
  ((/\(Maybe :: * -> *) ->
      \(Nothing : all a. Maybe a)
       (Just : all a. a -> Maybe a)
       (match_Maybe :
          all a.
            Maybe a ->
            (all out_Maybe. out_Maybe -> (a -> out_Maybe) -> out_Maybe)) ->
        Just)
     {\a -> all out_Maybe. out_Maybe -> (a -> out_Maybe) -> out_Maybe}
     (/\a out_Maybe ->
        \(case_Nothing : out_Maybe) (case_Just : a -> out_Maybe) ->
          case_Nothing)
     (/\a ->
        \(arg_0 : a) ->
          /\out_Maybe ->
            \(case_Nothing : out_Maybe) (case_Just : a -> out_Maybe) ->
              case_Just arg_0)
     (/\a ->
        \(x :
            (\a -> all out_Maybe. out_Maybe -> (a -> out_Maybe) -> out_Maybe)
              a) ->
          x)
     {all a. a -> a}
     (/\a -> \(x : a) -> x))
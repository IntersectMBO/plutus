letrec data Nat | match_Nat where
         Zero : Nat
         Suc : Nat -> Nat
in
let data Bool | match_Bool where
      True : Bool
      False : Bool
    !three : Nat = Suc (Suc (Suc Zero))
in
letrec !even : Nat -> Bool
         = \(n : Nat) -> match_Nat n {Bool} True (\(pred : Nat) -> odd pred)
       !odd : Nat -> Bool
         = \(n : Nat) -> match_Nat n {Bool} False (\(pred : Nat) -> even pred)
in even three
(let
  (nonrec)
  (termbind
    (strict)
    (vardecl addInteger (fun (con integer) (fun (con integer) (con integer))))
    (builtin addInteger)
  )
  (termbind
    (strict)
    (vardecl addInteger (fun (con integer) (fun (con integer) (con integer))))
    (lam x (con integer) (lam y (con integer) [ [ addInteger x ] y ]))
  )
  (termbind
    (nonstrict)
    (vardecl x (con integer))
    [ [ addInteger (con integer 1) ] (con integer 2) ]
  )
  (termbind (nonstrict) (vardecl y (con integer)) [ [ addInteger x ] x ])
  [ [ addInteger y ] y ]
)
-- `x` should not be floated into the RHS of `y`, since `y` is a non-strict
-- binding that is used twice.

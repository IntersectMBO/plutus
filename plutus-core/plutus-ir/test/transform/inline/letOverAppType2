{- 
funApp gets inlined because it only occurs once.
k should not get inlined by the unconditional inline optimization because it occurs more
than once.
Both instances of k should get inlined by the optimization that inlines fully applied functions 
because it is fully applied.
The first instance of k being inlined verifies that an over-applied function still gets inline with
type applications.

We have a [tmArg, tmArg, tyArg, tyArg] applying to k's which requires [ty,tm]. Both occurrences 
are overly applied but still get inlined, as desired.

let 
    idFun :: forall a . a -> a
    idFun = \x -> x
    funApp :: Integer -> Integer
    funApp = idFun @Integer
    k :: forall a . a -> a
    k = idFun
in k @Integer (((k @Integer) funApp) 3)
-}

(let
    (nonrec)
    (termbind
      (strict)
      (vardecl idFun (all a (type) (fun a a)))
      (abs a (type) (lam x a x))
    )
    (let
      (nonrec)
      (termbind
        (strict)
        (vardecl
          funApp
          (fun (con integer) (con integer))
        )
        {idFun (con integer)}
      )
      (let
      (nonrec)
        (termbind
          (strict)
          (vardecl
            k
            (all a (type) (fun a a))
          )
          idFun
        )
        [{k (con integer)} [{k (con integer)} funApp] (con integer 3) ]
      )
    )
)
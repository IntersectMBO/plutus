{- 
funApp gets inlined because it only occurs once.
Both instances of k get inlined by unconditional inliner.
The first instance of k being inlined verifies that the inliner works with type applications.

let 
    idFun :: forall a . a -> a
    idFun = \x -> x
    funApp :: Integer -> Integer
    funApp = idFun @Integer
    k :: forall a . a -> a
    k = idFun
in k @Integer (k @Integer (funApp 3))
-}

(let
    (nonrec)
    (termbind
      (strict)
      (vardecl idFun (all a (type) (fun a a)))
      (abs a (type) (lam x a x))
    )
    (termbind (nonstrict) (vardecl k (all a (type) (fun a a))) idFun)
    (termbind
      (nonstrict)
      (vardecl funApp (fun (con integer) (con integer)))
      { idFun (con integer) }
    )
    [ { k (con integer) } [ { k (con integer) } [ funApp (con integer 3) ] ] ]
)
{- 
The unconditional inlining optimization should inline g because it only occurs once.
idFun is in the body and g's binding. Because it occurs more than once, it should not be inlined by
the unconditional inlining optimization.
Because the last instance of idFun is fully applied, the optimization that inlines fully applied
function should inline it.

let 
  idFun :: Integer -> Integer
  idFun x = x
  g :: (Integer -> Integer) -> (Integer -> Integer)
  g y = idFun
in g idFun (idFun 1)
 -}

(let
    (nonrec)
    (termbind
      (strict)
      (vardecl idFun (fun (con integer) (con integer)))
      (lam x (con integer) x)
    )
    (let
    (nonrec)
      (termbind
        (strict)
        (vardecl
          g
          (fun
            (fun (con integer) (con integer)) (fun (con integer) (con integer))
          )
        )
        (lam
          y
          (fun (con integer) (con integer))
          idFun
        )
      )
      [ [ g idFun ] [ idFun (con integer 1) ] ]
    )
)
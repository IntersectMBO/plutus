(let
  (rec)
  (datatypebind
    (datatype
      (tyvardecl Nat (type))

      match_Nat
      (vardecl Zero Nat) (vardecl Suc (fun Nat Nat))
    )
  )
  (datatypebind
    (datatype
      (tyvardecl Bool (type))

      match_Bool
      (vardecl True Bool) (vardecl False Bool)
    )
  )
  (termbind
    (strict)
    (vardecl even (fun Nat Bool))
    (lam n Nat [ [ { [ match_Nat n ] Bool } True ] (lam pred Nat [ odd pred ]) ]
    )
  )
  (termbind
    (strict)
    (vardecl odd (fun Nat Bool))
    (lam
      n Nat [ [ { [ match_Nat n ] Bool } False ] (lam pred Nat [ even pred ]) ]
    )
  )
  (let
    (nonrec)
    (termbind (strict) (vardecl three Nat) [ Suc [ Suc [ Suc Zero ] ] ])
    [ even three ]
  )
)
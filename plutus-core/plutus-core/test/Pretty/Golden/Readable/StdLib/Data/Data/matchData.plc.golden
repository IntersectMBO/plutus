/\(r :: *) -> \(fConstr : integer -> list (data) -> r) -> \(fMap : list (pair (data) (data)) -> r) -> \(fList : list (data) -> r) -> \(fI : integer -> r) -> \(fB : bytestring -> r) -> \(d : data) -> chooseData {unit -> r} (\(u : unit) -> (/\(a :: *) -> /\(b :: *) -> /\(c :: *) -> \(f : a -> b -> c) -> \(p : pair a b) -> f (fst {a} {b} p) (snd {a} {b} p)) {integer} {list (data)} {r} fConstr (unConstrC d)) (\(u : unit) -> fMap (unMapC d)) (\(u : unit) -> fList (unListC d)) (\(u : unit) -> fI (unIC d)) (\(u : unit) -> fB (unBC d)) d ()
cabal-version:      3.0
name:               plutus-core
version:            1.0.0.0
license:            Apache-2.0
license-files:
  LICENSE
  NOTICE

maintainer:         michael.peyton-jones@iohk.io
author:             Plutus Core Team
synopsis:           Language library for Plutus Core
description:        Pretty-printer, parser, and typechecker for Plutus Core.
category:           Language, Plutus
build-type:         Simple
extra-doc-files:    README.md
extra-source-files:
  cost-model/data/*.R
  cost-model/data/benching.csv
  cost-model/data/builtinCostModel.json
  cost-model/data/cekMachineCosts.json
  plutus-core/test/CostModelInterface/defaultCostModelParams.json

source-repository head
  type:     git
  location: https://github.com/input-output-hk/plutus

common lang
  default-language:   Haskell2010
  default-extensions:
    DeriveFoldable
    DeriveFunctor
    DeriveGeneric
    DeriveLift
    DeriveTraversable
    DerivingStrategies
    DerivingVia
    ExplicitForAll
    FlexibleContexts
    GeneralizedNewtypeDeriving
    ImportQualifiedPost
    ScopedTypeVariables
    StandaloneDeriving

  ghc-options:
    -Wall -Wnoncanonical-monad-instances -Wincomplete-uni-patterns
    -Wincomplete-record-updates -Wredundant-constraints -Widentities
    -Wunused-packages -Wmissing-deriving-strategies

library
  import:          lang
  exposed-modules:
    Crypto
    Data.ByteString.Hash
    Data.Either.Extras
    Data.SatInt
    ErrorCode
    PlutusCore
    PlutusCore.Builtin
    PlutusCore.Builtin.Debug
    PlutusCore.Builtin.Elaborate
    PlutusCore.Builtin.Emitter
    PlutusCore.Check.Normal
    PlutusCore.Check.Scoping
    PlutusCore.Check.Uniques
    PlutusCore.Check.Value
    PlutusCore.Compiler
    PlutusCore.Compiler.Erase
    PlutusCore.Core
    PlutusCore.Data
    PlutusCore.DataFilePaths
    PlutusCore.DeBruijn
    PlutusCore.Default
    PlutusCore.Error
    PlutusCore.Evaluation.Machine.BuiltinCostModel
    PlutusCore.Evaluation.Machine.Ck
    PlutusCore.Evaluation.Machine.CostingFun.Core
    PlutusCore.Evaluation.Machine.CostingFun.JSON
    PlutusCore.Evaluation.Machine.CostModelInterface
    PlutusCore.Evaluation.Machine.ExBudget
    PlutusCore.Evaluation.Machine.ExBudgetingDefaults
    PlutusCore.Evaluation.Machine.Exception
    PlutusCore.Evaluation.Machine.ExMemory
    PlutusCore.Evaluation.Machine.MachineParameters
    PlutusCore.Evaluation.Machine.MachineParameters.Default
    PlutusCore.Evaluation.Machine.MachineParameters.DeferredMachineParameters
    PlutusCore.Evaluation.Machine.MachineParameters.ImmediateMachineParameters
    PlutusCore.Evaluation.Result
    PlutusCore.Examples.Builtins
    PlutusCore.Examples.Data.Data
    PlutusCore.Examples.Data.InterList
    PlutusCore.Examples.Data.List
    PlutusCore.Examples.Data.Pair
    PlutusCore.Examples.Data.Shad
    PlutusCore.Examples.Data.TreeForest
    PlutusCore.Examples.Data.Vec
    PlutusCore.Examples.Everything
    PlutusCore.Flat
    PlutusCore.FsTree
    PlutusCore.Mark
    PlutusCore.MkPlc
    PlutusCore.Name
    PlutusCore.Normalize
    PlutusCore.Normalize.Internal
    PlutusCore.Parser
    PlutusCore.Pretty
    PlutusCore.Quote
    PlutusCore.Rename
    PlutusCore.Rename.Internal
    PlutusCore.Rename.Monad
    PlutusCore.StdLib.Data.Bool
    PlutusCore.StdLib.Data.ChurchNat
    PlutusCore.StdLib.Data.Data
    PlutusCore.StdLib.Data.Function
    PlutusCore.StdLib.Data.Integer
    PlutusCore.StdLib.Data.List
    PlutusCore.StdLib.Data.Nat
    PlutusCore.StdLib.Data.Pair
    PlutusCore.StdLib.Data.ScottList
    PlutusCore.StdLib.Data.ScottUnit
    PlutusCore.StdLib.Data.Sum
    PlutusCore.StdLib.Data.Unit
    PlutusCore.StdLib.Everything
    PlutusCore.StdLib.Meta
    PlutusCore.StdLib.Meta.Data.Function
    PlutusCore.StdLib.Meta.Data.Tuple
    PlutusCore.StdLib.Type
    PlutusCore.Subst
    PlutusCore.TypeCheck
    PlutusCore.TypeCheck.Internal
    PlutusIR
    PlutusIR.Analysis.RetainedSize
    PlutusIR.Compiler
    PlutusIR.Compiler.Definitions
    PlutusIR.Compiler.Names
    PlutusIR.Core
    PlutusIR.Core.Instance
    PlutusIR.Core.Instance.Flat
    PlutusIR.Core.Instance.Pretty
    PlutusIR.Core.Instance.Pretty.Readable
    PlutusIR.Core.Instance.Scoping
    PlutusIR.Core.Plated
    PlutusIR.Core.Type
    PlutusIR.Error
    PlutusIR.Mark
    PlutusIR.MkPir
    PlutusIR.Parser
    PlutusIR.Purity
    PlutusIR.Subst
    PlutusIR.Transform.Beta
    PlutusIR.Transform.DeadCode
    PlutusIR.Transform.Inline
    PlutusIR.Transform.LetFloat
    PlutusIR.Transform.LetMerge
    PlutusIR.Transform.NonStrict
    PlutusIR.Transform.RecSplit
    PlutusIR.Transform.Rename
    PlutusIR.Transform.Substitute
    PlutusIR.Transform.ThunkRecursions
    PlutusIR.Transform.Unwrap
    PlutusIR.TypeCheck
    PlutusIR.TypeCheck.Internal
    PlutusPrelude
    Prettyprinter.Custom
    Universe
    UntypedPlutusCore
    UntypedPlutusCore.Check.Scope
    UntypedPlutusCore.Check.Uniques
    UntypedPlutusCore.Core
    UntypedPlutusCore.Core.Type
    UntypedPlutusCore.DeBruijn
    UntypedPlutusCore.Evaluation.Machine.Cek
    UntypedPlutusCore.Evaluation.Machine.Cek.CekMachineCosts
    UntypedPlutusCore.Evaluation.Machine.Cek.Internal
    UntypedPlutusCore.MkUPlc
    UntypedPlutusCore.Parser
    UntypedPlutusCore.Rename

  hs-source-dirs:
    plutus-core/src plutus-core/stdlib plutus-core/examples
    plutus-ir/src untyped-plutus-core/src prelude common

  other-modules:
    Data.Aeson.Flatten
    Data.Aeson.THReader
    Data.Functor.Foldable.Monadic
    GHC.Natural.Extras
    PlutusCore.Analysis.Definitions
    PlutusCore.Builtin.HasConstant
    PlutusCore.Builtin.KnownKind
    PlutusCore.Builtin.KnownType
    PlutusCore.Builtin.KnownTypeAst
    PlutusCore.Builtin.Meaning
    PlutusCore.Builtin.Polymorphism
    PlutusCore.Builtin.Runtime
    PlutusCore.Builtin.TestKnown
    PlutusCore.Builtin.TypeScheme
    PlutusCore.Core.Instance
    PlutusCore.Core.Instance.Eq
    PlutusCore.Core.Instance.Pretty
    PlutusCore.Core.Instance.Pretty.Classic
    PlutusCore.Core.Instance.Pretty.Common
    PlutusCore.Core.Instance.Pretty.Default
    PlutusCore.Core.Instance.Pretty.Plc
    PlutusCore.Core.Instance.Pretty.Readable
    PlutusCore.Core.Instance.Recursive
    PlutusCore.Core.Instance.Scoping
    PlutusCore.Core.Plated
    PlutusCore.Core.Type
    PlutusCore.DeBruijn.Internal
    PlutusCore.Default.Builtins
    PlutusCore.Default.Universe
    PlutusCore.Eq
    PlutusCore.InlineUtils
    PlutusCore.Parser.Builtin
    PlutusCore.Parser.ParserCommon
    PlutusCore.Parser.Type
    PlutusCore.Pretty.Classic
    PlutusCore.Pretty.ConfigName
    PlutusCore.Pretty.Default
    PlutusCore.Pretty.Plc
    PlutusCore.Pretty.PrettyConst
    PlutusCore.Pretty.Readable
    PlutusCore.Pretty.Utils
    PlutusCore.Size
    PlutusIR.Analysis.Dependencies
    PlutusIR.Analysis.Size
    PlutusIR.Analysis.Usages
    PlutusIR.Compiler.Datatype
    PlutusIR.Compiler.Error
    PlutusIR.Compiler.Let
    PlutusIR.Compiler.Lower
    PlutusIR.Compiler.Provenance
    PlutusIR.Compiler.Recursion
    PlutusIR.Compiler.Types
    PlutusIR.Normalize
    Universe.Core
    UntypedPlutusCore.Analysis.Definitions
    UntypedPlutusCore.Analysis.Usages
    UntypedPlutusCore.Core.Instance
    UntypedPlutusCore.Core.Instance.Eq
    UntypedPlutusCore.Core.Instance.Flat
    UntypedPlutusCore.Core.Instance.Pretty
    UntypedPlutusCore.Core.Instance.Pretty.Classic
    UntypedPlutusCore.Core.Instance.Pretty.Default
    UntypedPlutusCore.Core.Instance.Pretty.Plc
    UntypedPlutusCore.Core.Instance.Pretty.Readable
    UntypedPlutusCore.Core.Instance.Recursive
    UntypedPlutusCore.Core.Plated
    UntypedPlutusCore.Evaluation.Machine.Cek.EmitterMode
    UntypedPlutusCore.Evaluation.Machine.Cek.ExBudgetMode
    UntypedPlutusCore.Mark
    UntypedPlutusCore.Rename.Internal
    UntypedPlutusCore.Simplify
    UntypedPlutusCore.Size
    UntypedPlutusCore.Subst
    UntypedPlutusCore.Transform.ForceDelay
    UntypedPlutusCore.Transform.Inline

  build-depends:
    , aeson
    , algebraic-graphs            >=0.3
    , array
    , barbies
    , base                        >=4.9     && <5
    , base64-bytestring
    , bimap
    , bytestring
    , cardano-crypto
    , cardano-crypto-class
    , cassava
    , cborg
    , composition-prelude         >=1.1.0.1
    , containers
    , cryptonite
    , data-default-class
    , deepseq
    , dependent-sum-template
    , deriving-aeson              >=0.2.3
    , deriving-compat
    , dlist
    , dom-lt
    , exceptions
    , extra
    , filepath
    , flat
    , ghc-prim
    , hashable
    , hedgehog                    >=1.0
    , index-envs
    , int-cast
    , integer-gmp
    , lens
    , megaparsec
    , mmorph
    , monoidal-containers
    , mtl
    , parser-combinators          >=0.4.0
    , prettyprinter               >=1.1.0.1
    , prettyprinter-configurable
    , primitive
    , recursion-schemes
    , secp256k1-haskell
    , semigroupoids
    , semigroups                  >=0.19.1
    , serialise
    , some                        <1.0.3
    , template-haskell
    , text
    , th-compat
    , th-lift
    , th-lift-instances
    , th-utilities
    , time
    , transformers
    , unordered-containers
    , witherable
    , word-array

-- could split this up if we split up the main library for UPLC/PLC/PIR
library plutus-core-testlib
  import:          lang
  visibility:      public
  hs-source-dirs:  testlib
  exposed-modules:
    PlutusCore.Generators
    PlutusCore.Generators.AST
    PlutusCore.Generators.Interesting
    PlutusCore.Generators.NEAT.Common
    PlutusCore.Generators.NEAT.Spec
    PlutusCore.Generators.NEAT.Term
    PlutusCore.Generators.NEAT.Type
    PlutusCore.Generators.Test
    PlutusCore.Test
    PlutusIR.Generators.AST
    PlutusIR.Test
    Test.Tasty.Extras

  other-modules:
    PlutusCore.Generators.Internal.Builtin
    PlutusCore.Generators.Internal.Denotation
    PlutusCore.Generators.Internal.Entity
    PlutusCore.Generators.Internal.TypedBuiltinGen
    PlutusCore.Generators.Internal.TypeEvalCheck
    PlutusCore.Generators.Internal.Utils

  build-depends:
    , base                        >=4.9     && <5
    , bifunctors
    , bytestring
    , containers
    , dependent-map               >=0.4.0.0
    , filepath
    , ghc-prim
    , hedgehog                    >=1.0
    , integer-gmp
    , lazy-search
    , lens
    , megaparsec
    , mmorph
    , mtl
    , plutus-core
    , prettyprinter               >=1.1.0.1
    , prettyprinter-configurable
    , size-based
    , some                        <1.0.3
    , Stream
    , tasty
    , tasty-golden
    , tasty-hedgehog
    , tasty-hunit
    , text
    , transformers

test-suite satint-test
  import:           lang
  type:             exitcode-stdio-1.0
  main-is:          TestSatInt.hs
  build-depends:
    , base                        >=4.9 && <5
    , HUnit
    , plutus-core
    , QuickCheck
    , test-framework
    , test-framework-hunit
    , test-framework-quickcheck2

  default-language: Haskell2010
  hs-source-dirs:   plutus-core/satint-test

test-suite plutus-core-test
  import:           lang
  type:             exitcode-stdio-1.0
  main-is:          Spec.hs
  hs-source-dirs:   plutus-core/test
  ghc-options:      -threaded -rtsopts -with-rtsopts=-N
  other-modules:
    CBOR.DataStability
    Check.Spec
    CostModelInterface.Spec
    Evaluation.Machines
    Evaluation.Spec
    Names.Spec
    Normalization.Check
    Normalization.Type
    Pretty.Readable
    TypeSynthesis.Spec

  default-language: Haskell2010
  build-depends:
    , aeson
    , base                 >=4.9 && <5
    , bytestring
    , containers
    , data-default-class
    , extra
    , filepath
    , flat
    , hedgehog
    , hex-text
    , megaparsec
    , mmorph
    , mtl
    , plutus-core
    , plutus-core-testlib
    , prettyprinter
    , serialise
    , tasty
    , tasty-golden
    , tasty-hedgehog
    , tasty-hunit
    , template-haskell
    , text
    , th-lift-instances
    , th-utilities
    , transformers

test-suite plutus-ir-test
  import:         lang
  type:           exitcode-stdio-1.0
  main-is:        Spec.hs
  hs-source-dirs: plutus-ir/test
  other-modules:
    NamesSpec
    ParserSpec
    TransformSpec
    TypeSpec

  build-depends:
    , base                 >=4.9 && <5
    , flat
    , hedgehog
    , megaparsec
    , plutus-core
    , plutus-core-testlib
    , tasty
    , tasty-hedgehog
    , text

test-suite untyped-plutus-core-test
  import:         lang
  type:           exitcode-stdio-1.0
  main-is:        Spec.hs
  hs-source-dirs: untyped-plutus-core/test
  ghc-options:    -O2 -threaded -rtsopts -with-rtsopts=-N
  other-modules:
    DeBruijn.Common
    DeBruijn.Scope
    DeBruijn.Spec
    DeBruijn.UnDeBruijnify
    Evaluation.Builtins
    Evaluation.Builtins.Coherence
    Evaluation.Builtins.Common
    Evaluation.Builtins.Definition
    Evaluation.Builtins.MakeRead
    Evaluation.Builtins.SECP256k1
    Evaluation.FreeVars
    Evaluation.Golden
    Evaluation.Machines
    Transform.Simplify

  build-depends:
    , base                  >=4.9 && <5
    , bytestring
    , cardano-crypto-class
    , hedgehog
    , index-envs
    , lens
    , mtl
    , plutus-core
    , plutus-core-testlib
    , pretty-show
    , prettyprinter
    , secp256k1-haskell
    , tasty
    , tasty-golden
    , tasty-hedgehog
    , tasty-hunit
    , text

executable plc
  import:         lang
  main-is:        plc/Main.hs
  hs-source-dirs: executables
  other-modules:
    Common
    Parsers

  build-depends:
    , aeson
    , base                  >=4.9 && <5
    , bytestring
    , deepseq
    , flat
    , lens
    , megaparsec
    , monoidal-containers
    , mtl
    , optparse-applicative
    , plutus-core
    , plutus-core-testlib
    , prettyprinter
    , text
    , transformers

executable uplc
  import:         lang
  main-is:        uplc/Main.hs
  hs-source-dirs: executables
  other-modules:
    Common
    Parsers

  build-depends:
    , aeson
    , base                  >=4.9 && <5
    , bytestring
    , deepseq
    , flat
    , lens
    , megaparsec
    , monoidal-containers
    , mtl
    , optparse-applicative
    , plutus-core
    , plutus-core-testlib
    , prettyprinter
    , split
    , text
    , transformers

executable pir
  import:         lang
  main-is:        pir/Main.hs
  hs-source-dirs: executables
  other-modules:
    Common
    Parsers

  build-depends:
    , aeson
    , base                  >=4.9 && <5
    , bytestring
    , cassava
    , containers
    , deepseq
    , flat
    , lens
    , megaparsec
    , monoidal-containers
    , mtl
    , optparse-applicative
    , plutus-core
    , plutus-core-testlib
    , prettyprinter
    , text
    , transformers

executable traceToStacks
  import:         lang
  main-is:        Main.hs
  hs-source-dirs: executables/traceToStacks
  other-modules:  Common
  build-depends:
    , base                  >=4.9 && <5
    , bytestring
    , cassava
    , integer-gmp
    , optparse-applicative
    , text
    , vector

-- Tests for functions called by @traceToStacks@.
test-suite traceToStacks-test
  import:           lang
  type:             exitcode-stdio-1.0
  hs-source-dirs:   executables/traceToStacks
  default-language: Haskell2010
  main-is:          TestGetStacks.hs
  other-modules:    Common
  build-depends:
    , base         >=4.9 && <5
    , bytestring
    , cassava
    , tasty
    , tasty-hunit
    , text
    , vector

-- This runs the microbenchmarks used to generate the cost models for built-in
-- functions, saving the results in a CSV file which must be specified on the
-- commmand line.  It will take several hours.
executable cost-model-budgeting-bench
  import:         lang
  main-is:        Main.hs
  other-modules:
    Benchmarks.Bool
    Benchmarks.ByteStrings
    Benchmarks.CryptoAndHashes
    Benchmarks.Data
    Benchmarks.Integers
    Benchmarks.Lists
    Benchmarks.Misc
    Benchmarks.Nops
    Benchmarks.Pairs
    Benchmarks.Strings
    Benchmarks.Tracing
    Benchmarks.Unit
    Common
    CriterionExtensions
    Generators

  hs-source-dirs: cost-model/budgeting-bench
  build-depends:
    , base                   >=4.9 && <5
    , bytestring
    , cardano-crypto-class
    , criterion
    , criterion-measurement
    , deepseq
    , directory
    , filepath
    , hedgehog
    , mtl
    , optparse-applicative
    , plutus-core
    , QuickCheck
    , quickcheck-instances
    , random
    , secp256k1-haskell
    , text
    , time

-- This reads CSV data generated by cost-model-budgeting-bench, uses R to build
-- the cost models for built-in functions, and saves them in a specified
-- JSON file (see the help).  The 'official' cost model should be checked in
-- in plutus-core/cost-model/data/builtinCostModel.json.
executable generate-cost-model
  import:         lang
  main-is:        Main.hs
  hs-source-dirs: cost-model/create-cost-model
  ghc-options:    -threaded -rtsopts -with-rtsopts=-N
  build-depends:
    , aeson-pretty
    , barbies
    , base                  >=4.9 && <5
    , bytestring
    , cassava
    , directory
    , exceptions
    , extra
    , inline-r
    , optparse-applicative
    , plutus-core
    , text
    , vector

  other-modules:  CreateBuiltinCostModel

-- The cost models for builtins are generated using R and converted into a JSON
-- form that can later be used to construct Haskell functions.  This tests that
-- the predictions of the Haskell version are (approximately) identical to the R
-- ones.  This test is problematic in CI: pretending that it's a benchmark will
-- prevent it from being run automatically but will still allow us to run it
-- manually; `cabal bench` also sets the working directory to the root of the
-- relevant package, which makes it easier to find the cost model data files
-- (unlike `cabal run` for exectuables, which sets the working directory to the
-- current shell directory).
benchmark cost-model-test
  import:         lang
  type:           exitcode-stdio-1.0
  main-is:        TestCostModels.hs
  other-modules:  TH
  hs-source-dirs: cost-model/test cost-model/create-cost-model
  build-depends:
    , barbies
    , base              >=4.9 && <5
    , bytestring
    , cassava
    , exceptions
    , extra
    , hedgehog
    , inline-r
    , mmorph
    , plutus-core
    , template-haskell
    , text
    , vector

  other-modules:  CreateBuiltinCostModel

executable print-cost-model
  import:         lang
  main-is:        Main.hs
  hs-source-dirs: cost-model/print-cost-model
  other-modules:  Paths_plutus_core
  build-depends:
    , aeson
    , base        >=4.9 && <5
    , bytestring
    , text

library index-envs
  import:           lang
  hs-source-dirs:   index-envs/src
  default-language: Haskell2010
  exposed-modules:
    Data.RandomAccessList.Class
    Data.RandomAccessList.RelativizedMap
    Data.RandomAccessList.SkewBinary
    Data.RandomAccessList.SkewBinarySlab

  build-depends:
    , base             >=4.9 && <5
    , containers
    , extra
    , nonempty-vector
    , ral              ==0.1
    , vector

-- broken for ral-0.2 conflicts with cardano-binary:recursion-schemes
benchmark index-envs-bench
  import:           lang
  type:             exitcode-stdio-1.0
  hs-source-dirs:   index-envs/bench
  default-language: Haskell2010
  main-is:          Main.hs
  build-depends:
    , base             >=4.9     && <5
    , criterion        >=1.5.9.0
    , index-envs
    , nonempty-vector
    , ral              ==0.1
    , random           >=1.2.0

-- broken for ral-0.2 conflicts with cardano-binary:recursion-schemes
test-suite index-envs-test
  import:           lang
  type:             exitcode-stdio-1.0
  hs-source-dirs:   index-envs/test
  default-language: Haskell2010
  main-is:          Spec.hs
  other-modules:    RAList.Spec
  build-depends:
    , base                  >=4.9 && <5
    , index-envs
    , nonempty-vector
    , QuickCheck
    , quickcheck-instances
    , tasty
    , tasty-quickcheck

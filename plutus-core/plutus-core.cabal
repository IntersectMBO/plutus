cabal-version: 3.0
name: plutus-core
version: 1.0.0.0
license: Apache-2.0
license-files:
  LICENSE
  NOTICE
maintainer: michael.peyton-jones@iohk.io
author: Plutus Core Team
synopsis: Language library for Plutus Core
description:
    Pretty-printer, parser, and typechecker for Plutus Core.
category: Language, Plutus
build-type: Simple
extra-doc-files: README.md
extra-source-files:
    cost-model/data/builtinCostModel.json
    cost-model/data/cekMachineCosts.json
    cost-model/data/benching.csv
    cost-model/data/*.R
    plutus-core/test/CostModelInterface/defaultCostModelParams.json

source-repository head
    type: git
    location: https://github.com/input-output-hk/plutus

common lang
    default-language: Haskell2010
    default-extensions: ExplicitForAll FlexibleContexts ScopedTypeVariables
                        DeriveGeneric StandaloneDeriving DeriveLift
                        GeneralizedNewtypeDeriving DeriveFunctor DeriveFoldable
                        DeriveTraversable DerivingStrategies DerivingVia
                        ImportQualifiedPost
    ghc-options: -Wall -Wnoncanonical-monad-instances
                 -Wincomplete-uni-patterns -Wincomplete-record-updates
                 -Wredundant-constraints -Widentities -Wunused-packages
                 -Wmissing-deriving-strategies

library
    import: lang
    exposed-modules:
        PlutusCore
        PlutusCore.Check.Normal
        PlutusCore.Check.Scoping
        PlutusCore.Check.Uniques
        PlutusCore.Check.Value
        PlutusCore.Builtin
        PlutusCore.Builtin.Debug
        PlutusCore.Builtin.Elaborate
        PlutusCore.Builtin.Emitter
        PlutusCore.Core
        PlutusCore.Data
        PlutusCore.DataFilePaths
        PlutusCore.DeBruijn
        PlutusCore.Default
        PlutusCore.Error
        PlutusCore.Evaluation.Machine.BuiltinCostModel
        PlutusCore.Evaluation.Machine.Ck
        PlutusCore.Evaluation.Machine.CostModelInterface
        PlutusCore.Evaluation.Machine.CostingFun.Core
        PlutusCore.Evaluation.Machine.CostingFun.JSON
        PlutusCore.Evaluation.Machine.ExBudget
        PlutusCore.Evaluation.Machine.ExMemory
        PlutusCore.Evaluation.Machine.Exception
        PlutusCore.Evaluation.Machine.MachineParameters
        PlutusCore.Evaluation.Result
        PlutusCore.Examples.Builtins
        PlutusCore.Examples.Data.Data
        PlutusCore.Examples.Data.InterList
        PlutusCore.Examples.Data.List
        PlutusCore.Examples.Data.Pair
        PlutusCore.Examples.Data.Shad
        PlutusCore.Examples.Data.TreeForest
        PlutusCore.Examples.Data.Vec
        PlutusCore.Examples.Everything
        PlutusCore.Flat
        PlutusCore.FsTree
        PlutusCore.Mark
        PlutusCore.MkPlc
        PlutusCore.Name
        PlutusCore.Normalize
        PlutusCore.Normalize.Internal
        PlutusCore.Parser
        PlutusCore.Pretty
        PlutusCore.Quote
        PlutusCore.Rename
        PlutusCore.Rename.Internal
        PlutusCore.Rename.Monad
        PlutusCore.StdLib.Data.Bool
        PlutusCore.StdLib.Data.ChurchNat
        PlutusCore.StdLib.Data.Data
        PlutusCore.StdLib.Data.Function
        PlutusCore.StdLib.Data.Integer
        PlutusCore.StdLib.Data.List
        PlutusCore.StdLib.Data.Nat
        PlutusCore.StdLib.Data.Pair
        PlutusCore.StdLib.Data.ScottList
        PlutusCore.StdLib.Data.ScottUnit
        PlutusCore.StdLib.Data.Sum
        PlutusCore.StdLib.Data.Unit
        PlutusCore.StdLib.Everything
        PlutusCore.StdLib.Meta
        PlutusCore.StdLib.Meta.Data.Function
        PlutusCore.StdLib.Meta.Data.Tuple
        PlutusCore.StdLib.Type
        PlutusCore.Subst

        PlutusIR
        PlutusIR.Analysis.RetainedSize
        PlutusIR.Compiler
        PlutusIR.Compiler.Definitions
        PlutusIR.Compiler.Names
        PlutusIR.Core
        PlutusIR.Core.Instance
        PlutusIR.Core.Instance.Flat
        PlutusIR.Core.Instance.Pretty
        PlutusIR.Core.Instance.Pretty.Readable
        PlutusIR.Core.Instance.Scoping
        PlutusIR.Core.Plated
        PlutusIR.Core.Type
        PlutusIR.Error
        PlutusIR.Mark
        PlutusIR.MkPir
        PlutusIR.Parser
        PlutusIR.Purity
        PlutusIR.Subst
        PlutusIR.Transform.Beta
        PlutusIR.Transform.DeadCode
        PlutusIR.Transform.Inline
        PlutusIR.Transform.LetFloat
        PlutusIR.Transform.LetMerge
        PlutusIR.Transform.RecSplit
        PlutusIR.Transform.NonStrict
        PlutusIR.Transform.Rename
        PlutusIR.Transform.Substitute
        PlutusIR.Transform.ThunkRecursions
        PlutusIR.Transform.Unwrap
        PlutusIR.TypeCheck

        UntypedPlutusCore
        UntypedPlutusCore.DeBruijn
        UntypedPlutusCore.Evaluation.Machine.Cek
        UntypedPlutusCore.Evaluation.Machine.Cek.Internal
        UntypedPlutusCore.Parser
        UntypedPlutusCore.Rename
        UntypedPlutusCore.MkUPlc
        UntypedPlutusCore.Check.Scope
        UntypedPlutusCore.Check.Uniques
        UntypedPlutusCore.Core
        UntypedPlutusCore.Core.Type

        Crypto
        Data.ByteString.Hash
        Data.SatInt
        Prettyprinter.Custom
        ErrorCode
        PlutusPrelude
        Universe
    hs-source-dirs:
        plutus-core/src
        plutus-core/stdlib
        plutus-core/examples
        plutus-ir/src
        untyped-plutus-core/src
        prelude
        common
    other-modules:
        PlutusCore.Analysis.Definitions
        PlutusCore.Builtin.HasConstant
        PlutusCore.Builtin.KnownKind
        PlutusCore.Builtin.KnownType
        PlutusCore.Builtin.KnownTypeAst
        PlutusCore.Builtin.Meaning
        PlutusCore.Builtin.Polymorphism
        PlutusCore.Builtin.Runtime
        PlutusCore.Builtin.TestKnown
        PlutusCore.Builtin.TypeScheme
        PlutusCore.Core.Instance
        PlutusCore.Core.Instance.Eq
        PlutusCore.Core.Instance.Pretty
        PlutusCore.Core.Instance.Pretty.Classic
        PlutusCore.Core.Instance.Pretty.Common
        PlutusCore.Core.Instance.Pretty.Default
        PlutusCore.Core.Instance.Pretty.Plc
        PlutusCore.Core.Instance.Pretty.Readable
        PlutusCore.Core.Instance.Recursive
        PlutusCore.Core.Instance.Scoping
        PlutusCore.Core.Plated
        PlutusCore.Core.Type
        PlutusCore.DeBruijn.Internal
        PlutusCore.Default.Builtins
        PlutusCore.Default.Universe
        PlutusCore.Eq
        PlutusCore.Evaluation.Machine.ExBudgetingDefaults
        PlutusCore.InlineUtils
        PlutusCore.Parser.ParserCommon
        PlutusCore.Parser.Type
        PlutusCore.Parser.Builtin
        PlutusCore.Pretty.Classic
        PlutusCore.Pretty.ConfigName
        PlutusCore.Pretty.ConfigName
        PlutusCore.Pretty.Default
        PlutusCore.Pretty.Plc
        PlutusCore.Pretty.PrettyConst
        PlutusCore.Pretty.Readable
        PlutusCore.Pretty.Utils
        PlutusCore.Size
        PlutusCore.TypeCheck
        PlutusCore.TypeCheck.Internal

        PlutusIR.Analysis.Dependencies
        PlutusIR.Analysis.Size
        PlutusIR.Analysis.Usages
        PlutusIR.Compiler.Datatype
        PlutusIR.Compiler.Error
        PlutusIR.Compiler.Let
        PlutusIR.Compiler.Lower
        PlutusIR.Compiler.Provenance
        PlutusIR.Compiler.Recursion
        PlutusIR.Compiler.Types
        PlutusIR.Normalize
        PlutusIR.TypeCheck.Internal

        UntypedPlutusCore.Analysis.Definitions
        UntypedPlutusCore.Analysis.Usages
        UntypedPlutusCore.Core.Instance
        UntypedPlutusCore.Core.Instance.Eq
        UntypedPlutusCore.Core.Instance.Flat
        UntypedPlutusCore.Core.Instance.Pretty
        UntypedPlutusCore.Core.Instance.Pretty.Classic
        UntypedPlutusCore.Core.Instance.Pretty.Default
        UntypedPlutusCore.Core.Instance.Pretty.Plc
        UntypedPlutusCore.Core.Instance.Pretty.Readable
        UntypedPlutusCore.Core.Instance.Recursive
        UntypedPlutusCore.Core.Plated
        UntypedPlutusCore.Evaluation.Machine.Cek.CekMachineCosts
        UntypedPlutusCore.Evaluation.Machine.Cek.ExBudgetMode
        UntypedPlutusCore.Evaluation.Machine.Cek.EmitterMode
        UntypedPlutusCore.Mark
        UntypedPlutusCore.Rename.Internal
        UntypedPlutusCore.Simplify
        UntypedPlutusCore.Size
        UntypedPlutusCore.Subst
        UntypedPlutusCore.Transform.ForceDelay
        UntypedPlutusCore.Transform.Inline

        Data.Aeson.Flatten
        Data.Aeson.THReader
        Data.Functor.Foldable.Monadic
        Universe.Core
        GHC.Natural.Extras
    build-depends:
        aeson -any,
        algebraic-graphs >= 0.3,
        array -any,
        barbies -any,
        base >=4.9 && <5,
        bimap -any,
        bytestring -any,
        cardano-crypto,
        cassava -any,
        cborg -any,
        composition-prelude >=1.1.0.1,
        containers -any,
        cryptonite -any,
        data-default-class -any,
        deepseq -any,
        dependent-sum-template -any,
        deriving-aeson >= 0.2.3,
        deriving-compat -any,
        dlist -any,
        dom-lt -any,
        exceptions -any,
        extra -any,
        filepath -any,
        flat -any,
        ghc-prim -any,
        hashable,
        hedgehog >=1.0,
        int-cast -any,
        integer-gmp -any,
        lens -any,
        megaparsec -any,
        mmorph -any,
        monoidal-containers,
        mtl -any,
        parser-combinators >= 0.4.0,
        prettyprinter >=1.1.0.1,
        prettyprinter-configurable -any,
        primitive -any,
        recursion-schemes -any,
        secp256k1-haskell -any,
        semigroupoids -any,
        semigroups >=0.19.1,
        serialise -any,
        some < 1.0.3,
        template-haskell -any,
        th-compat -any,
        text -any,
        th-lift -any,
        th-lift-instances -any,
        th-utilities -any,
        time -any,
        transformers -any,
        unordered-containers -any,
        witherable -any,
        word-array -any,
        cardano-crypto-class -any,
        index-envs

-- could split this up if we split up the main library for UPLC/PLC/PIR
library plutus-core-testlib
    import: lang
    visibility: public
    hs-source-dirs: testlib
    exposed-modules:
        PlutusCore.Test
        PlutusCore.Generators
        PlutusCore.Generators.AST
        PlutusCore.Generators.Interesting
        PlutusCore.Generators.NEAT.Common
        PlutusCore.Generators.NEAT.Spec
        PlutusCore.Generators.NEAT.Term
        PlutusCore.Generators.NEAT.Type
        PlutusCore.Generators.Test

        PlutusIR.Test
        PlutusIR.Generators.AST

        Test.Tasty.Extras
    other-modules:
        PlutusCore.Generators.Internal.Builtin
        PlutusCore.Generators.Internal.Denotation
        PlutusCore.Generators.Internal.Entity
        PlutusCore.Generators.Internal.TypeEvalCheck
        PlutusCore.Generators.Internal.TypedBuiltinGen
        PlutusCore.Generators.Internal.Utils
    build-depends:
        base >=4.9 && <5,
        bifunctors -any,
        bytestring -any,
        containers -any,
        dependent-map >=0.4.0.0,
        filepath -any,
        ghc-prim -any,
        hedgehog >=1.0,
        integer-gmp -any,
        lazy-search -any,
        lens -any,
        megaparsec -any,
        mmorph -any,
        mtl -any,
        plutus-core -any,
        prettyprinter >=1.1.0.1,
        prettyprinter-configurable -any,
        size-based -any,
        some < 1.0.3,
        Stream -any,
        tasty -any,
        tasty-golden -any,
        tasty-hedgehog -any,
        tasty-hunit -any,
        text -any,
        transformers -any

test-suite satint-test
  import: lang
  type:              exitcode-stdio-1.0
  main-is:           TestSatInt.hs
  ghc-options:       -Wall
  build-depends:     base >=4.9 && <5,
                     test-framework,
                     test-framework-hunit,
                     test-framework-quickcheck2,
                     HUnit,
                     QuickCheck,
                     plutus-core
  default-language:  Haskell2010
  hs-source-dirs:    plutus-core/satint-test

test-suite plutus-core-test
    import: lang
    type: exitcode-stdio-1.0
    main-is: Spec.hs
    hs-source-dirs: plutus-core/test
    ghc-options: -threaded -rtsopts -with-rtsopts=-N
    other-modules:
        Check.Spec
        CostModelInterface.Spec
        Evaluation.Machines
        Evaluation.Spec
        Names.Spec
        Normalization.Check
        Normalization.Type
        Pretty.Readable
        TypeSynthesis.Spec
    default-language: Haskell2010
    build-depends:
        base >=4.9 && <5,
        bytestring -any,
        containers -any,
        extra -any,
        filepath -any,
        flat -any,
        hedgehog -any,
        plutus-core -any,
        plutus-core-testlib -any,
        megaparsec -any,
        mmorph -any,
        mtl -any,
        prettyprinter -any,
        tasty -any,
        tasty-golden -any,
        tasty-hedgehog -any,
        tasty-hunit -any,
        text -any,
        transformers -any,
        aeson -any,
        template-haskell -any,
        th-lift-instances -any,
        th-utilities -any,
        data-default-class -any,

test-suite plutus-ir-test
    import: lang
    type: exitcode-stdio-1.0
    main-is: Spec.hs
    hs-source-dirs: plutus-ir/test
    other-modules:
        NamesSpec
        ParserSpec
        TransformSpec
        TypeSpec
    build-depends:
        base >=4.9 && <5,
        plutus-core -any,
        plutus-core-testlib -any,
        flat -any,
        hedgehog -any,
        megaparsec -any,
        tasty -any,
        tasty-hedgehog -any,
        text -any

test-suite untyped-plutus-core-test
    import: lang
    type: exitcode-stdio-1.0
    main-is: Spec.hs
    hs-source-dirs: untyped-plutus-core/test
    ghc-options: -O2 -threaded -rtsopts -with-rtsopts=-N
    other-modules:
        Evaluation.Builtins
        Evaluation.Builtins.Coherence
        Evaluation.Builtins.Common
        Evaluation.Builtins.Definition
        Evaluation.Builtins.MakeRead
        Evaluation.Builtins.SECP256k1
        Evaluation.FreeVars
        Evaluation.Golden
        Evaluation.Machines
        Transform.Simplify
        DeBruijn.Common
        DeBruijn.Scope
        DeBruijn.Spec
        DeBruijn.UnDeBruijnify
    build-depends:
        base >=4.9 && <5,
        bytestring -any,
        cardano-crypto-class -any,
        hedgehog -any,
        flat -any,
        lens -any,
        mtl -any,
        plutus-core -any,
        plutus-core-testlib -any,
        index-envs -any,
        prettyprinter -any,
        pretty-show -any,
        secp256k1-haskell -any,
        tasty -any,
        tasty-golden -any,
        tasty-hedgehog -any,
        tasty-hunit -any,
        text -any

executable plc
    import: lang
    main-is: plc/Main.hs
    hs-source-dirs: executables
    other-modules:
        Common
        Parsers
    build-depends:
        base >=4.9 && <5,
        plutus-core -any,
        plutus-core-testlib -any,
        aeson -any,
        bytestring -any,
        deepseq -any,
        flat -any,
        monoidal-containers -any,
        mtl -any,
        optparse-applicative -any,
        prettyprinter -any,
        text -any,
        transformers -any,
        lens -any,
        megaparsec -any

executable uplc
    import: lang
    main-is: uplc/Main.hs
    hs-source-dirs: executables
    other-modules:
        Common
        Parsers
    build-depends:
        base >=4.9 && <5,
        plutus-core -any,
        plutus-core-testlib -any,
        aeson -any,
        bytestring -any,
        deepseq -any,
        flat -any,
        monoidal-containers -any,
        mtl -any,
        optparse-applicative -any,
        prettyprinter -any,
        split -any,
        text -any,
        transformers -any,
        lens -any,
        megaparsec -any

executable pir
    import: lang
    main-is: pir/Main.hs
    hs-source-dirs: executables
    other-modules:
        Common
        Parsers
    build-depends:
        base >=4.9 && <5,
        plutus-core -any,
        plutus-core-testlib -any,
        aeson -any,
        bytestring -any,
        flat -any,
        lens -any,
        deepseq -any,
        monoidal-containers -any,
        optparse-applicative -any,
        mtl -any,
        transformers -any,
        bytestring -any,
        containers -any,
        prettyprinter -any,
        cassava -any,
        text -any,
        megaparsec -any

executable traceToStacks
    import: lang
    main-is: Main.hs
    hs-source-dirs: executables/traceToStacks
    other-modules:
        Common
    build-depends:
        base >=4.9 && <5,
        cassava -any,
        integer-gmp -any,
        bytestring -any,
        optparse-applicative -any,
        text -any,
        vector -any,

-- Tests for functions called by @traceToStacks@.
test-suite traceToStacks-test
    import: lang
    type: exitcode-stdio-1.0
    hs-source-dirs: executables/traceToStacks
    default-language: Haskell2010
    main-is: TestGetStacks.hs
    other-modules:
        Common
    build-depends:
        base >=4.9 && <5,
        bytestring -any,
        cassava -any,
        tasty -any,
        tasty-hunit -any,
        text -any,
        vector -any,

-- This runs the microbenchmarks used to generate the cost models for built-in
-- functions, saving the results in a CSV file which must be specified on the
-- commmand line.  It will take several hours.
executable cost-model-budgeting-bench
    import: lang
    main-is: Main.hs
    other-modules:
        Common
        CriterionExtensions
        Generators
        Benchmarks.Bool
        Benchmarks.ByteStrings
        Benchmarks.CryptoAndHashes
        Benchmarks.Data
        Benchmarks.Integers
        Benchmarks.Lists
        Benchmarks.Misc
        Benchmarks.Nops
        Benchmarks.Pairs
        Benchmarks.Strings
        Benchmarks.Tracing
        Benchmarks.Unit
    hs-source-dirs: cost-model/budgeting-bench
    build-depends:
        plutus-core -any,
        base >=4.9 && <5,
        bytestring -any,
        criterion -any,
        criterion-measurement -any,
        deepseq -any,
        filepath -any,
        directory -any,
        hedgehog -any,
        mtl -any,
        optparse-applicative -any,
        QuickCheck -any,
        quickcheck-instances -any,
        random -any,
        text -any,
        time -any


-- This reads CSV data generated by cost-model-budgeting-bench, uses R to build
-- the cost models for built-in functions, and saves them in a specified
-- JSON file (see the help).  The 'official' cost model should be checked in
-- in plutus-core/cost-model/data/builtinCostModel.json.
executable generate-cost-model
    import: lang
    main-is: Main.hs
    hs-source-dirs: cost-model/create-cost-model
    ghc-options: -threaded -rtsopts -with-rtsopts=-N -Wall -Wincomplete-uni-patterns
                 -Wincomplete-record-updates -Wredundant-constraints -Widentities
    build-depends:
        base >=4.9 && <5,
        plutus-core -any,
        aeson-pretty -any,
        barbies -any,
        bytestring -any,
        cassava -any,
        exceptions -any,
        extra -any,
        inline-r -any,
        text -any,
        vector -any,
        optparse-applicative -any,
        directory -any
    other-modules:
        CreateBuiltinCostModel

-- The cost models for builtins are generated using R and converted into a JSON
-- form that can later be used to construct Haskell functions.  This tests that
-- the predictions of the Haskell version are (approximately) identical to the R
-- ones.  This test is problematic in CI: pretending that it's a benchmark will
-- prevent it from being run automatically but will still allow us to run it
-- manually; `cabal bench` also sets the working directory to the root of the
-- relevant package, which makes it easier to find the cost model data files
-- (unlike `cabal run` for exectuables, which sets the working directory to the
-- current shell directory).
benchmark cost-model-test
    import: lang
    type: exitcode-stdio-1.0
    main-is: TestCostModels.hs
    other-modules: TH
    hs-source-dirs: cost-model/test, cost-model/create-cost-model
    build-depends:
        base >=4.9 && <5,
        plutus-core -any,
        barbies -any,
        bytestring -any,
        cassava -any,
        exceptions -any,
        extra -any,
        hedgehog -any,
        inline-r -any,
        mmorph -any,
        template-haskell -any,
        text -any,
        vector -any
    other-modules:
        CreateBuiltinCostModel

library index-envs
    import: lang
    hs-source-dirs: index-envs/src
    default-language: Haskell2010
    exposed-modules:
      Data.RandomAccessList.Class
      Data.RandomAccessList.SkewBinary
      Data.RandomAccessList.SkewBinarySlab
      Data.RandomAccessList.RelativizedMap
    build-depends:
        base >=4.9 && <5,
        containers -any,
        extra -any,
        vector -any,
        nonempty-vector -any,
        -- broken for ral-0.2 conflicts with cardano-binary:recursion-schemes
        ral == 0.1

benchmark index-envs-bench
    import: lang
    type: exitcode-stdio-1.0
    hs-source-dirs: index-envs/bench
    default-language: Haskell2010
    main-is: Main.hs
    build-depends:
        base >=4.9 && <5,
        index-envs -any,
        criterion >= 1.5.9.0,
        random >= 1.2.0,
        nonempty-vector -any,
        -- broken for ral-0.2 conflicts with cardano-binary:recursion-schemes
        ral == 0.1

test-suite index-envs-test
    import: lang
    type: exitcode-stdio-1.0
    hs-source-dirs: index-envs/test
    default-language: Haskell2010
    main-is: Spec.hs
    other-modules:
        RAList.Spec
    build-depends:
        base >=4.9 && <5,
        index-envs -any,
        nonempty-vector -any,
        QuickCheck -any,
        quickcheck-instances -any,
        tasty -any,
        tasty-quickcheck -any

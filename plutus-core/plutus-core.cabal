cabal-version: 2.4
name: plutus-core
version: 0.1.0.0
license: Apache-2.0
license-files:
  LICENSE
  NOTICE
maintainer: vanessa.mchale@iohk.io
author: Vanessa McHale
tested-with: ghc ==8.2.2 ghc ==8.4.3 ghc ==8.6.1
synopsis: Language library for Plutus Core
description:
    Pretty-printer, parser, and typechecker for Plutus Core.
category: Language, Plutus
build-type: Simple
extra-doc-files: README.md
extra-source-files:
    src/costModel.json
    plutus-core/src/costModel.json
    budgeting-bench/csvs/*.csv
    plutus-core/budgeting-bench/csvs/*.csv
    budgeting-bench/*.R
    plutus-core/budgeting-bench/*.R

source-repository head
    type: git
    location: https://github.com/input-output-hk/plutus

common lang
    default-language: Haskell2010
    default-extensions: ExplicitForAll FlexibleContexts ScopedTypeVariables
                        DeriveGeneric StandaloneDeriving DeriveLift
                        GeneralizedNewtypeDeriving DeriveFunctor DeriveFoldable
                        DeriveTraversable DerivingStrategies DerivingVia
    other-extensions: DeriveAnyClass FlexibleInstances
                      MultiParamTypeClasses TypeFamilies OverloadedStrings
                      MonadComprehensions ConstrainedClassMethods TupleSections GADTs
                      RankNTypes TemplateHaskell QuasiQuotes TypeApplications
                      ExistentialQuantification
    ghc-options: -Wall -Wnoncanonical-monad-instances
                 -Wincomplete-uni-patterns -Wincomplete-record-updates
                 -Wredundant-constraints -Widentities
                 -Wnoncanonical-monoid-instances

library
    import: lang
    exposed-modules:
        Language.PlutusCore
        Language.PlutusCore.Quote
        Language.PlutusCore.MkPlc
        Language.PlutusCore.Evaluation.Machine.Ck
        Language.PlutusCore.Evaluation.Machine.Cek
        Language.PlutusCore.Evaluation.Machine.ExBudgeting
        Language.PlutusCore.Evaluation.Machine.ExBudgetingDefaults
        Language.PlutusCore.Evaluation.Machine.Exception
        Language.PlutusCore.Evaluation.Machine.ExMemory
        Language.PlutusCore.Evaluation.Evaluator
        Language.PlutusCore.Evaluation.Result
        Language.PlutusCore.Check.Value
        Language.PlutusCore.Check.Normal
        Language.PlutusCore.CBOR
        Language.PlutusCore.Constant
        Language.PlutusCore.Constant.Dynamic
        Language.PlutusCore.Universe
        Language.PlutusCore.Rename.Internal
        Language.PlutusCore.Rename.Monad
        Language.PlutusCore.Rename
        Language.PlutusCore.Normalize
        Language.PlutusCore.Normalize.Internal
        Language.PlutusCore.Pretty
        Language.PlutusCore.Subst
        Language.PlutusCore.Name
        Language.PlutusCore.Core
        Language.PlutusCore.DeBruijn
        Language.PlutusCore.Check.Uniques
        Language.PlutusCore.FsTree
        Language.PlutusCore.StdLib.Data.Bool
        Language.PlutusCore.StdLib.Data.ChurchNat
        Language.PlutusCore.StdLib.Data.Function
        Language.PlutusCore.StdLib.Data.Integer
        Language.PlutusCore.StdLib.Data.List
        Language.PlutusCore.StdLib.Data.Nat
        Language.PlutusCore.StdLib.Data.Sum
        Language.PlutusCore.StdLib.Data.Unit
        Language.PlutusCore.StdLib.Data.ScottUnit
        Language.PlutusCore.StdLib.Everything
        Language.PlutusCore.StdLib.Meta
        Language.PlutusCore.StdLib.Meta.Data.Tuple
        Language.PlutusCore.StdLib.Meta.Data.Function
        Language.PlutusCore.StdLib.Type
        Language.PlutusCore.Examples.Everything
        Language.PlutusCore.Generators
        Language.PlutusCore.Generators.AST
        Language.PlutusCore.Generators.Interesting
        Language.PlutusCore.Generators.Test
        Language.PlutusCore.Generators.NEAT.Common
        Language.PlutusCore.Generators.NEAT.Spec
        Language.PlutusCore.Generators.NEAT.Type
        Language.PlutusCore.Lexer
        Language.PlutusCore.Parser

        Language.PlutusIR
        Language.PlutusIR.Compiler
        Language.PlutusIR.Compiler.Names
        Language.PlutusIR.Compiler.Definitions
        Language.PlutusIR.Error
        Language.PlutusIR.Generators.AST
        Language.PlutusIR.Parser
        Language.PlutusIR.MkPir
        Language.PlutusIR.Purity
        Language.PlutusIR.Optimizer.DeadCode
        Language.PlutusIR.Transform.Substitute
        Language.PlutusIR.Transform.ThunkRecursions
        Language.PlutusIR.Transform.Rename
        Language.PlutusIR.Transform.NonStrict
        Language.PlutusIR.Transform.LetFloat
        Language.PlutusIR.Transform.Inline
        Language.PlutusIR.TypeCheck

        Language.UntypedPlutusCore
        Language.UntypedPlutusCore.DeBruijn
        Language.UntypedPlutusCore.Evaluation.Machine.Cek
        Language.UntypedPlutusCore.Parser

        PlutusPrelude
        Common
        Data.ByteString.Hash
        PlcTestUtils
        Crypto
        Data.Text.Prettyprint.Doc.Custom
    build-tool-depends: alex:alex -any, happy:happy >=1.17.1
    hs-source-dirs: src prelude stdlib examples generators common plutus-ir untyped-plutus-core
    other-modules:
        Language.PlutusCore.Pretty.ConfigName
        Language.PlutusCore.Core.Type
        Language.PlutusCore.Core.Plated
        Language.PlutusCore.Core.Instance.Eq
        Language.PlutusCore.Core.Instance.Pretty.Classic
        Language.PlutusCore.Core.Instance.Pretty.Common
        Language.PlutusCore.Core.Instance.Pretty.Default
        Language.PlutusCore.Core.Instance.Pretty.Plc
        Language.PlutusCore.Core.Instance.Pretty.Readable
        Language.PlutusCore.Core.Instance.Pretty
        Language.PlutusCore.Core.Instance.Recursive
        Language.PlutusCore.Core.Instance
        Language.PlutusCore.Constant.Apply
        Language.PlutusCore.Constant.Dynamic.BuiltinName
        Language.PlutusCore.Constant.Dynamic.Call
        Language.PlutusCore.Constant.Dynamic.Emit
        Language.PlutusCore.Constant.Dynamic.OffChain
        Language.PlutusCore.Constant.Function
        Language.PlutusCore.Constant.Name
        Language.PlutusCore.Constant.Typed
        Language.PlutusCore.DeBruijn.Internal
        Language.PlutusCore.Lexer.Type
        Language.PlutusCore.Eq
        Language.PlutusCore.Mark
        Language.PlutusCore.Parser.Internal
        Language.PlutusCore.Pretty.Classic
        Language.PlutusCore.Pretty.ConfigName
        Language.PlutusCore.Pretty.Default
        Language.PlutusCore.Pretty.Plc
        Language.PlutusCore.Pretty.PrettyConst
        Language.PlutusCore.Pretty.Readable
        Language.PlutusCore.Pretty.Utils
        Language.PlutusCore.Universe.Core
        Language.PlutusCore.Universe.Default
        Language.PlutusCore.Error
        Language.PlutusCore.Size
        Language.PlutusCore.TypeCheck.Internal
        Language.PlutusCore.TypeCheck
        Language.PlutusCore.Analysis.Definitions
        Language.PlutusCore.Examples.Data.InterList
        Language.PlutusCore.Examples.Data.Shad
        Language.PlutusCore.Examples.Data.TreeForest
        Language.PlutusCore.Examples.Data.Vec
        Language.PlutusCore.Generators.Internal.Denotation
        Language.PlutusCore.Generators.Internal.Dependent
        Language.PlutusCore.Generators.Internal.Entity
        Language.PlutusCore.Generators.Internal.TypeEvalCheck
        Language.PlutusCore.Generators.Internal.TypedBuiltinGen
        Language.PlutusCore.Generators.Internal.Utils
        Language.PlutusCore.Parsable

        Language.PlutusIR.Analysis.Dependencies
        Language.PlutusIR.Analysis.Usages
        Language.PlutusIR.Compiler.Let
        Language.PlutusIR.Compiler.Datatype
        Language.PlutusIR.Compiler.Provenance
        Language.PlutusIR.Compiler.Recursion
        Language.PlutusIR.Compiler.Types
        Language.PlutusIR.Compiler.Lower
        Language.PlutusIR.Normalize
        Language.PlutusIR.TypeCheck.Internal

        Language.UntypedPlutusCore.Core
        Language.UntypedPlutusCore.Core.Instance
        Language.UntypedPlutusCore.Core.Instance.Eq
        Language.UntypedPlutusCore.Core.Instance.Pretty
        Language.UntypedPlutusCore.Core.Instance.Pretty.Classic
        Language.UntypedPlutusCore.Core.Instance.Pretty.Plc
        Language.UntypedPlutusCore.Core.Instance.Pretty.Readable
        Language.UntypedPlutusCore.Core.Instance.CBOR
        Language.UntypedPlutusCore.Core.Type
        Language.UntypedPlutusCore.Core.Plated
        Language.UntypedPlutusCore.Size
        Language.UntypedPlutusCore.Subst

        Data.Aeson.THReader
        Data.Functor.Foldable.Monadic
    build-depends:
        array -any,
        aeson -any,
        algebraic-graphs >= 0.3,
        base >=4.9 && <5,
        barbies -any,
        bifunctors -any,
        bimap -any,
        bytestring -any,
        cardano-crypto,
        cborg -any,
        composition-prelude >=1.1.0.1,
        containers -any,
        cryptonite -any,
        dependent-map -any,
        dependent-sum <0.7,
        dependent-sum-template -any,
        deriving-aeson >= 0.2.3,
        deriving-compat -any,
        deepseq -any,
        filepath -any,
        hashable,
        hedgehog >=1.0,
        integer-gmp -any,
        ghc-prim -any,
        lazy-search -any,
        lens -any,
        megaparsec -any,
        memory -any,
        mmorph -any,
        monoidal-containers,
        mtl -any,
        nonempty-containers -any,
        parser-combinators >= 0.4.0,
        prettyprinter >=1.1.0.1,
        prettyprinter-configurable -any,
        recursion-schemes -any,
        safe-exceptions -any,
        semigroups -any,
        semigroupoids -any,
        serialise -any,
        size-based -any,
        tasty -any,
        tasty-golden -any,
        tasty-hunit -any,
        text -any,
        th-lift -any,
        th-lift-instances -any,
        th-utilities -any,
        template-haskell -any,
        data-default -any,
        data-default-class -any,
        transformers -any,
        witherable -any,
        Stream -any

executable plutus-core-generate-evaluation-test
    import: lang
    main-is: Main.hs
    hs-source-dirs: generate-evaluation-test
    ghc-options: -threaded -rtsopts -with-rtsopts=-N
    build-depends:
        base -any,
        cborg -any,
        hedgehog -any,
        plutus-core -any,
        serialise -any,
        text -any

test-suite plutus-core-test
    import: lang
    type: exitcode-stdio-1.0
    main-is: Spec.hs
    hs-source-dirs: test
    ghc-options: -threaded -rtsopts -with-rtsopts=-N
    other-modules:
        Evaluation.ApplyBuiltinName
        Evaluation.DynamicBuiltins.Common
        Evaluation.DynamicBuiltins.Definition
        Evaluation.DynamicBuiltins.MakeRead
        Evaluation.DynamicBuiltins
        Evaluation.Golden
        Evaluation.Machines
        Evaluation.Spec
        Normalization.Check
        Normalization.Type
        Pretty.Readable
        Check.Spec
        TypeSynthesis.Spec
    default-language: Haskell2010
    build-depends:
        base -any,
        bytestring -any,
        containers -any,
        filepath -any,
        hedgehog -any,
        plutus-core -any,
        lazy-search -any,
        lens -any,
        mmorph -any,
        mtl -any,
        prettyprinter -any,
        serialise -any,
        size-based -any,
        Stream -any,
        tasty -any,
        tasty-golden -any,
        tasty-hedgehog -any,
        tasty-hunit -any,
        text -any,
        transformers -any,
        tuple -any

test-suite plutus-ir-test
    import: lang
    type: exitcode-stdio-1.0
    main-is: Spec.hs
    hs-source-dirs: plutus-ir-test
    other-modules:
        OptimizerSpec
        TransformSpec
        ParserSpec
        TypeSpec
        TestLib
    build-depends:
        base >=4.9 && <5,
        hedgehog -any,
        filepath -any,
        text -any,
        plutus-core -any,
        lens -any,
        mtl -any,
        mmorph -any,
        prettyprinter -any,
        serialise -any,
        tasty -any,
        tasty-hedgehog -any,
        megaparsec -any

test-suite untyped-plutus-core-test
    import: lang
    type: exitcode-stdio-1.0
    main-is: Spec.hs
    hs-source-dirs: untyped-plutus-core-test
    other-modules:
        Evaluation.ApplyBuiltinName
        Evaluation.Machines
    build-depends:
        base >=4.9 && <5,
        bytestring,
        hedgehog -any,
        plutus-core -any,
        mtl -any,
        prettyprinter -any,
        tasty -any,
        tasty-hedgehog -any

benchmark plutus-core-bench
    import: lang
    type: exitcode-stdio-1.0
    main-is: Bench.hs
    hs-source-dirs: bench
    ghc-options: -rtsopts
    build-depends:
        base -any,
        bytestring -any,
        mtl -any,
        containers -any,
        criterion -any,
        plutus-core -any,
        serialise -any

benchmark plutus-core-weigh
    import: lang
    type: exitcode-stdio-1.0
    main-is: Bench.hs
    hs-source-dirs: weigh
    ghc-options: -rtsopts
    build-depends:
        base -any,
        bytestring -any,
        containers -any,
        plutus-core -any,
        serialise -any,
        weigh -any

executable plc
    import: lang
    main-is: Main.hs
    hs-source-dirs: exe
    build-depends:
        base <5,
        deepseq -any,
        plutus-core -any,
        transformers -any,
        bytestring -any,
        deepseq -any,
        serialise -any,
        text -any,
        lens -any,
        prettyprinter -any,
        optparse-applicative -any

benchmark plutus-core-budgeting-bench
    import: lang
    type: exitcode-stdio-1.0
    main-is: Bench.hs
    hs-source-dirs: budgeting-bench
    default-language: Haskell2010
    ghc-options: -threaded -rtsopts -with-rtsopts=-N -Wall -Wincomplete-uni-patterns
                 -Wincomplete-record-updates -Wredundant-constraints -Widentities
    build-depends:
        base -any,
        bytestring -any,
        containers -any,
        criterion -any,
        plutus-core -any,
        serialise -any,
        deepseq -any,
        lens -any,
        directory -any,
        integer-gmp -any,
        hedgehog -any

-- benchmark sets the correct PWD and doesn't get run by `stack test`
benchmark plutus-core-create-cost-model
    type: exitcode-stdio-1.0
    main-is: CreateCostModel.hs
    -- cost-model-creation should be its own library, but stack + HIE really don't like sub-libraries.
    hs-source-dirs: create-cost-model, cost-model-creation
    default-language: Haskell2010
    ghc-options: -threaded -rtsopts -with-rtsopts=-N -Wall -Wincomplete-uni-patterns
                 -Wincomplete-record-updates -Wredundant-constraints -Widentities
    build-depends:
        base -any,
        barbies -any,
        bytestring -any,
        containers -any,
        plutus-core -any,
        serialise -any,
        deepseq -any,
        lens -any,
        directory -any,
        inline-r -any,
        hedgehog -any,
        vector -any,
        aeson -any,
        text -any,
        deriving-aeson >= 0.2.3,
        extra -any,
        data-default -any,
        cassava -any,
        exceptions -any,
        deriving-aeson >= 0.2.3,
        aeson-pretty -any,
        bytestring -any
    other-modules:
        CostModelCreation

test-suite plutus-core-test-cost-model
    type: exitcode-stdio-1.0
    main-is: TestCostModels.hs
    hs-source-dirs: test-cost-model, cost-model-creation
    default-language: Haskell2010
    ghc-options: -threaded -rtsopts -with-rtsopts=-N -Wall -Wincomplete-uni-patterns
                 -Wincomplete-record-updates -Wredundant-constraints -Widentities
    build-depends:
        base -any,
        bytestring -any,
        barbies -any,
        containers -any,
        plutus-core -any,
        serialise -any,
        deepseq -any,
        lens -any,
        directory -any,
        hedgehog -any,
        vector -any,
        aeson -any,
        text -any,
        deriving-aeson >= 0.2.3,
        extra -any,
        data-default -any,
        cassava -any,
        mmorph -any,
        exceptions -any,
        hedgehog -any,
        bytestring -any,
        containers -any,
        inline-r -any
    other-modules:
        CostModelCreation

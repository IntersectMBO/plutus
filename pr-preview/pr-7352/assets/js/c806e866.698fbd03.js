"use strict";
(self["webpackChunkdocusaurus"] = self["webpackChunkdocusaurus"] || []).push([[5115],{

/***/ 8859:
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Plinth User Guide","href":"/pr-preview/pr-7352/","docId":"index","unlisted":false},{"type":"category","label":"Essential concepts","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Plinth and Plutus Core","href":"/pr-preview/pr-7352/essential-concepts/plinth-and-plutus-core","docId":"essential-concepts/plinth-and-plutus-core","unlisted":false},{"type":"link","label":"Different Notions of Version","href":"/pr-preview/pr-7352/essential-concepts/versions","docId":"essential-concepts/versions","unlisted":false},{"type":"link","label":"Scripts and the Extended UTXO Model","href":"/pr-preview/pr-7352/essential-concepts/eutxo","docId":"essential-concepts/eutxo","unlisted":false}],"href":"/pr-preview/pr-7352/category/essential-concepts"},{"type":"category","label":"Example: An Auction Smart Contract","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"On-chain Code: The Auction Validator","href":"/pr-preview/pr-7352/auction-smart-contract/on-chain-code","docId":"auction-smart-contract/on-chain-code","unlisted":false},{"type":"category","label":"End to end","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Generating Keys and Addresses","href":"/pr-preview/pr-7352/auction-smart-contract/end-to-end/generating-keys","docId":"auction-smart-contract/end-to-end/generating-keys","unlisted":false},{"type":"link","label":"Getting Funds from the Faucet","href":"/pr-preview/pr-7352/auction-smart-contract/end-to-end/getting-funds","docId":"auction-smart-contract/end-to-end/getting-funds","unlisted":false},{"type":"link","label":"Minting the Token to be Auctioned","href":"/pr-preview/pr-7352/auction-smart-contract/end-to-end/mint","docId":"auction-smart-contract/end-to-end/mint","unlisted":false},{"type":"link","label":"Placing Bids","href":"/pr-preview/pr-7352/auction-smart-contract/end-to-end/placing-bids","docId":"auction-smart-contract/end-to-end/placing-bids","unlisted":false},{"type":"link","label":"Closing the Auction","href":"/pr-preview/pr-7352/auction-smart-contract/end-to-end/closing-the-auction","docId":"auction-smart-contract/end-to-end/closing-the-auction","unlisted":false}],"href":"/pr-preview/pr-7352/category/end-to-end"}],"href":"/pr-preview/pr-7352/category/example-an-auction-smart-contract"},{"type":"link","label":"Glossary","href":"/pr-preview/pr-7352/glossary","docId":"glossary","unlisted":false},{"type":"link","label":"Haddock Documentation","href":"/pr-preview/pr-7352/haddock-documentation","docId":"haddock-documentation","unlisted":false},{"type":"category","label":"Using Plinth","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Environment Setup","href":"/pr-preview/pr-7352/using-plinth/environment-setup","docId":"using-plinth/environment-setup","unlisted":false},{"type":"link","label":"Compiling Plinth","href":"/pr-preview/pr-7352/using-plinth/compiling-plinth","docId":"using-plinth/compiling-plinth","unlisted":false},{"type":"link","label":"Lifting Values into CompiledCode","href":"/pr-preview/pr-7352/using-plinth/lifting","docId":"using-plinth/lifting","unlisted":false},{"type":"link","label":"Evaluating CompiledCode","href":"/pr-preview/pr-7352/using-plinth/evaluating-plinth","docId":"using-plinth/evaluating-plinth","unlisted":false},{"type":"link","label":"Differences From Haskell","href":"/pr-preview/pr-7352/using-plinth/differences-from-haskell","docId":"using-plinth/differences-from-haskell","unlisted":false},{"type":"link","label":"GHC Extensions, Flags and Pragmas","href":"/pr-preview/pr-7352/using-plinth/extensions-flags-pragmas","docId":"using-plinth/extensions-flags-pragmas","unlisted":false},{"type":"link","label":"Special Functions and Types","href":"/pr-preview/pr-7352/using-plinth/special-functions-and-types","docId":"using-plinth/special-functions-and-types","unlisted":false},{"type":"link","label":"Inspecting Compilation and Compiled Code","href":"/pr-preview/pr-7352/using-plinth/inspecting","docId":"using-plinth/inspecting","unlisted":false},{"type":"link","label":"CLI tool for Plutus","href":"/pr-preview/pr-7352/using-plinth/cli-plutus","docId":"using-plinth/cli-plutus","unlisted":false}],"href":"/pr-preview/pr-7352/category/using-plinth"},{"type":"category","label":"Working with scripts","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Plutus Ledger Language Version (Plutus V1/V2/V3)","href":"/pr-preview/pr-7352/working-with-scripts/ledger-language-version","docId":"working-with-scripts/ledger-language-version","unlisted":false},{"type":"link","label":"Script Purposes","href":"/pr-preview/pr-7352/working-with-scripts/script-purposes","docId":"working-with-scripts/script-purposes","unlisted":false},{"type":"link","label":"Producing a Plutus contract blueprint","href":"/pr-preview/pr-7352/working-with-scripts/producing-a-blueprint","docId":"working-with-scripts/producing-a-blueprint","unlisted":false},{"type":"link","label":"Optimizing Scripts with asData","href":"/pr-preview/pr-7352/working-with-scripts/optimizing-scripts-with-asData","docId":"working-with-scripts/optimizing-scripts-with-asData","unlisted":false},{"type":"link","label":"Simplifying Code Before Compilation","href":"/pr-preview/pr-7352/working-with-scripts/simplifying-before-compilation","docId":"working-with-scripts/simplifying-before-compilation","unlisted":false},{"type":"link","label":"Compile Time Evaluation","href":"/pr-preview/pr-7352/working-with-scripts/compile-time-evaluation","docId":"working-with-scripts/compile-time-evaluation","unlisted":false},{"type":"link","label":"Other Optimization Techniques","href":"/pr-preview/pr-7352/working-with-scripts/other-optimization-techniques","docId":"working-with-scripts/other-optimization-techniques","unlisted":false},{"type":"link","label":"Profiling Script Budget Usage","href":"/pr-preview/pr-7352/working-with-scripts/profiling-budget-usage","docId":"working-with-scripts/profiling-budget-usage","unlisted":false}],"href":"/pr-preview/pr-7352/category/working-with-scripts"},{"type":"category","label":"Delve Deeper","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Overview of Languages Compiling to UPLC","href":"/pr-preview/pr-7352/delve-deeper/languages","docId":"delve-deeper/languages","unlisted":false},{"type":"link","label":"Plinth Compiler Options","href":"/pr-preview/pr-7352/delve-deeper/plinth-compiler-options","docId":"delve-deeper/plinth-compiler-options","unlisted":false},{"type":"link","label":"Cost Model","href":"/pr-preview/pr-7352/delve-deeper/cost-model","docId":"delve-deeper/cost-model","unlisted":false},{"type":"link","label":"Understanding Script Hashes","href":"/pr-preview/pr-7352/delve-deeper/understanding-script-hashes","docId":"delve-deeper/understanding-script-hashes","unlisted":false},{"type":"link","label":"Encoding Data Types in UPLC","href":"/pr-preview/pr-7352/delve-deeper/encoding","docId":"delve-deeper/encoding","unlisted":false},{"type":"category","label":"Further Resources","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Formal Specification","href":"/pr-preview/pr-7352/delve-deeper/further-resources/formal-specification","docId":"delve-deeper/further-resources/formal-specification","unlisted":false},{"type":"link","label":"Plutus-Related CIPs","href":"/pr-preview/pr-7352/delve-deeper/further-resources/plutus-cips","docId":"delve-deeper/further-resources/plutus-cips","unlisted":false},{"type":"link","label":"Research Publications","href":"/pr-preview/pr-7352/delve-deeper/further-resources/research-publications","docId":"delve-deeper/further-resources/research-publications","unlisted":false},{"type":"link","label":"Videos","href":"/pr-preview/pr-7352/delve-deeper/further-resources/videos","docId":"delve-deeper/further-resources/videos","unlisted":false}],"href":"/pr-preview/pr-7352/category/further-resources"}],"href":"/pr-preview/pr-7352/category/delve-deeper"},{"type":"link","label":"Troubleshooting","href":"/pr-preview/pr-7352/troubleshooting","docId":"troubleshooting","unlisted":false}]},"docs":{"auction-smart-contract/end-to-end/closing-the-auction":{"id":"auction-smart-contract/end-to-end/closing-the-auction","title":"Closing the Auction","description":"Once the auction\'s end time has elapsed, a transaction can be submitted to finalize the auction, distributing the token and the highest bid accordingly.","sidebar":"tutorialSidebar"},"auction-smart-contract/end-to-end/generating-keys":{"id":"auction-smart-contract/end-to-end/generating-keys","title":"Generating Keys and Addresses","description":"The best way to setup your environment is with the plinth-template repository. See its README for complete instructions on how to get up and running using Docker, Nix, or a custom approach.","sidebar":"tutorialSidebar"},"auction-smart-contract/end-to-end/getting-funds":{"id":"auction-smart-contract/end-to-end/getting-funds","title":"Getting Funds from the Faucet","description":"Next, we\'ll need to fund the wallet of each participant (seller, bidder1 and bidder2), in order to cover transaction fees and place bids.","sidebar":"tutorialSidebar"},"auction-smart-contract/end-to-end/mint":{"id":"auction-smart-contract/end-to-end/mint","title":"Minting the Token to be Auctioned","description":"Before we can start the auction, we need to mint a token to be auctioned.","sidebar":"tutorialSidebar"},"auction-smart-contract/end-to-end/placing-bids":{"id":"auction-smart-contract/end-to-end/placing-bids","title":"Placing Bids","description":"Now we can start bidding.","sidebar":"tutorialSidebar"},"auction-smart-contract/on-chain-code":{"id":"auction-smart-contract/on-chain-code","title":"On-chain Code: The Auction Validator","description":"The code in this example is not a production-ready implementation, as it is not optimized for security or efficiency.","sidebar":"tutorialSidebar"},"delve-deeper/cost-model":{"id":"delve-deeper/cost-model","title":"Cost Model","description":"The cost model is used to determine the portion of the transaction fee that accounts for Plutus script execution.","sidebar":"tutorialSidebar"},"delve-deeper/encoding":{"id":"delve-deeper/encoding","title":"Encoding Data Types in UPLC","description":"Untyped Plutus Core (UPLC) is a language based on untyped lambda calculus.","sidebar":"tutorialSidebar"},"delve-deeper/further-resources/formal-specification":{"id":"delve-deeper/further-resources/formal-specification","title":"Formal Specification","description":"Plutus Core Language Specification","sidebar":"tutorialSidebar"},"delve-deeper/further-resources/plutus-cips":{"id":"delve-deeper/further-resources/plutus-cips","title":"Plutus-Related CIPs","description":"This page lists all Cardano Improvement Proposals (CIPs) that are substantially related to Plutus smart contract platform, including core language features, builtin functions, and infrastructure improvements.","sidebar":"tutorialSidebar"},"delve-deeper/further-resources/research-publications":{"id":"delve-deeper/further-resources/research-publications","title":"Research Publications","description":"This page contains academic papers and research publications related to Plutus, the Extended UTXO model, and smart contract development on Cardano.","sidebar":"tutorialSidebar"},"delve-deeper/further-resources/videos":{"id":"delve-deeper/further-resources/videos","title":"Videos","description":"This page contains video resources related to Plutus and smart contract development on Cardano.","sidebar":"tutorialSidebar"},"delve-deeper/languages":{"id":"delve-deeper/languages","title":"Overview of Languages Compiling to UPLC","description":"Untyped Plutus Core (UPLC) is the assembly-like language that runs in Cardano nodes for transaction validation.","sidebar":"tutorialSidebar"},"delve-deeper/plinth-compiler-options":{"id":"delve-deeper/plinth-compiler-options","title":"Plinth Compiler Options","description":"These options can be passed to the compiler via the OPTIONS_GHC pragma, for instance","sidebar":"tutorialSidebar"},"delve-deeper/understanding-script-hashes":{"id":"delve-deeper/understanding-script-hashes","title":"Understanding Script Hashes","description":"Script hashes are a core concept and play a vital role on Cardano.","sidebar":"tutorialSidebar"},"essential-concepts/eutxo":{"id":"essential-concepts/eutxo","title":"Scripts and the Extended UTXO Model","description":"Account-based and UTXO-based Ledgers","sidebar":"tutorialSidebar"},"essential-concepts/plinth-and-plutus-core":{"id":"essential-concepts/plinth-and-plutus-core","title":"Plinth and Plutus Core","description":"Understanding the roles and relationships between different languages is key to the effective and efficient development of smart contracts.","sidebar":"tutorialSidebar"},"essential-concepts/versions":{"id":"essential-concepts/versions","title":"Different Notions of Version","description":"There are several different notions of version that Cardano smart contract developers must distinguish.","sidebar":"tutorialSidebar"},"glossary":{"id":"glossary","title":"Glossary","description":"Address","sidebar":"tutorialSidebar"},"haddock-documentation":{"id":"haddock-documentation","title":"Haddock Documentation","description":"Haddock is a tool for automatically generating documentation from annotated Haskell source code.","sidebar":"tutorialSidebar"},"index":{"id":"index","title":"Plinth User Guide","description":"Welcome to the Plinth user guide.","sidebar":"tutorialSidebar"},"troubleshooting":{"id":"troubleshooting","title":"Troubleshooting","description":"Compilation Errors","sidebar":"tutorialSidebar"},"using-plinth/cli-plutus":{"id":"using-plinth/cli-plutus","title":"CLI tool for Plutus","description":"The plutus CLI tool allows you to:","sidebar":"tutorialSidebar"},"using-plinth/compiling-plinth":{"id":"using-plinth/compiling-plinth","title":"Compiling Plinth","description":"The Plinth compiler is a GHC plugin, provided by the plutus-tx-plugin package.","sidebar":"tutorialSidebar"},"using-plinth/differences-from-haskell":{"id":"using-plinth/differences-from-haskell","title":"Differences From Haskell","description":"Strictness","sidebar":"tutorialSidebar"},"using-plinth/environment-setup":{"id":"using-plinth/environment-setup","title":"Environment Setup","description":"Plinth is a subset of Haskell, so configuring the development environment for Plinth is similar to a regular Haskell environment setup.","sidebar":"tutorialSidebar"},"using-plinth/evaluating-plinth":{"id":"using-plinth/evaluating-plinth","title":"Evaluating CompiledCode","description":"CompiledCode is intended to be evaluated by Cardano nodes during transaction validation. For this purpose, it is serialized and included in a transaction.","sidebar":"tutorialSidebar"},"using-plinth/extensions-flags-pragmas":{"id":"using-plinth/extensions-flags-pragmas","title":"GHC Extensions, Flags and Pragmas","description":"Plinth is a subset of Haskell and is compiled to Untyped Plutus Core by the Plinth compiler, a GHC (Glasgow Haskell Compiler) plugin.","sidebar":"tutorialSidebar"},"using-plinth/inspecting":{"id":"using-plinth/inspecting","title":"Inspecting Compilation and Compiled Code","description":"On this page, you’ll learn how to look into the compilation of Plinth and the resulting compiled code, which you might want to do for reasons such as debugging and tuning.","sidebar":"tutorialSidebar"},"using-plinth/lifting":{"id":"using-plinth/lifting","title":"Lifting Values into CompiledCode","description":"Stage Constraints","sidebar":"tutorialSidebar"},"using-plinth/special-functions-and-types":{"id":"using-plinth/special-functions-and-types","title":"Special Functions and Types","description":"Normally, the Plinth compiler compiles a Haskell identifier by obtaining and compiling its definition (also known as unfolding), and creating a term binding in PIR, an intermediate representation used by the Plinth compiler.","sidebar":"tutorialSidebar"},"working-with-scripts/compile-time-evaluation":{"id":"working-with-scripts/compile-time-evaluation","title":"Compile Time Evaluation","description":"Compile-time evaluation of expressions is usually preferable as it can reduce script size and execution cost.","sidebar":"tutorialSidebar"},"working-with-scripts/ledger-language-version":{"id":"working-with-scripts/ledger-language-version","title":"Plutus Ledger Language Version (Plutus V1/V2/V3)","description":"As explained in Different Notions of Version, Plutus V1, V2 and V3 are not distinct programming languages; the primary difference lies in the arguments the script receives from the ledger, and the value it returns.","sidebar":"tutorialSidebar"},"working-with-scripts/optimizing-scripts-with-asData":{"id":"working-with-scripts/optimizing-scripts-with-asData","title":"Optimizing Scripts with asData","description":"The Plutus libraries contain a PlutusTx.asData module that contains Template Haskell (TH) code for encoding algebraic data types (ADTs) as Data objects in Plutus Core, as opposed to sums-of-products terms.","sidebar":"tutorialSidebar"},"working-with-scripts/other-optimization-techniques":{"id":"working-with-scripts/other-optimization-techniques","title":"Other Optimization Techniques","description":"Identifying problem areas","sidebar":"tutorialSidebar"},"working-with-scripts/producing-a-blueprint":{"id":"working-with-scripts/producing-a-blueprint","title":"Producing a Plutus contract blueprint","description":"Plutus contract blueprints (CIP-0057) are used to document the binary interface of a Plutus contract in a machine-readable format (JSON schema).","sidebar":"tutorialSidebar"},"working-with-scripts/profiling-budget-usage":{"id":"working-with-scripts/profiling-budget-usage","title":"Profiling Script Budget Usage","description":"Figuring out why your script takes more CPU or memory units than you expect can be tricky.","sidebar":"tutorialSidebar"},"working-with-scripts/script-purposes":{"id":"working-with-scripts/script-purposes","title":"Script Purposes","description":"One of the arguments every Plutus script receives is the script context, containing information about the transaction the script is validating.","sidebar":"tutorialSidebar"},"working-with-scripts/simplifying-before-compilation":{"id":"working-with-scripts/simplifying-before-compilation","title":"Simplifying Code Before Compilation","description":"Much like in regular Haskell, simplifying or expanding certain Plinth code before compilation can make it more efficient.","sidebar":"tutorialSidebar"}}}}');

/***/ })

}]);
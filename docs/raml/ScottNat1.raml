(* Scott numerals in OCaml: first attempt. *)

(* This only works if you start ocaml with the -rectypes option; I
   think this gives us an equirecursive encoding, but it interacts
   badly with OCaml's solution to the value problem and I'm not sure
   if you can get round that. This wouldn't work with RAML anyway,
   because RAML doesn't support -rectypes. *)

type 'r nat = Nat of (('r nat -> 'r) -> 'r -> 'r)

(* If you just use 'r nat = ('r nat -> 'r) -> 'r -> 'r you get an error
   saying "Error: The type abbreviation nat is cyclic" *)

let zero = Nat (fun s z -> z)
let succ n  = Nat (fun s z -> s n)

(* let prec (Nat n) = n (fun (Nat x) -> x) zero *)
(* Can't get this to work without using Obj.magic *)

let rec to_int =  fun (Nat n) -> n (fun i -> (to_int i)+1) 0

let rec from_int = fun n -> Nat (fun f m -> 0)

let one = succ zero

let two = succ one

let five = succ(succ(succ(succ(succ zero))))
 
let six = succ (succ(succ(succ(succ(succ zero)))))

let rec add (Nat m) n = m (fun p -> succ(add p n)) n 

let _ = add five six


(* OCaml infers the following types:

  type 'r nat = Nat of ('r -> ('r nat -> 'r) -> 'r)
  val zero : 'a nat = Nat <fun>
  val succ : 'a nat -> 'a nat = <fun>
  val to_int : int nat -> int = <fun>
  val one : '_a nat = Nat <fun>
  val two : '_a nat = Nat <fun>
  val five : '_a nat = Nat <fun>
  val six : '_a nat = Nat <fun>
  val add : 'a nat nat -> 'a nat -> 'a nat = <fun>
  - : '_a nat = Nat <fun>

Note that we have weak type variables like '_a arising from the value
restriction (we have polymorphic values at the top level).  These will
be instantiated to appropriate concrete types when the values are
first used, which makes programming with these types rather tricky.

For example, the type of the first argument has an extra level of nat at the front:
when `add five six` is evaluated, the type of five becomes '_a nat nat
and that of six becomes '_a nat.  After that, we can evaluate `to_int six`
to get 6, but `to_int 5` causes a type error beacuse six has type '_a nat nat
and to_int expects int nat.

*)
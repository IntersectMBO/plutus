#ifndef ARG
#define ARG 20
#endif

#ifndef SIZE
#define SIZE 40
#endif

#define Int [(con integer) (con SIZE)]
#define Bool (all E (type) (fun E (fun E E)))
#define True  (abs E (type) (lam x E (lam y E x)))
#define False (abs E (type) (lam x E (lam y E y)))
#define Unit  (all E (type) (fun E E))
#define One   (abs E (type) (lam u E u))

(program 1.0.0

 [{ { (abs T (type)
  (abs U (type)
   (lam f (fun (fun T U) (fun T U))
   [
      (lam p (fix A (fun A (fun T U)))
        [f (lam a T [(unwrap p) p a])])
      (wrap Q (fun Q (fun T U)) 
        (lam q (fix A (fun A (fun T U)))
          [f (lam b T [(unwrap q) q b])])
      )
   ]
  )
  )
 ) Int }
 Int }

  (lam fac (fun Int Int) 
    (lam n Int
    [ { 
        [{(builtin lessThanEqualsInteger) (con SIZE)} n (con SIZE ! 1)] -- if n<=1
        (fun Unit Int)
      }
	  (lam u Unit (con SIZE ! 1)) -- then 1
	  (lam u Unit
            [{(builtin multiplyInteger) (con SIZE)} 
              n 
              [fac [{(builtin subtractInteger) (con SIZE)} 
                     n 
                     (con SIZE ! 1)
                   ]
              ]
           ]  
	  )  -- else n * fac (n-1)
	  One
    ]
    )) 
(con SIZE ! ARG)
]
)

{-
fix x A M = 
 [
  (unwrap (wrap (fun a A) (lam y (fix a (fun a A)) [[(unwrap y) y]/x]M)))
  (wrap (fun a A) (lam y (fix a (fun a A)) [[(unwrap y) y]/x]M))
 ]
-}

-- Preprocess this file with 'gpp -DARG=200000 -DSIZE=4' to get a program to which loops 200000 times, for example.
-- SIZE is the size of integers to use.

#ifndef ARG
#define ARG 20
#endif

#ifndef SIZE
#define SIZE 40
#endif

#define Int [(con integer) (con SIZE)]
#define Bool (all E (type) (fun E (fun E E)))
#define True  (abs E (type) (lam x E (lam y E x)))
#define False (abs E (type) (lam x E (lam y E y)))
#define Unit  (all E (type) (fun E E))
#define One   (abs E (type) (lam u E u))

(program 1.0.0

[
{  
  (abs T (type)  -- Y combinator
   (lam f (fun T T)
    [
      (lam p (fix A (fun A T))
        [f [(unwrap p) p]])
      (wrap Q (fun Q T) 
        (lam q (fix A (fun A T))
          [f [(unwrap q) q]])
      )
    ]
   ))
   Int}

  (lam loop (fun Int Int) 
    (lam n Int
    [ { 
        [{(con lessThanEqualsInteger) (con SIZE)} n (con SIZE ! 1)] -- if n<=1
        Int
      }
	  (con SIZE ! 1) -- then 1
          [loop [{(con subtractInteger) (con SIZE)} 
                 n 
                 (con SIZE ! 1)
               ]
          ]
	  -- else loop (n-1)
    ]
    ))
(con SIZE ! ARG)
]
)


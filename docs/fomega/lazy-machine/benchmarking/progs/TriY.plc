-- Preprocess this file with 'gpp -DARG=200000 -DSIZE=8' to calculate tri(200000), for example.
-- SIZE is the size of integers to use.

#ifndef ARG
#define ARG 100
#endif

#ifndef SIZE
#define SIZE 4
#endif

#define Int [(con integer) (con SIZE)]
#define Bool (all E (type) (fun E (fun E E)))
#define True  (abs E (type) (lam x E (lam y E x)))
#define False (abs E (type) (lam x E (lam y E y)))
#define Unit  (all E (type) (fun E E))
#define One   (abs E (type) (lam x E x))

(program 1.0.0

[
{
  (abs T (type)  -- Y combinator
   (lam f (fun T T)
    [
      (lam p (fix A (fun A T))
        [f [(unwrap p) p]])
      (wrap Q (fun Q T) 
        (lam q (fix A (fun A T))
          [f [(unwrap q) q]])
      )
    ]
   ))
   Int}
  (lam tri (fun Int Int) 
    (lam n Int
    [ { 
        [{(con lessThanEqualsInteger) (con SIZE)} n (con SIZE ! 1)] -- if n<=1
        Int
      }
	  (con SIZE ! 1) -- then 1
            [{(con addInteger) (con SIZE)} 
              n 
              [tri [{(con subtractInteger) (con SIZE)} 
                     n 
                     (con SIZE ! 1)
                   ]
              ]
           ]  -- else n + tri (n-1)  
    ]
    ))
(con SIZE ! ARG)
]
)


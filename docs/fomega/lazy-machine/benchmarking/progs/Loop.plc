-- Preprocess this file with 'gpp -DARG=200000 -DSIZE=4' to get a program to which loops 200000 times, for example.
-- SIZE is the size of integers to use.

#ifndef ARG
#define ARG 100
#endif

#ifndef SIZE
#define SIZE 4
#endif

#define Int [(con integer) (con SIZE)]
#define Bool (all E (type) (fun E (fun E E)))
#define True  (abs E (type) (lam x E (lam y E x)))
#define False (abs E (type) (lam x E (lam y E y)))
#define Unit  (all E (type) (fun E E))
#define One   (abs E (type) (lam x E x))

(program 1.0.0

 [{ { (abs T (type)  -- Z combinator
  (abs U (type)
   (lam f (fun (fun T U) (fun T U))
   [
      (lam p (fix A (fun A (fun T U)))
        [f (lam y T [(unwrap p) p y])])
      (wrap Q (fun Q (fun T U)) 
        (lam p (fix A (fun A (fun T U)))
          [f (lam y T [(unwrap p) p y])])
      )
   ]
  )
  )
   ) Int }
 Int }

  (lam loop (fun Int Int ) 
    (lam n Int
    [ { 
        [{(con lessThanEqualsInteger) (con SIZE)} n (con SIZE ! 1)] -- if n==1
        Int
      }
	  (lam u Unit (con SIZE ! 1)) -- then 1
	  (lam u Unit
              [loop [{(con subtractInteger) (con SIZE)} 
                     n 
                     (con SIZE ! 1)
                   ] One 
              ]
           
	  )  -- else loop (n-1)
    ]
    )) 
(con SIZE ! ARG) One
]
)


(program
  (let
    (nonrec)
    (datatypebind
      (datatype
        (tyvardecl Bool (type))
        
        Bool_match
        (vardecl True Bool) (vardecl False Bool)
      )
    )
    (let
      (nonrec)
      (termbind
        (vardecl
          equalsInteger
          (fun [(con integer) (con 8)] (fun [(con integer) (con 8)] Bool))
        )
        (lam
          arg
          [(con integer) (con 8)]
          (lam
            arg
            [(con integer) (con 8)]
            [
              (lam
                b (all a (type) (fun a (fun a a))) [ [ { b Bool } True ] False ]
              )
              [ [ { (builtin equalsInteger) (con 8) } arg ] arg ]
            ]
          )
        )
      )
      (lam
        ds
        [(con integer) (con 8)]
        (lam
          ds
          [(con integer) (con 8)]
          [ (lam z [(con integer) (con 8)] [ [ equalsInteger ds ] z ]) ds ]
        )
      )
    )
  )
)
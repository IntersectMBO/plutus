(program
  (let
    (nonrec)
    (datatypebind
      (datatype
        (tyvardecl Bool (type))
        
        Bool_match
        (vardecl True Bool) (vardecl False Bool)
      )
    )
    (let
      (nonrec)
      (termbind
        (vardecl equalsInteger (fun (con integer) (fun (con integer) Bool)))
        (lam
          arg
          (con integer)
          (lam
            arg
            (con integer)
            [
              (lam
                b (all a (type) (fun a (fun a a))) [ [ { b Bool } True ] False ]
              )
              [ [ (builtin equalsInteger) arg ] arg ]
            ]
          )
        )
      )
      (let
        (nonrec)
        (datatypebind
          (datatype (tyvardecl Unit (type))  Unit_match (vardecl Unit Unit))
        )
        (let
          (nonrec)
          (termbind
            (vardecl
              subtractInteger
              (fun (con integer) (fun (con integer) (con integer)))
            )
            (builtin subtractInteger)
          )
          (let
            (rec)
            (termbind
              (vardecl even (fun (con integer) Bool))
              (lam
                n
                (con integer)
                [
                  [
                    [
                      {
                        [ Bool_match [ [ equalsInteger n ] (con 0) ] ]
                        (fun Unit Bool)
                      }
                      (lam thunk Unit True)
                    ]
                    (lam
                      thunk
                      Unit
                      (let
                        (nonrec)
                        (termbind
                          (vardecl n (fun Unit (con integer)))
                          (lam thunk Unit [ [ subtractInteger n ] (con 1) ])
                        )
                        [
                          [
                            [
                              {
                                [
                                  Bool_match
                                  [ [ equalsInteger [ n Unit ] ] (con 0) ]
                                ]
                                (fun Unit Bool)
                              }
                              (lam thunk Unit False)
                            ]
                            (lam
                              thunk
                              Unit
                              [
                                even [ [ subtractInteger [ n Unit ] ] (con 1) ]
                              ]
                            )
                          ]
                          Unit
                        ]
                      )
                    )
                  ]
                  Unit
                ]
              )
            )
            even
          )
        )
      )
    )
  )
)
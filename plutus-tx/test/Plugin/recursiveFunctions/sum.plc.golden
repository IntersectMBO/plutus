(program
  (let
    (rec
    )
    (datatypebind
      (datatype
        (tyvardecl List (fun (type) (type)))
        (tyvardecl a (type))
        Nil_match
        (vardecl Nil [List a]) (vardecl Cons (fun a (fun [List a] [List a])))
      )
    )
    (let
      (nonrec
      )
      (termbind
        (vardecl
          addInteger
          (fun [(con integer) (con 8)] (fun [(con integer) (con 8)] [(con integer) (con 8)]))
        )
        { (builtin addInteger) (con 8) }
      )
      (let
        (rec)
        (termbind
          (vardecl
            sum (fun [List [(con integer) (con 8)]] [(con integer) (con 8)])
          )
          (lam
            ds
            [List [(con integer) (con 8)]]
            [
              [
                {
                  [ { Nil_match [(con integer) (con 8)] } ds ]
                  [(con integer) (con 8)]
                }
                (con 8 ! 0)
              ]
              (lam
                x
                [(con integer) (con 8)]
                (lam
                  xs
                  [List [(con integer) (con 8)]]
                  [ [ addInteger x ] [ sum xs ] ]
                )
              )
            ]
          )
        )
        sum
      )
    )
  )
)
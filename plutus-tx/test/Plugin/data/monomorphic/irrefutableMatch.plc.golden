(program
  (let
    (nonrec
    )
    (datatypebind
      (datatype (tyvardecl Unit (type))  Unit_match (vardecl Unit Unit))
    )
    (let
      (nonrec
      )
      (datatypebind
        (datatype
          (tyvardecl
            MyMonoData (type)
          )
          
          MyMonoData_match
          (vardecl
            Mono1
            (fun [(con integer) (con 8)] (fun [(con integer) (con 8)] MyMonoData))
          )
          (vardecl Mono2 (fun [(con integer) (con 8)] MyMonoData))
          (vardecl Mono3 (fun [(con integer) (con 8)] MyMonoData))
        )
      )
      (lam
        ds
        MyMonoData
        [
          [
            [
              [
                { [ MyMonoData_match ds ] (fun Unit [(con integer) (con 8)]) }
                (lam
                  default_arg0
                  [(con integer) (con 8)]
                  (lam
                    default_arg1
                    [(con integer) (con 8)]
                    (lam
                      thunk
                      Unit
                      [
                        {
                          (abs e (type) (lam thunk Unit (error e)))
                          [(con integer) (con 8)]
                        }
                        Unit
                      ]
                    )
                  )
                )
              ]
              (lam a [(con integer) (con 8)] (lam thunk Unit a))
            ]
            (lam
              default_arg0
              [(con integer) (con 8)]
              (lam
                thunk
                Unit
                [
                  {
                    (abs e (type) (lam thunk Unit (error e)))
                    [(con integer) (con 8)]
                  }
                  Unit
                ]
              )
            )
          ]
          Unit
        ]
      )
    )
  )
)
{
    "$schema": "https://json-schema.org/draft/2019-09/schema",
    "type": "object",
    "propertyNames": {
        "$comment": "The param id is supposed to be a non-negative integer,"
        , "$comment": "but json only allow strings key names (not integers)."
        , "$comment": "We enforce with a regex (^(0|[1-9][0-9]*)$) the param id to the non-negative decimal numbers"
        , "$comment": "The regex also disallows leading zeroes, to avoid silent duplicates"
        , "pattern": "^(0|[1-9][0-9]*)$"
    },
    "additionalProperties": {
        "type": "object",
        "properties": {
            "$comment": { "type": "string" },
            "predicates": { "type": "object"
                            , "properties": {
                                "minValue": { "type": "integer" },
                                "maxValue": { "type": "integer" }
                            }
                            , "additionalProperties": false
                            , "$comment": "This disallows disambiguating between parameters with empty predicates and completely missing parameters."
                            , "$comment": "Unknown Parameters and Parameters with no restrictions are treated the same by excluding them from the configuration."
                            , "minProperties": 1
                          },
        },
        "required": ["predicates"],
        "additionalProperties": false
    },
    "examples": [
             {
                 "9000": {
                     "predicates": { "minValue": 0 }
                     , "$comment": "This restricts the parameter 9000 to be at least 0"
                 },
                 "9001": {
                     "predicates": { "minValue": 0, "maxValue": 0 }
                     , "$comment": "The 9001 should be least 0 and at most 0 ==> can only be 0"
                     , "$comment": "A hard/frozen restriction on the parameter, because it cannot change as long as constitution remains the same"
                 },
                 "9002": {
                     "predicates": { "minValue": 1, "maxValue": 0 }
                     , "$comment": "The 9002 should be least 1 and at most 0. UNSATISFIABLE"
                     , "$comment": "A non-sense parameter restriction. A proposal trying to touch this parameter will always fail"
                     , "$comment": "Currently, we don't have a guard against configuring a constitution with such non-sense restrictions"
                 },
                 "9003": {
                     "predicates": { minValue: 1 , minValue: -1 }
                     , "$comment": "VERY IMPORTANT: json schema (and JSON) allows duplicate object entries:"
                     , "$comment": "e.g. duplicate parameter entries or duplicate predicates."
                     , "$comment": "Only one of the duplicates will be *silently* loaded and we don't guarantee the order"
                     , "$comment": "SO DO NOT ALLOW DUPLICATES in the configuration"
                 },
                 "9004": {
                     "predicates": {  }
                     , "$comment": "VERY IMPORTANT: do not rely on the order of parsing/checking the parameters & their restrictions"
                     , "$comment": "We do not provide any guarantee on the parsing/checking order of the parameters,"
                     , "$comment": "as well as the order of the restrictions inside a single parameter."
                     , "$comment": "The constitution script should only guarantee that all restrictions that are applicable, have been applied."
                     , "$comment": "The constitution script's logic should not depend on the order of applying these restrictions."
                 }
         }
    ]
}

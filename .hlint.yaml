---
- functions:
  - {name: unsafePerformIO, within: [PlutusPrelude, Language.PlutusCore.Generators.Internal.Entity]}
  - {name: error, within: [Main, Language.PlutusCore.StdLib.Meta, Evaluation.Constant.Success, Language.PlutusCore.Constant.Apply, Language.PlutusCore.Constant.Typed, Language.PlutusCore.Evaluation.CkMachine, Language.PlutusCore.TypeSynthesis, Language.PlutusCore.Generators.Internal.Entity, Language.PlutusCore.Constant.Make, Language.PlutusCore.Generators.Internal.TypedBuiltinGen, Language.PlutusCore.TH, Language.Plutus.CoreToPLC.Error]}
  - {name: undefined, within: [Language.PlutusCore.Constant.Apply]}
  - {name: fromJust, within: []}
  - {name: foldl, within: []}
  - {name: traceShowId, within: []} # for debugging only, should not be merged to master

- error: {lhs: "hylo embed", rhs: "ana", name: "Use anamorphism"}
- error: {lhs: "hylo f project", rhs: "cata f", name: "Use catamorphism"}
- error: {lhs: "concat", rhs: "fold", name: "Generalize concat"}
- error: {lhs: "concatMap", rhs: "foldMap", name: "Generalize concatMap"}
- error: {lhs: "f >> pure ()", rhs: "void f", name: "Use void"}
- error: {lhs: "over _1 f x", rhs: "first f x", name: "Use arrows"}
- error: {lhs: "over _2 f x", rhs: "second f x", name: "Use arrows"}
- error: {lhs: "bool x x p", rhs: "x", name: "Redundant bool"}
- error: {lhs: "maybe mempty", rhs: "foldMap", name: "Use foldMap"}
- error: {lhs: "mconcat", rhs: "fold", name: "Generalize mconcat"}

- ignore: {name: Reduce duplication, within: [Language.PlutusCore.Renamer, Language.PlutusCore.Constant.Prelude, Language.PlutusCore.StdLib.Data.Bool, Language.PlutusCore.StdLib.Data.ChurchNat, Language.PlutusCore.StdLib.Data.Function, Language.PlutusCore.StdLib.Data.List, Language.PlutusCore.StdLib.Data.Nat, Language.PlutusCore.Pretty.Readable, Language.Plutus.CoreToPLC, Evaluation.CkMachine, Spec.Crowdfunding, Spec.Vesting]}
- ignore: {name: Redundant $, within: [Evaluation.Constant.Success, Language.PlutusCore.Generators.Internal.TypedBuiltinGen]}
- ignore: {name: Eta reduce, within: [Language.PlutusCore.Pretty.Classic, Language.PlutusCore.Pretty.Readable]}
# this is rarely an improvement, also ignored in cardano
- ignore: {name: Move brackets to avoid $}
# this aids clarity since you can name the parameters
- ignore: {name: Avoid lambda}
# whether this is better is very variable
- ignore: {name: Use infix}
# hlint can't handle typed TH: https://github.com/haskell-suite/haskell-src-exts/issues/383
# annoyingly, 'within' doesn't seem to work if there's a parse error, so we have to blanket
# ignore it
- ignore: {name: Parse error}
- ignore: {name: Eta reduce, within: [Language.PlutusCore.MkPlc]}
# PLC plugin only accepts lists that are constructed in a certain way
- ignore: {name: Use list literal, within: [Spec.TH]}
# PLC plugin requires && to be defined in side TH splices
- ignore: {name: Redundant if, within: [Language.Plutus.Coordination.Contracts.CrowdFunding, Language.Plutus.Coordination.Contracts.Vesting]}

- fixity: infixr 8 .*
- fixity: infixr 3 ***
- fixity: infixr 3 &&&
- fixity: infixr 1 <=<

-- Copyright 2023 Lennart Augustsson
-- See LICENSE file for full license.
module Mhs.Builtin(
  module Control.Monad,
  module Data.Bool,
  module Data.Char,
  module Data.Coerce,
  module Data.Enum,
  module Data.Eq,
  module Data.Fractional,
  module Data.Function,
  module Data.Ord,
  module Data.Num,
  module Data.Records,
  module Data.Typeable,
  module Data.Semigroup,
  module Data.String,
  module Text.Show,
  ) where
--
-- These are the identifiers that can be generated by the compiler,
-- so the always have to be in scope.
-- In the compiler this module is treated specially, it is imported
-- qualified with the name B@, this ways these names are always available
-- qualified, but under a name that cannot be used accidentally.
-- If the Prelude is not imported, then neither is this module.
import qualified Prelude()
import Control.Error(error)
import Control.Monad(Monad(..))
import Control.Monad.Fail(MonadFail(..))
import Data.Bool((&&), Bool(..))
import Data.Char(Char)
import Data.Coerce(Coercible, coerce)
import Data.Enum(Enum(enumFrom, enumFromThen, enumFromTo, enumFromThenTo))
import Data.Eq(Eq(..))
import Data.Fractional(Fractional(fromRational))
import Data.Function((.))
import Data.Ord(Ord(..), Ordering(..))
import Data.Num(Num(fromInteger, negate))
import Data.Proxy(Proxy(..))
import Data.Semigroup(Semigroup(..))
import Data.String(IsString(..))
import Data.Records(HasField(..), SetField(..), composeSet)
import {-# SOURCE #-} Data.Typeable(Typeable(..), mkTyConApp, mkTyCon)
import Text.Show(Show(..), showString, showParen)

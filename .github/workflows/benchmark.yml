
name: Benchmark
on:
  issue_comment:
    types: [created]

jobs:
  benchmark:
    runs-on: [self-hosted, plutus-benchmark]
    
    permissions:
      pull-requests: write
  
    if: | 
      startsWith(github.event.comment.body, '/benchmark') && 
      github.event.issue.pull_request 

    steps:
      - name: Checkout
        uses: actions/checkout@v3.3.0

      - name: React with Rocket 
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.reactions.createForIssueComment({
              owner: context.issue.owner,
              repo: context.issue.repo,
              comment_id: context.payload.comment.id,
              content: "rocket"
            });  

      - name: Extract Benchmark Name
        id: extract-benchmark
        uses: actions/github-script@v6
        with:
          script: |
            const regex = '^\/benchmark\s*(.*?)\s*$';
            const comment = context.payload.comment.body;
            const match = comment.match(regex)
            if (match !== null && match.length == 2)
              core.setOutput('benchmark', match[1]);
            else
              core.setFailed(`Unable to extract benchmark name from {comment}`);

      - name: Extract Comment Branch 
        id: extract-branch
        uses: actions/github-script@v6
        with:
          script: | 
            async function isPullRequest() {
              const result = await github.rest.issues.get({
                owner: context.issue.owner,
                repo: context.issue.repo,
                issue_number: context.issue.number
              });
              return !!result.data.pull_request;
            }

            async function getCommentHeadRef() {
              const query = `
                query pullRequestDetails($repo:String!, $owner:String!, $number:Int!) {
                  repository(name: $repo, owner: $owner) {
                    pullRequest(number: $number) {
                      headRef {
                        name
                      }
                    }
                  }
                }`;

              const result = await github.graphql(query, {
                owner: context.issue.owner,
                repo: context.issue.repo,
                number: context.issue.number
              });

              return result.repository.pullRequest.headRef.name;
            }

            try {
              if (!await isPullRequest()) {
                core.setFailed("Comment is not on a pull request");
              } else {  
                core.setOutput("head_ref", await getCommentHeadRef());
              }
            } catch (error) {
              core.setFailed(`Error: ${error}`);
            } 

      - name: Publish Link To Action Run
        uses: actions/github-script@v6
        with:
          script: | 
            // https://github.com/community/community/discussions/8945
            async function getJobId() {
              const result = await github.rest.actions.listJobsForWorkflowRun({
                owner: context.issue.owner,
                repo: context.issue.repo,
                run_id: context.runId
              });
              // NOTE: context.job is the job "name" in the .yml file
              const job = result.data.jobs.find(job => job.name === context.job);
              if (job === null) {
                core.error(`Could not find job '${context.job}' in ${result.jobs}`);
                core.setFailed("Could not find required job");
              } else {
                return job.id;
              }
            }
            
            async function getJobUrl() {
              const part1 = `https://github.com/${context.issue.owner}/${context.issue.repo}`;
              const part2 = `actions/runs/${context.runId}/jobs/${await getJobId()}`;
              return `${part1}/${part2}`;
            }

            await github.rest.issues.createComment({
              owner: context.issue.owner,
              repo: context.issue.repo,
              issue_number: context.issue.number,
              body: `Click [here](${await getJobUrl()}) to check the status of your benchmark.`
            });

      - name: Run
        run: |
          nix develop --no-warn-dirty --accept-flake-config --command bash ./scripts/ci-plutus-benchmark.sh 
        env:
          BENCHMARK_NAME: ${{ steps.extract-benchmark.outputs.benchmark }}
          PR_NUMBER: ${{ github.event.issue.number }}
          PR_BRANCH: ${{ steps.extract-branch.outputs.head_ref }}


      - name: Publish Results
        uses: actions/github-script@v6
        with:
          script: | 
            const fs = require("fs");

            await github.rest.issues.createComment({
              owner: context.issue.owner,
              repo: context.issue.repo,
              issue_number: context.issue.number,
              // bench-compare.json is generated by ci-plutus-benchmark.sh
              body: fs.readFileSync("bench-compare.json", "utf-8").toString()  
            });
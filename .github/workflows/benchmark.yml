name: Benchmark
on:
  issue_comment:
    types: [created]

jobs:
  pre_job: 
    runs-on: ubuntu-latest

    if: | 
      startsWith(github.event.comment.body, '/benchmark') && 
      github.event.issue.pull_request 

    permissions:
      pull-requests: write

    outputs:
      benchmark_name: ${{ steps.extract-benchmark.outputs.benchmark }}
      pr_number: ${{ github.event.issue.number }}
      pr_branch: ${{ steps.extract-branch.outputs.head_ref }}

    steps: 
      - name: React with Rocket 
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.reactions.createForIssueComment({
              owner: context.issue.owner,
              repo: context.issue.repo,
              comment_id: context.payload.comment.id,
              content: "rocket"
            });  

      - name: Extract Benchmark Name
        id: extract-benchmark
        uses: actions/github-script@v6
        with:
          script: |
            const regex = '^\/benchmark\s*(.*?)\s*$';
            const comment = context.payload.comment.body;
            const match = comment.match(regex)
            if (match !== null && match.length == 2)
              core.setOutput('benchmark', match[1]);
            else
              core.setFailed(`Unable to extract benchmark name from ${comment}`);

      - name: Extract Comment Branch 
        id: extract-branch
        uses: actions/github-script@v6
        with:
          script: | 
            async function isPullRequest() {
              const result = await github.rest.issues.get({
                owner: context.issue.owner,
                repo: context.issue.repo,
                issue_number: context.issue.number
              });
              return !!result.data.pull_request;
            }

            async function getCommentHeadRef() {
              const query = `
                query pullRequestDetails($repo:String!, $owner:String!, $number:Int!) {
                  repository(name: $repo, owner: $owner) {
                    pullRequest(number: $number) {
                      headRef {
                        name
                      }
                    }
                  }
                }`;

              const result = await github.graphql(query, {
                owner: context.issue.owner,
                repo: context.issue.repo,
                number: context.issue.number
              });

              return result.repository.pullRequest.headRef.name;
            }

            try {
              if (!await isPullRequest()) {
                core.setFailed("Comment is not on a pull request");
              } else {  
                core.setOutput("head_ref", await getCommentHeadRef());
              }
            } catch (error) {
              core.setFailed(`Error: ${error}`);
            } 

      - name: Publish Link To Action Run
        uses: actions/github-script@v6
        with:
          script: | 
            async function getJobUrl() {
              return `https://github.com/${context.issue.owner}/${context.issue.repo}/actions/runs/${context.runId}`;
            }

            await github.rest.issues.createComment({
              owner: context.issue.owner,
              repo: context.issue.repo,
              issue_number: context.issue.number,
              body: `Click [here](${await getJobUrl()}) to check the status of your benchmark.`
            });
    
  benchmark:
    runs-on: [self-hosted, plutus-benchmark]
    needs: pre_job
    
    steps:
      - name: Checkout
        uses: actions/checkout@v3.3.0

      - name: Run
        run: |
          nix develop --no-warn-dirty --accept-flake-config --command bash ./scripts/ci-plutus-benchmark.sh 
        env:
          BENCHMARK_NAME: ${{ needs.pre_job.outputs.benchmark_name }}
          PR_NUMBER: ${{ needs.pre_job.outputs.pr_number }}
          PR_BRANCH: ${{ needs.pre_job.outputs.pr_branch }}

      - name: Publish benchmark logs
        uses: actions/upload-artifact@v3
        with:
          name: benchmark-logs
          path: *.log

  post_job: 
    runs-on: ubuntu-latest
    needs: benchmark

    permissions:
      pull-requests: write

    steps:
      - name: Download benchmark logs
        uses: actions/download-artifact@v3
        with:
          name: benchmark-logs

      - name: Publish Results
        uses: actions/github-script@v6
        with:
          script: | 
            const fs = require("fs");

            await github.rest.issues.createComment({
              owner: context.issue.owner,
              repo: context.issue.repo,
              issue_number: context.issue.number,
              // bench-compare-result.log is generated by ci-plutus-benchmark.sh
              body: fs.readFileSync("bench-compare-result.log", "utf-8").toString()
            });

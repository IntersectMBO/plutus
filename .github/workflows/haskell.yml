name: Haskell CI

on:
  push:
  workflow_dispatch:
    inputs:
      tests:
        description: 'Tests'
        required: false
        default: 'some'
        options:
        - some
        - all
  create:

jobs:
  build:
    runs-on: ${{ matrix.os }}

    defaults:
      run:
        shell: bash

    strategy:
      fail-fast: false
      matrix:
        ghc: ["8.10.7", "9.2.4"]
        os: [ubuntu-latest]

    env:
      # current ref from: 27.02.2022
      SECP256K1_REF: ac83be33d0956faf6b7f61a60ab524ef7d6a473a
      # OpenSSL is installed in a non-standard location in MacOS. See
      # https://github.com/actions/virtual-environments/blob/main/images/macos/macos-11-Readme.md
      PKG_CONFIG_PATH: ${{ matrix.os == 'macos-latest' && '/usr/local/opt/openssl@1.1/lib/pkgconfig' || '' }}

    steps:

    - name: "LINUX,MAC: Setup haskell"
      if: runner.os != 'Windows'
      uses: haskell/actions/setup@v1
      id: setup-haskell
      with:
        ghc-version: ${{ matrix.ghc }}
        cabal-version: 3.6.2.0

    - name: Set cache version
      run: echo "CACHE_VERSION=grFfw8r" >> $GITHUB_ENV

    - uses: actions/checkout@v2

    - name: Add build script path
      run: |
        # MacOS and Linux use $GITUB_PATH
        echo "$(pwd)/.github/bin" >> $GITHUB_PATH

    - name: "LINUX: Install build environment (apt-get)"
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get -y install libsodium23 libsodium-dev
        sudo apt-get -y install libsystemd0 libsystemd-dev
        sudo apt-get -y remove --purge software-properties-common
        sudo apt-get -y autoremove

    - name: "LINUX: Install build environment (for secp256k1)"
      if: runner.os == 'Linux'
      run: |
        sudo apt-get -y install autoconf automake libtool
        echo "CI_SECP_FLAGS=--prefix=/usr" >> $GITHUB_ENV
        echo "CI_SECP_INSTALL_CMD=sudo" >> $GITHUB_ENV

    - name: "MAC: Install build environment (brew)"
      if: runner.os == 'macOS'
      run: |
        brew install libsodium

    - name: "MAC: Install build environment (for secp256k1)"
      if: runner.os == 'macOS'
      run: brew install autoconf automake libtool

    - name: "Install secp256k1"
      run: |
        git clone https://github.com/bitcoin-core/secp256k1.git
        ( cd secp256k1
          git reset --hard $SECP256K1_REF
          ./autogen.sh
          ./configure $CI_SECP_FLAGS --enable-module-schnorrsig --enable-experimental
          make
          make check
          $CI_SECP_INSTALL_CMD make install
        )

    - name: "List all pkg-config packages"
      run: |
        echo "=== Package list ==="
        pkg-config --list-all

        if [ "${{ runner.os }}" == "macOS" ]; then
          echo "=== Not printing every package detail in MacOS"
          # due to the location of the installed libraries this fails on MacOS with stuff not related to us
        else
          echo "=== Package details ==="
          for x in $(pkg-config --list-all | cut -d ' ' -f 1); do
            echo "# $x"
            pkg-config "$x" --cflags --libs
          done
        fi

    - name: Cabal update
      run: cabal update

    - name: Configure build
      run: |
        if [ "${{github.event.inputs.tests}}" == "all" ]; then
          echo "Reconfigure cabal projects to run tests for all dependencies"
          sed -i 's|tests: False|tests: True|g' cabal.project
        fi

        cp .github/workflows/cabal.project.local.ci cabal.project.local

        echo "# cabal.project.local"
        cat cabal.project.local

    - name: Record dependencies
      id: record-deps
      run: |
        cabal build all --dry-run
        cat ${{ env.PLAN_JSON }} | jq -r '."install-plan"[].id' | sort | uniq > dependencies.txt
        date > date.txt
        echo "::set-output name=weeknum::$(/bin/date -u "+%W")"

    - name: Cache Cabal store
      uses: actions/cache@v2
      with:
        path: ${{ steps.setup-haskell.outputs.cabal-store }}
        key: cache-${{ env.CACHE_VERSION }}-${{ runner.os }}-${{ matrix.ghc }}-${{ hashFiles('dependencies.txt') }}-${{ hashFiles('date.txt') }}
        restore-keys: |
          cache-${{ env.CACHE_VERSION }}-${{ runner.os }}-${{ matrix.ghc }}-${{ hashFiles('dependencies.txt') }}
          cache-${{ env.CACHE_VERSION }}-${{ runner.os }}-${{ matrix.ghc }}

    - uses: actions/cache@v2
      name: "Cache `dist-newstyle`"
      with:
        path: |
          dist-newstyle
          !dist-newstyle/**/.git
        key: cache-dist-${{ env.CACHE_VERSION }}-${{ runner.os }}-${{ matrix.ghc }}-${{ steps.record-deps.outputs.weeknum }}
        restore-keys: cache-dist-${{ env.CACHE_VERSION }}-${{ runner.os }}-${{ matrix.ghc }}

    - name: Build
      run: cabal build plutus-ledger-api plutus-tx plutus-core prettyprinter-configurable word-array --disable-benchmarks

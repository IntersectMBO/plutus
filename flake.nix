# NOTE: This flake is only provided as interface to `bitte` and shouldn't be used otherwise
#
# - Until https://github.com/input-output-hk/haskell.nix/issues/1132 is resolved the 
#   outputs generated by this flake will differ from the respective outputs built via
#   default.nix because the hackage/stackage.nix revisions differ.
# - The revisions the nixpkgs and haskell-nix flake inputs have to be kept in sync with
#   the niv versions manually. When haskell.nix is updated in niv things will break.
# - Occasionally building flake builds will segfault. The workaround for this is to
#   disable the garbage collector  `GC_DONT_GC=1  nix build .#web-ghc-server
#
# In case you are not sure if you should be using this flake, the answer is: No.
{
  description = "plutus flake for bitte deployments";

  inputs = {
    nixpkgs.url = "github:NixOS/nixpkgs?rev=7d71001b796340b219d1bfa8552c81995017544a";
    haskell-nix.url = "github:input-output-hk/haskell.nix?rev=87084d65a476cc826a0e8c5d281d494254f5bc7a";
    flake-utils.url = "github:numtide/flake-utils?rev=b543720b25df6ffdfcf9227afafc5b8c1fabfae8";
  };

  outputs = { self, nixpkgs, haskell-nix, flake-utils, ... }:
    (flake-utils.lib.eachSystem [ "x86_64-linux" ] (system:
      let
        topLevel = import ./. {
          inherit system;
          isInFlake = true;
          haskellNix = haskell-nix;
        };

        inherit (topLevel) pkgs plutus;
      in
      rec {
        packages = rec {
          marlowe-playground-client = topLevel.marlowe-playground.client;
          marlowe-playground-server = topLevel.marlowe-playground.server;
          plutus-playground-client = topLevel.plutus-playground.client;
          plutus-playground-server = topLevel.plutus-playground.server;
          marlowe-website = topLevel.marlowe-web;
          web-ghc-server = plutus.haskell.project.hsPkgs.web-ghc.components.exes.web-ghc-server;
        };
      }));
}

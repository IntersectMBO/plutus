letrec
  data (List :: * -> *) a | Nil_match where
    Nil : List a
    Cons : a -> List a -> List a
in
let
  data Bool | Bool_match where
    True : Bool
    False : Bool
in
letrec
  !go : List Bool -> Bool
    = \(ds : List Bool) ->
        Nil_match
          {Bool}
          ds
          {all dead. Bool}
          (/\dead -> False)
          (\(x : Bool)
            (xs : List Bool) ->
             /\dead ->
               let
                 !r : Bool = go xs
               in
               Bool_match
                 x
                 {all dead. Bool}
                 (/\dead -> True)
                 (/\dead -> r)
                 {all dead. dead})
          {all dead. dead}
in
let
  !eta : List Bool
    = (let
          a = List Bool
        in
        \(c : Bool -> a -> a)
         (n : a) ->
          c
            True
            (c
               False
               (c
                  False
                  (c
                     False
                     (c
                        False
                        (c False (c False (c False (c False (c False n))))))))))
        (\(ds : Bool) (ds : List Bool) -> Cons {Bool} ds ds)
        (Nil {Bool})
in
go eta
let
  data Bool | Bool_match where
    True : Bool
    False : Bool
in
letrec
  data (List :: * -> *) a | List_match where
    Nil : List a
    Cons : a -> List a -> List a
in
letrec
  !or : List Bool -> Bool
    = \(ds : List Bool) ->
        List_match
          {Bool}
          ds
          {all dead. Bool}
          (/\dead -> False)
          (\(x : Bool) (xs : List Bool) ->
             /\dead ->
               Bool_match
                 x
                 {all dead. Bool}
                 (/\dead -> True)
                 (/\dead -> or xs)
                 {all dead. dead})
          {all dead. dead}
in
or
  ((let
       a = List Bool
     in
     \(c : Bool -> a -> a) (n : a) ->
       c
         False
         (c
            False
            (c
               False
               (c
                  False
                  (c
                     False
                     (c False (c False (c False (c False (c False n))))))))))
     (\(ds : Bool) (ds : List Bool) -> Cons {Bool} ds ds)
     (Nil {Bool}))
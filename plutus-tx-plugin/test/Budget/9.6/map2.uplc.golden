(program
   1.1.0
   ((\caseList' ->
       (\go ->
          (\go ->
             (\goList
               n ->
                (\unsafeFromSOPList ->
                   (\nt ->
                      (\go ->
                         (\nt ->
                            (\nt ->
                               force go nt)
                              ((\rs' ->
                                  (\ls' -> go rs' ls') (force go nt))
                                 (force
                                    ((\s ->
                                        s s)
                                       (\s
                                         arg ->
                                          delay
                                            (caseList'
                                               []
                                               (\hd
                                                 tl ->
                                                  (\tl' ->
                                                     case
                                                       ((\k ->
                                                           force
                                                             ((\s ->
                                                                 s s)
                                                                (\s
                                                                  arg ->
                                                                   delay
                                                                     (caseList'
                                                                        (constr 1
                                                                           [])
                                                                        (\hd ->
                                                                           force
                                                                             (force
                                                                                ifThenElse
                                                                                (equalsData
                                                                                   k
                                                                                   (force
                                                                                      (force
                                                                                         fstPair)
                                                                                      hd))
                                                                                (delay
                                                                                   (\ds ->
                                                                                      constr 0
                                                                                        [  ]))
                                                                                (delay
                                                                                   (force
                                                                                      (s
                                                                                         s
                                                                                         (delay
                                                                                            (\x ->
                                                                                               x)))))))))
                                                                (delay
                                                                   (\x -> x)))
                                                             nt)
                                                          (force (force fstPair)
                                                             hd))
                                                       [ tl'
                                                       , (force mkCons
                                                            hd
                                                            tl') ])
                                                    (force
                                                       (s s (delay (\x -> x)))
                                                       tl))))
                                       (delay (\x -> x)))
                                    nt)))
                           (unsafeFromSOPList
                              (\i -> iData i)
                              (\i -> iData i)
                              (constr 1
                                 [ (constr 0 [(addInteger 1 n), 1])
                                 , (constr 1
                                      [ (constr 0 [(addInteger 2 n), 2])
                                      , (constr 1
                                           [ (constr 0 [(addInteger 3 n), 3])
                                           , (constr 1
                                                [ (constr 0
                                                     [(addInteger 4 n), 4])
                                                , (constr 1
                                                     [ (constr 0
                                                          [(addInteger 5 n), 5])
                                                     , (constr 0
                                                          []) ]) ]) ]) ]) ])))
                        ((\s ->
                            s s)
                           (\s
                             arg ->
                              delay
                                (caseList'
                                   []
                                   (\hd
                                     tl ->
                                      (\v' ->
                                         (\k' ->
                                            force
                                              (case
                                                 (force
                                                    ((\s ->
                                                        s s)
                                                       (\s
                                                         arg ->
                                                          delay
                                                            (caseList'
                                                               (constr 1 [])
                                                               (\hd ->
                                                                  force
                                                                    (force
                                                                       ifThenElse
                                                                       (equalsData
                                                                          k'
                                                                          (force
                                                                             (force
                                                                                fstPair)
                                                                             hd))
                                                                       (delay
                                                                          (\ds ->
                                                                             constr 0
                                                                               [ (force
                                                                                    (force
                                                                                       sndPair)
                                                                                    hd) ]))
                                                                       (delay
                                                                          (force
                                                                             (s
                                                                                s
                                                                                (delay
                                                                                   (\x ->
                                                                                      x)))))))))
                                                       (delay (\x -> x)))
                                                    nt)
                                                 [ (\r ->
                                                      delay
                                                        (force mkCons
                                                           (mkPairData
                                                              k'
                                                              (iData
                                                                 (addInteger
                                                                    (unIData v')
                                                                    (unIData
                                                                       r))))
                                                           (force
                                                              (s
                                                                 s
                                                                 (delay
                                                                    (\x -> x)))
                                                              tl)))
                                                 , (delay
                                                      (force mkCons
                                                         (mkPairData k' v')
                                                         (force
                                                            (s
                                                               s
                                                               (delay
                                                                  (\x -> x)))
                                                            tl))) ]))
                                           (force (force fstPair) hd))
                                        (force (force sndPair) hd))))
                           (delay (\x -> x))))
                     (unsafeFromSOPList
                        (\i -> iData i)
                        (\i -> iData i)
                        (constr 1
                           [ (constr 0 [(addInteger 3 n), 33])
                           , (constr 1
                                [ (constr 0 [(addInteger 4 n), 44])
                                , (constr 1
                                     [ (constr 0 [(addInteger 6 n), 66])
                                     , (constr 1
                                          [ (constr 0 [(addInteger 7 n), 77])
                                          , (constr 0 []) ]) ]) ]) ])))
                  (\`$dToData` `$dToData` ->
                     (\go eta -> goList (go eta))
                       ((\s -> s s)
                          (\s ds ->
                             force
                               (case
                                  ds
                                  [ (delay (constr 0 []))
                                  , (\x xs ->
                                       delay
                                         (constr 1
                                            [ (case
                                                 x
                                                 [ (\k a ->
                                                      constr 0
                                                        [ (`$dToData` k)
                                                        , (`$dToData` a) ]) ])
                                            , (s s xs) ])) ])))))
               ((\s -> s s)
                  (\s ds ->
                     case
                       ds
                       [ []
                       , (\d ds ->
                            force mkCons
                              (case d [(\d d -> mkPairData d d)])
                              (s s ds)) ])))
            ((\s -> s s)
               (\s acc ->
                  caseList' acc (\hd -> (\x -> s s x) (force mkCons hd acc)))))
         ((\s -> s s)
            (\s arg ->
               delay
                 (caseList'
                    (constr 0 [])
                    (\hd tl ->
                       constr 1
                         [ (constr 0
                              [ (unIData (force (force fstPair) hd))
                              , (unIData (force (force sndPair) hd)) ])
                         , (force (s s (delay (\x -> x))) tl) ])))
            (delay (\x -> x))))
      (\z f xs ->
         force
           (force (force chooseList)
              xs
              (delay z)
              (delay (f (force headList xs) (force tailList xs)))))))
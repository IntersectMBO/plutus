letrec
  data (List :: * -> *) a | List_match where
    Nil : List a
    Cons : a -> List a -> List a
in
letrec
  !go : integer -> List data -> data
    = \(ds : integer) (ds : List data) ->
        List_match
          {data}
          ds
          {all dead. data}
          (/\dead -> error {data})
          (\(x : data) (xs : List data) ->
             /\dead ->
               ifThenElse
                 {all dead. data}
                 (equalsInteger 0 ds)
                 (/\dead -> x)
                 (/\dead -> go (subtractInteger ds 1) xs)
                 {all dead. dead})
          {all dead. dead}
in
let
  data Bool | Bool_match where
    True : Bool
    False : Bool
  data Unit | Unit_match where
    Unit : Unit
in
\(xs : List data) -> go 5 xs
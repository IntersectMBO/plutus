(program
   1.1.0
   ((\fix1 ->
       (\caseList' ->
          (\go ->
             (\go ->
                (\goList
                  n ->
                   (\unsafeFromList ->
                      (\nt ->
                         (\go ->
                            (\nt ->
                               (\nt ->
                                  fix1
                                    (\go ds ->
                                       force
                                         (case
                                            ds
                                            [ (delay (constr 0 []))
                                            , (\x xs ->
                                                 delay
                                                   (constr 1
                                                      [ (case
                                                           x
                                                           [ (\k v ->
                                                                constr 0
                                                                  [ k
                                                                  , (decodeUtf8
                                                                       v) ]) ])
                                                      , (go xs) ])) ]))
                                    (force go nt))
                                 ((\rs' ->
                                     (\ls' -> go rs' ls') (force go nt))
                                    (force
                                       (fix1
                                          (\go
                                            arg ->
                                             delay
                                               (caseList'
                                                  []
                                                  (\hd
                                                    tl ->
                                                     (\tl' ->
                                                        force
                                                          (case
                                                             ((\k ->
                                                                 force
                                                                   (fix1
                                                                      (\go
                                                                        arg ->
                                                                         delay
                                                                           (caseList'
                                                                              (constr 1
                                                                                 [  ])
                                                                              (\hd ->
                                                                                 force
                                                                                   (force
                                                                                      (force
                                                                                         ifThenElse
                                                                                         (equalsData
                                                                                            k
                                                                                            (force
                                                                                               (force
                                                                                                  fstPair)
                                                                                               hd))
                                                                                         (delay
                                                                                            (delay
                                                                                               (\ds ->
                                                                                                  constr 0
                                                                                                    [  ])))
                                                                                         (delay
                                                                                            (delay
                                                                                               (force
                                                                                                  (go
                                                                                                     (delay
                                                                                                        (\x ->
                                                                                                           x)))))))))))
                                                                      (delay
                                                                         (\x ->
                                                                            x)))
                                                                   nt)
                                                                (force
                                                                   (force
                                                                      fstPair)
                                                                   hd))
                                                             [ (delay tl')
                                                             , (delay
                                                                  (force mkCons
                                                                     hd
                                                                     tl')) ]))
                                                       (force
                                                          (go (delay (\x -> x)))
                                                          tl))))
                                          (delay (\x -> x)))
                                       nt)))
                              (unsafeFromList
                                 (\i -> iData i)
                                 bData
                                 (constr 1
                                    [ (constr 0 [(addInteger 1 n), #6f6e65])
                                    , (constr 1
                                         [ (constr 0
                                              [(addInteger 2 n), #74776f])
                                         , (constr 1
                                              [ (constr 0
                                                   [ (addInteger 3 n)
                                                   , #7468726565 ])
                                              , (constr 1
                                                   [ (constr 0
                                                        [ (addInteger 4 n)
                                                        , #666f7572 ])
                                                   , (constr 1
                                                        [ (constr 0
                                                             [ (addInteger 5 n)
                                                             , #66697665 ])
                                                        , (constr 0
                                                             [  ]) ]) ]) ]) ]) ])))
                           (fix1
                              (\go
                                arg ->
                                 delay
                                   (caseList'
                                      []
                                      (\hd
                                        tl ->
                                         (\v' ->
                                            (\k' ->
                                               force
                                                 (case
                                                    (force
                                                       (fix1
                                                          (\go
                                                            arg ->
                                                             delay
                                                               (caseList'
                                                                  (constr 1 [])
                                                                  (\hd ->
                                                                     force
                                                                       (force
                                                                          (force
                                                                             ifThenElse
                                                                             (equalsData
                                                                                k'
                                                                                (force
                                                                                   (force
                                                                                      fstPair)
                                                                                   hd))
                                                                             (delay
                                                                                (delay
                                                                                   (\ds ->
                                                                                      constr 0
                                                                                        [ (force
                                                                                             (force
                                                                                                sndPair)
                                                                                             hd) ])))
                                                                             (delay
                                                                                (delay
                                                                                   (force
                                                                                      (go
                                                                                         (delay
                                                                                            (\x ->
                                                                                               x)))))))))))
                                                          (delay (\x -> x)))
                                                       nt)
                                                    [ (\r ->
                                                         delay
                                                           (force
                                                              mkCons
                                                              (mkPairData
                                                                 k'
                                                                 (bData
                                                                    (appendByteString
                                                                       (unBData
                                                                          v')
                                                                       (unBData
                                                                          r))))
                                                              (force
                                                                 (go
                                                                    (delay
                                                                       (\x ->
                                                                          x)))
                                                                 tl)))
                                                    , (delay
                                                         (force mkCons
                                                            (mkPairData k' v')
                                                            (force
                                                               (go
                                                                  (delay
                                                                     (\x -> x)))
                                                               tl))) ]))
                                              (force (force fstPair) hd))
                                           (force (force sndPair) hd))))
                              (delay (\x -> x))))
                        (unsafeFromList
                           (\i -> iData i)
                           bData
                           (constr 1
                              [ (constr 0 [(addInteger 3 n), #5448524545])
                              , (constr 1
                                   [ (constr 0 [(addInteger 4 n), #464f5552])
                                   , (constr 1
                                        [ (constr 0 [(addInteger 6 n), #534958])
                                        , (constr 1
                                             [ (constr 0
                                                  [ (addInteger 7 n)
                                                  , #534556454e ])
                                             , (constr 0 []) ]) ]) ]) ])))
                     (\`$dToData` `$dToData` ->
                        (\go eta -> goList (go eta))
                          (fix1
                             (\go ds ->
                                force
                                  (case
                                     ds
                                     [ (delay (constr 0 []))
                                     , (\x xs ->
                                          delay
                                            (constr 1
                                               [ (case
                                                    x
                                                    [ (\k a ->
                                                         constr 0
                                                           [ (`$dToData` k)
                                                           , (`$dToData`
                                                                a) ]) ])
                                               , (go xs) ])) ])))))
                  (fix1
                     (\goList ds ->
                        case
                          ds
                          [ []
                          , (\d ds ->
                               force mkCons
                                 (case d [(\d d -> mkPairData d d)])
                                 (goList ds)) ])))
               (fix1
                  (\go acc -> caseList' acc (\hd -> go (force mkCons hd acc)))))
            (fix1
               (\go arg ->
                  delay
                    (caseList'
                       (constr 0 [])
                       (\hd tl ->
                          constr 1
                            [ (constr 0
                                 [ (unIData (force (force fstPair) hd))
                                 , (unBData (force (force sndPair) hd)) ])
                            , (force (go (delay (\x -> x))) tl) ])))
               (delay (\x -> x))))
         (\z f xs ->
            force
              (force (force chooseList)
                 xs
                 (delay z)
                 (delay (f (force headList xs) (force tailList xs))))))
      (\f -> (\s -> s s) (\s -> f (\x -> s s x)))))
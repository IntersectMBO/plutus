let
  !y : integer = 10
  data Bool | Bool_match where
    True : Bool
    False : Bool
in
letrec
  data (List :: * -> *) a | List_match where
    Nil : List a
    Cons : a -> List a -> List a
in
letrec
  !go : List integer -> integer -> List integer
    = \(acc : List integer) (n : integer) ->
        let
          !x : integer = quotientInteger n y
        in
        Bool_match
          (ifThenElse {Bool} (equalsInteger 0 x) True False)
          {all dead. List integer}
          (/\dead -> Cons {integer} (remainderInteger n y) acc)
          (/\dead -> go (Cons {integer} (remainderInteger n y) acc) x)
          {all dead. dead}
in
letrec
  !go :
     List integer -> List string -> List string
    = \(ds : List integer) ->
        List_match
          {integer}
          ds
          {all dead. List string -> List string}
          (/\dead -> \(x : List string) -> x)
          (\(x : integer)
            (xs : List integer) ->
             /\dead ->
               let
                 !acc : List string -> List string = go xs
               in
               \(eta : List string) ->
                 Cons
                   {string}
                   (Bool_match
                      (ifThenElse {Bool} (equalsInteger 0 x) True False)
                      {all dead. string}
                      (/\dead -> "0")
                      (/\dead ->
                         Bool_match
                           (ifThenElse {Bool} (equalsInteger 1 x) True False)
                           {all dead. string}
                           (/\dead -> "1")
                           (/\dead ->
                              Bool_match
                                (ifThenElse
                                   {Bool}
                                   (equalsInteger 2 x)
                                   True
                                   False)
                                {all dead. string}
                                (/\dead -> "2")
                                (/\dead ->
                                   Bool_match
                                     (ifThenElse
                                        {Bool}
                                        (equalsInteger 3 x)
                                        True
                                        False)
                                     {all dead. string}
                                     (/\dead -> "3")
                                     (/\dead ->
                                        Bool_match
                                          (ifThenElse
                                             {Bool}
                                             (equalsInteger 4 x)
                                             True
                                             False)
                                          {all dead. string}
                                          (/\dead -> "4")
                                          (/\dead ->
                                             Bool_match
                                               (ifThenElse
                                                  {Bool}
                                                  (equalsInteger 5 x)
                                                  True
                                                  False)
                                               {all dead. string}
                                               (/\dead -> "5")
                                               (/\dead ->
                                                  Bool_match
                                                    (ifThenElse
                                                       {Bool}
                                                       (equalsInteger 6 x)
                                                       True
                                                       False)
                                                    {all dead. string}
                                                    (/\dead -> "6")
                                                    (/\dead ->
                                                       Bool_match
                                                         (ifThenElse
                                                            {Bool}
                                                            (equalsInteger 7 x)
                                                            True
                                                            False)
                                                         {all dead. string}
                                                         (/\dead -> "7")
                                                         (/\dead ->
                                                            Bool_match
                                                              (ifThenElse
                                                                 {Bool}
                                                                 (equalsInteger
                                                                    8
                                                                    x)
                                                                 True
                                                                 False)
                                                              {all dead. string}
                                                              (/\dead -> "8")
                                                              (/\dead ->
                                                                 Bool_match
                                                                   (ifThenElse
                                                                      {Bool}
                                                                      (equalsInteger
                                                                         9
                                                                         x)
                                                                      True
                                                                      False)
                                                                   {string}
                                                                   "9"
                                                                   "<invalid digit>")
                                                              {all dead. dead})
                                                         {all dead. dead})
                                                    {all dead. dead})
                                               {all dead. dead})
                                          {all dead. dead})
                                     {all dead. dead})
                                {all dead. dead})
                           {all dead. dead})
                      {all dead. dead})
                   (acc eta))
          {all dead. dead}
in
letrec
  !`$fShowBuiltinByteString_$cshowsPrec` :
     integer -> integer -> List string -> List string
    = \(p : integer) (n : integer) ->
        Bool_match
          (ifThenElse {Bool} (lessThanInteger n 0) True False)
          {all dead. List string -> List string}
          (/\dead ->
             \(eta : List string) ->
               Cons
                 {string}
                 "-"
                 (`$fShowBuiltinByteString_$cshowsPrec`
                    p
                    (subtractInteger 0 n)
                    eta))
          (/\dead -> go (go (Nil {integer}) n))
          {all dead. dead}
in
let
  !toHex : integer -> List string -> List string
    = \(x : integer) ->
        Bool_match
          (ifThenElse {Bool} (lessThanEqualsInteger x 9) True False)
          {all dead. List string -> List string}
          (/\dead -> `$fShowBuiltinByteString_$cshowsPrec` 0 x)
          (/\dead ->
             Bool_match
               (ifThenElse {Bool} (equalsInteger 10 x) True False)
               {all dead. List string -> List string}
               (/\dead -> \(ds : List string) -> Cons {string} "a" ds)
               (/\dead ->
                  Bool_match
                    (ifThenElse {Bool} (equalsInteger 11 x) True False)
                    {all dead. List string -> List string}
                    (/\dead -> \(ds : List string) -> Cons {string} "b" ds)
                    (/\dead ->
                       Bool_match
                         (ifThenElse {Bool} (equalsInteger 12 x) True False)
                         {all dead. List string -> List string}
                         (/\dead -> \(ds : List string) -> Cons {string} "c" ds)
                         (/\dead ->
                            Bool_match
                              (ifThenElse
                                 {Bool}
                                 (equalsInteger 13 x)
                                 True
                                 False)
                              {all dead. List string -> List string}
                              (/\dead ->
                                 \(ds : List string) -> Cons {string} "d" ds)
                              (/\dead ->
                                 Bool_match
                                   (ifThenElse
                                      {Bool}
                                      (equalsInteger 14 x)
                                      True
                                      False)
                                   {all dead. List string -> List string}
                                   (/\dead ->
                                      \(ds : List string) ->
                                        Cons {string} "e" ds)
                                   (/\dead ->
                                      Bool_match
                                        (ifThenElse
                                           {Bool}
                                           (equalsInteger 15 x)
                                           True
                                           False)
                                        {List string -> List string}
                                        (\(ds : List string) ->
                                           Cons {string} "f" ds)
                                        (\(ds : List string) ->
                                           Cons {string} "<invalid byte>" ds))
                                   {all dead. dead})
                              {all dead. dead})
                         {all dead. dead})
                    {all dead. dead})
               {all dead. dead})
          {all dead. dead}
  !s : bytestring = #5468697320697320616e206578616d706c65
in
letrec
  !go : List integer -> List string -> List string
    = \(ds : List integer) ->
        List_match
          {integer}
          ds
          {all dead. List string -> List string}
          (/\dead -> \(x : List string) -> x)
          (\(x : integer) (xs : List integer) ->
             /\dead ->
               let
                 !acc : List string -> List string = go xs
               in
               \(eta : List string) ->
                 (let
                     !x : integer = indexByteString s x
                   in
                   \(eta : List string) ->
                     toHex (divideInteger x 16) (toHex (modInteger x 16) eta))
                   (acc eta))
          {all dead. dead}
in
let
  !x : integer = -1234567890
in
letrec
  !`$fEnumBool_$cenumFromTo` : integer -> integer -> List integer
    = \(x : integer) (y : integer) ->
        Bool_match
          (ifThenElse {Bool} (lessThanEqualsInteger x y) False True)
          {all dead. List integer}
          (/\dead -> Nil {integer})
          (/\dead ->
             Cons {integer} x (`$fEnumBool_$cenumFromTo` (addInteger 1 x) y))
          {all dead. dead}
in
let
  data (Tuple2 :: * -> * -> *) a b | Tuple2_match where
    Tuple2 : a -> b -> Tuple2 a b
in
letrec
  !go : all a. integer -> List a -> Tuple2 (List a) (List a)
    = /\a ->
        \(ds : integer) (ds : List a) ->
          List_match
            {a}
            ds
            {all dead. Tuple2 (List a) (List a)}
            (/\dead -> Tuple2 {List a} {List a} (Nil {a}) (Nil {a}))
            (\(y : a) (ys : List a) ->
               /\dead ->
                 Bool_match
                   (ifThenElse {Bool} (equalsInteger 1 ds) True False)
                   {all dead. Tuple2 (List a) (List a)}
                   (/\dead ->
                      Tuple2
                        {List a}
                        {List a}
                        ((let
                             a = List a
                           in
                           \(c : a -> a -> a) (n : a) -> c y n)
                           (\(ds : a) (ds : List a) -> Cons {a} ds ds)
                           (Nil {a}))
                        ys)
                   (/\dead ->
                      Tuple2_match
                        {List a}
                        {List a}
                        (go {a} (subtractInteger ds 1) ys)
                        {Tuple2 (List a) (List a)}
                        (\(zs : List a) (ws : List a) ->
                           Tuple2 {List a} {List a} (Cons {a} y zs) ws))
                   {all dead. dead})
            {all dead. dead}
in
letrec
  !go : List string -> integer
    = \(ds : List string) ->
        List_match
          {string}
          ds
          {all dead. integer}
          (/\dead -> 0)
          (\(x : string) (xs : List string) -> /\dead -> addInteger 1 (go xs))
          {all dead. dead}
in
letrec
  !concatBuiltinStrings : List string -> string
    = \(ds : List string) ->
        List_match
          {string}
          ds
          {string}
          ""
          (\(x : string) (ds : List string) ->
             List_match
               {string}
               ds
               {all dead. string}
               (/\dead -> x)
               (\(ipv : string) (ipv : List string) ->
                  /\dead ->
                    Tuple2_match
                      {List string}
                      {List string}
                      (let
                        !n : integer = divideInteger (go ds) 2
                      in
                      Bool_match
                        (ifThenElse
                           {Bool}
                           (lessThanEqualsInteger n 0)
                           True
                           False)
                        {all dead. Tuple2 (List string) (List string)}
                        (/\dead ->
                           Tuple2 {List string} {List string} (Nil {string}) ds)
                        (/\dead -> go {string} n ds)
                        {all dead. dead})
                      {string}
                      (\(ipv : List string) (ipv : List string) ->
                         appendString
                           (concatBuiltinStrings ipv)
                           (concatBuiltinStrings ipv)))
               {all dead. dead})
in
let
  !`$fShowInteger_$cshow` : integer -> string
    = \(x : integer) ->
        concatBuiltinStrings
          (`$fShowBuiltinByteString_$cshowsPrec` 0 x (Nil {string}))
  data (Show :: * -> *) a | Show_match where
    CConsShow :
      (integer -> a -> List string -> List string) -> (a -> string) -> Show a
  !`$fShowInteger` : Show integer
    = CConsShow
        {integer}
        `$fShowBuiltinByteString_$cshowsPrec`
        `$fShowInteger_$cshow`
  data (Tuple5 :: * -> * -> * -> * -> * -> *) a b c d e | Tuple5_match where
    Tuple5 : a -> b -> c -> d -> e -> Tuple5 a b c d e
  !showsPrec : all a. Show a -> integer -> a -> List string -> List string
    = /\a ->
        \(v : Show a) ->
          Show_match
            {a}
            v
            {integer -> a -> List string -> List string}
            (\(v : integer -> a -> List string -> List string)
              (v : a -> string) ->
               v)
  !a : integer = trace {integer} (`$fShowInteger_$cshow` x) x
  !c : integer
    = trace
        {integer}
        (concatBuiltinStrings
           ((let
                !len : integer = lengthOfByteString s
              in
              go (`$fEnumBool_$cenumFromTo` 0 (subtractInteger len 1)))
              (Nil {string})))
        a
  !d : integer
    = trace
        {integer}
        (Bool_match
           (ifThenElse {Bool} (lessThanEqualsInteger c 0) False True)
           {string}
           "True"
           "False")
        c
  !e : integer
    = trace
        {integer}
        (let
          !x : List integer
            = (let
                  a = List integer
                in
                \(c : integer -> a -> a) (n : a) -> c a (c a (c c (c d n))))
                (\(ds : integer) (ds : List integer) -> Cons {integer} ds ds)
                (Nil {integer})
        in
        concatBuiltinStrings
          ((let
               !showElem : integer -> List string -> List string
                 = showsPrec {integer} `$fShowInteger` 0
             in
             letrec
               !go : List integer -> List string -> List string
                 = \(ds : List integer) ->
                     List_match
                       {integer}
                       ds
                       {all dead. List string -> List string}
                       (/\dead -> \(x : List string) -> x)
                       (\(x : integer) (xs : List integer) ->
                          /\dead ->
                            let
                              !acc : List string -> List string = go xs
                            in
                            \(eta : List string) ->
                              Cons {string} "," (showElem x (acc eta)))
                       {all dead. dead}
             in
             List_match
               {integer}
               x
               {List string -> List string}
               (\(ds : List string) -> Cons {string} "[]" ds)
               (\(x : integer) (xs : List integer) (eta : List string) ->
                  Cons
                    {string}
                    "["
                    (showElem x (go xs (Cons {string} "]" eta)))))
             (Nil {string})))
        d
in
multiplyInteger
  2
  (trace
     {integer}
     (concatBuiltinStrings
        (Cons
           {string}
           "("
           (showsPrec
              {integer}
              `$fShowInteger`
              0
              a
              (Cons
                 {string}
                 ","
                 (showsPrec
                    {integer}
                    `$fShowInteger`
                    0
                    a
                    (Cons
                       {string}
                       ","
                       (showsPrec
                          {integer}
                          `$fShowInteger`
                          0
                          c
                          (Cons
                             {string}
                             ","
                             (showsPrec
                                {integer}
                                `$fShowInteger`
                                0
                                d
                                (Cons
                                   {string}
                                   ","
                                   (showsPrec
                                      {integer}
                                      `$fShowInteger`
                                      0
                                      e
                                      (Cons
                                         {string}
                                         ")"
                                         (Nil {string})))))))))))))
     e)
letrec
  ~go : list data -> integer -> integer
    = (let
          r = integer -> integer
        in
        \(z : r) (f : data -> list data -> r) (xs : list data) ->
          chooseList
            {data}
            {all dead. r}
            xs
            (/\dead -> z)
            (/\dead -> f (headList {data} xs) (tailList {data} xs))
            {r})
        (\(x : integer) -> x)
        (\(ds : data) (t : list data) (eta : integer) ->
           addInteger 1 (go t eta))
in
\(d : data) -> let !ds : (\a -> list data) integer = unListData d in go ds 0
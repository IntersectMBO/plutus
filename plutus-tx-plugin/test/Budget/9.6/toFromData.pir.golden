let
  data (Tuple3 :: * -> * -> * -> *) a b c | Tuple3_match where
    Tuple3 : a -> b -> c -> Tuple3 a b c
  data Bool | Bool_match where
    True : Bool
    False : Bool
  data (Either :: * -> * -> *) a b | Either_match where
    Left : a -> Either a b
    Right : b -> Either a b
  data (Maybe :: * -> *) a | Maybe_match where
    Just : a -> Maybe a
    Nothing : Maybe a
  data Unit | Unit_match where
    Unit : Unit
  !traceError : all a. string -> a
    = /\a ->
        \(str : string) -> let !x : Unit = trace {Unit} str Unit in error {a}
  !d : data
    = (let
          b = Maybe (Tuple3 Bool integer Bool)
        in
        \(`$dToData` : (\a -> a -> data) integer)
         (`$dToData` : (\a -> a -> data) b)
         (ds : Either integer b) ->
          Either_match
            {integer}
            {b}
            ds
            {data}
            (\(arg : integer) ->
               constrData 0 (mkCons {data} (`$dToData` arg) []))
            (\(arg : b) -> constrData 1 (mkCons {data} (`$dToData` arg) [])))
        (\(i : integer) -> iData i)
        ((let
             a = Tuple3 Bool integer Bool
           in
           \(`$dToData` : (\a -> a -> data) a) (ds : Maybe a) ->
             Maybe_match
               {a}
               ds
               {all dead. data}
               (\(arg : a) ->
                  /\dead -> constrData 0 (mkCons {data} (`$dToData` arg) []))
               (/\dead -> Constr 1 [])
               {all dead. dead})
           (\(ds : Tuple3 Bool integer Bool) ->
              Tuple3_match
                {Bool}
                {integer}
                {Bool}
                ds
                {data}
                (\(arg : Bool) (arg : integer) (arg : Bool) ->
                   constrData
                     0
                     (mkCons
                        {data}
                        (Bool_match
                           arg
                           {all dead. data}
                           (/\dead -> Constr 1 [])
                           (/\dead -> Constr 0 [])
                           {all dead. dead})
                        (mkCons
                           {data}
                           (iData arg)
                           (mkCons
                              {data}
                              (Bool_match
                                 arg
                                 {all dead. data}
                                 (/\dead -> Constr 1 [])
                                 (/\dead -> Constr 0 [])
                                 {all dead. dead})
                              []))))))
        (Right
           {integer}
           {Maybe (Tuple3 Bool integer Bool)}
           (Just
              {Tuple3 Bool integer Bool}
              (Tuple3 {Bool} {integer} {Bool} True 1 False)))
in
(let
    b = Maybe (Tuple3 Bool integer Bool)
  in
  \(`$dUnsafeFromData` : (\a -> data -> a) integer)
   (`$dUnsafeFromData` : (\a -> data -> a) b)
   (d : data) ->
    let
      !tup : pair integer (list data) = unConstrData d
      !index : integer = fstPair {integer} {list data} tup
      !args : list data = sndPair {integer} {list data} tup
    in
    ifThenElse
      {all dead. Either integer b}
      (equalsInteger 0 index)
      (/\dead -> Left {integer} {b} (`$dUnsafeFromData` (headList {data} args)))
      (/\dead ->
         ifThenElse
           {all dead. Either integer b}
           (equalsInteger 1 index)
           (/\dead ->
              Right {integer} {b} (`$dUnsafeFromData` (headList {data} args)))
           (/\dead -> traceError {Either integer b} "PT1")
           {all dead. dead})
      {all dead. dead})
  unIData
  ((let
       a = Tuple3 Bool integer Bool
     in
     \(`$dUnsafeFromData` : (\a -> data -> a) a) (d : data) ->
       let
         !tup : pair integer (list data) = unConstrData d
         !index : integer = fstPair {integer} {list data} tup
         !args : list data = sndPair {integer} {list data} tup
       in
       ifThenElse
         {all dead. Maybe a}
         (equalsInteger 1 index)
         (/\dead -> Nothing {a})
         (/\dead ->
            ifThenElse
              {all dead. Maybe a}
              (equalsInteger 0 index)
              (/\dead -> Just {a} (`$dUnsafeFromData` (headList {data} args)))
              (/\dead -> traceError {Maybe a} "PT1")
              {all dead. dead})
         {all dead. dead})
     (\(d : data) ->
        let
          !tup : pair integer (list data) = unConstrData d
          !index : integer = fstPair {integer} {list data} tup
          !args : list data = sndPair {integer} {list data} tup
        in
        ifThenElse
          {all dead. Tuple3 Bool integer Bool}
          (equalsInteger 0 index)
          (/\dead ->
             let
               !l : list data = tailList {data} args
             in
             Tuple3
               {Bool}
               {integer}
               {Bool}
               (let
                 !tup : pair integer (list data)
                   = unConstrData (headList {data} args)
                 !index : integer = fstPair {integer} {list data} tup
                 !args : list data = sndPair {integer} {list data} tup
               in
               ifThenElse
                 {all dead. Bool}
                 (equalsInteger 0 index)
                 (/\dead -> False)
                 (/\dead ->
                    ifThenElse
                      {all dead. Bool}
                      (equalsInteger 1 index)
                      (/\dead -> True)
                      (/\dead -> traceError {Bool} "PT1")
                      {all dead. dead})
                 {all dead. dead})
               (unIData (headList {data} l))
               (let
                 !tup : pair integer (list data)
                   = unConstrData (headList {data} (tailList {data} l))
                 !index : integer = fstPair {integer} {list data} tup
                 !args : list data = sndPair {integer} {list data} tup
               in
               ifThenElse
                 {all dead. Bool}
                 (equalsInteger 0 index)
                 (/\dead -> False)
                 (/\dead ->
                    ifThenElse
                      {all dead. Bool}
                      (equalsInteger 1 index)
                      (/\dead -> True)
                      (/\dead -> traceError {Bool} "PT1")
                      {all dead. dead})
                 {all dead. dead}))
          (/\dead -> traceError {Tuple3 Bool integer Bool} "PT1")
          {all dead. dead}))
  d
(program
   1.1.0
   ((\fix1 ->
       (\`$fEnumBool_$cenumFromTo`
         n ->
          (\caseList' ->
             (\nt ->
                (\nt ->
                   (\lookup ->
                      constr 0
                        [ (lookup (\i -> iData i) unIData n nt)
                        , (lookup (\i -> iData i) unIData (addInteger 5 n) nt)
                        , (lookup (\i -> iData i) unIData (addInteger 10 n) nt)
                        , (lookup (\i -> iData i) unIData (addInteger 20 n) nt)
                        , (lookup
                             (\i -> iData i)
                             unIData
                             (addInteger 5 n)
                             nt) ])
                     (\`$dToData`
                       `$dUnsafeFromData`
                       ds
                       ds ->
                        force
                          (case
                             ((\k ->
                                 force
                                   (fix1
                                      (\go
                                        arg ->
                                         delay
                                           (caseList'
                                              (constr 1 [])
                                              (\hd ->
                                                 force
                                                   (force
                                                      (force
                                                         ifThenElse
                                                         (equalsData
                                                            k
                                                            (force
                                                               (force fstPair)
                                                               hd))
                                                         (delay
                                                            (delay
                                                               (\ds ->
                                                                  constr 0
                                                                    [ (force
                                                                         (force
                                                                            sndPair)
                                                                         hd) ])))
                                                         (delay
                                                            (delay
                                                               (force
                                                                  (go
                                                                     (delay
                                                                        (\x ->
                                                                           x)))))))))))
                                      (delay (\x -> x)))
                                   ds)
                                (`$dToData` ds))
                             [ (\a -> delay (constr 0 [(`$dUnsafeFromData` a)]))
                             , (delay (constr 1 [])) ])))
                  ((\k ->
                      force
                        (fix1
                           (\go arg ->
                              delay
                                (caseList'
                                   []
                                   (\hd tl ->
                                      force
                                        (force
                                           (force ifThenElse
                                              (equalsData
                                                 k
                                                 (force (force fstPair) hd))
                                              (delay (delay tl))
                                              (delay
                                                 (delay
                                                    (force mkCons
                                                       hd
                                                       (force
                                                          (go (delay (\x -> x)))
                                                          tl)))))))))
                           (delay (\x -> x)))
                        nt)
                     (iData (addInteger 5 n))))
               ((\z ->
                   (\go eta ->
                      go eta)
                     (fix1
                        (\go
                          ds ->
                           force
                             (case
                                ds
                                [ (delay z)
                                , (\y
                                    ys ->
                                     delay
                                       ((\ds ->
                                           (\k ->
                                              (\a ->
                                                 (\nilCase ->
                                                    force
                                                      (fix1
                                                         (\go
                                                           arg ->
                                                            delay
                                                              (caseList'
                                                                 nilCase
                                                                 (\hd
                                                                   tl ->
                                                                    force
                                                                      (force
                                                                         (force
                                                                            ifThenElse
                                                                            (equalsData
                                                                               k
                                                                               (force
                                                                                  (force
                                                                                     fstPair)
                                                                                  hd))
                                                                            (delay
                                                                               (delay
                                                                                  (force
                                                                                     mkCons
                                                                                     (mkPairData
                                                                                        k
                                                                                        a)
                                                                                     tl)))
                                                                            (delay
                                                                               (delay
                                                                                  (force
                                                                                     mkCons
                                                                                     hd
                                                                                     (force
                                                                                        (go
                                                                                           (delay
                                                                                              (\x ->
                                                                                                 x)))
                                                                                        tl)))))))))
                                                         (delay (\x -> x)))
                                                      ds)
                                                   (force mkCons
                                                      (mkPairData k a)
                                                      []))
                                                (iData y))
                                             (iData (addInteger n y)))
                                          (go ys))) ]))))
                  (force mkCons (mkPairData (iData n) (I 0)) [])
                  (`$fEnumBool_$cenumFromTo` 1 10)))
            (\z f xs ->
               force
                 (force (force chooseList)
                    xs
                    (delay z)
                    (delay (f (force headList xs) (force tailList xs))))))
         (fix1
            (\`$fEnumBool_$cenumFromTo` x lim ->
               force
                 (force
                    (force ifThenElse
                       (lessThanEqualsInteger x lim)
                       (delay
                          (delay
                             (constr 1
                                [ x
                                , (`$fEnumBool_$cenumFromTo`
                                     (addInteger 1 x)
                                     lim) ])))
                       (delay (delay (constr 0 []))))))))
      (\f -> fix rec. \x -> f rec x)))
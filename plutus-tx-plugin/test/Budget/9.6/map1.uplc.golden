(program
   1.1.0
   ((\`$fEnumBool_$cenumFromTo` n ->
       (\caseList' ->
          (\nt ->
             (\nt ->
                (\lookup ->
                   constr 0
                     [ (lookup (\i -> iData i) unIData n nt)
                     , (lookup (\i -> iData i) unIData (addInteger 5 n) nt)
                     , (lookup (\i -> iData i) unIData (addInteger 10 n) nt)
                     , (lookup (\i -> iData i) unIData (addInteger 20 n) nt)
                     , (lookup (\i -> iData i) unIData (addInteger 5 n) nt) ])
                  (\`$dToData` `$dUnsafeFromData` ds ds ->
                     case
                       ((\k ->
                           (\s -> s s)
                             (\s ->
                                caseList'
                                  (constr 1 [])
                                  (\hd ->
                                     force ifThenElse
                                       (equalsData k (force (force fstPair) hd))
                                       (\ds ->
                                          constr 0 [(force (force sndPair) hd)])
                                       (\x -> s s x)))
                             ds)
                          (`$dToData` ds))
                       [ (\a -> constr 0 [(`$dUnsafeFromData` a)])
                       , (constr 1 []) ]))
               ((\k ->
                   (\s -> s s)
                     (\s ->
                        caseList'
                          []
                          (\hd ->
                             force ifThenElse
                               (equalsData k (force (force fstPair) hd))
                               (\x -> x)
                               (\eta -> force mkCons hd (s s eta)))))
                  (iData (addInteger 5 n))
                  nt))
            ((\z ->
                (\go eta -> go eta)
                  ((\s -> s s)
                     (\s ds ->
                        case
                          ds
                          [ z
                          , (\y ys ->
                               (\ds ->
                                  (\k ->
                                     (\a ->
                                        (\nilCase ->
                                           (\s -> s s)
                                             (\s ->
                                                caseList'
                                                  nilCase
                                                  (\hd ->
                                                     force
                                                       (force ifThenElse
                                                          (equalsData
                                                             k
                                                             (force
                                                                (force fstPair)
                                                                hd))
                                                          (delay
                                                             (force mkCons
                                                                (mkPairData
                                                                   k
                                                                   a)))
                                                          (delay
                                                             (\eta ->
                                                                force mkCons
                                                                  hd
                                                                  (s s eta))))))
                                             ds)
                                          (force mkCons (mkPairData k a) []))
                                       (iData y))
                                    (iData (addInteger n y)))
                                 (s s ys)) ])))
               (force mkCons (mkPairData (iData n) (I 0)) [])
               (`$fEnumBool_$cenumFromTo` 1 10)))
         (\z f xs ->
            force
              (force (force chooseList)
                 xs
                 (delay z)
                 (delay (f (force headList xs) (force tailList xs))))))
      ((\s -> s s)
         (\s x lim ->
            force
              (force ifThenElse
                 (lessThanEqualsInteger x lim)
                 (delay (constr 1 [x, ((\x -> s s x) (addInteger 1 x) lim)]))
                 (delay (constr 0 [])))))))
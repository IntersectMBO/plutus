(program
   1.1.0
   ((\`$fEnumBool_$cenumFromTo`
      n ->
       (\caseList' ->
          (\nt ->
             (\nt ->
                (\lookup ->
                   constr 0
                     [ (lookup (\i -> iData i) unIData n nt)
                     , (lookup (\i -> iData i) unIData (addInteger 5 n) nt)
                     , (lookup (\i -> iData i) unIData (addInteger 10 n) nt)
                     , (lookup (\i -> iData i) unIData (addInteger 20 n) nt)
                     , (lookup (\i -> iData i) unIData (addInteger 5 n) nt) ])
                  (\`$dToData` `$dUnsafeFromData` ds ds ->
                     force
                       (case
                          ((\k ->
                              force
                                ((\s -> s s)
                                   (\s arg ->
                                      delay
                                        (caseList'
                                           (constr 1 [])
                                           (\hd ->
                                              force
                                                (force ifThenElse
                                                   (equalsData
                                                      k
                                                      (force (force fstPair)
                                                         hd))
                                                   (delay
                                                      (\ds ->
                                                         constr 0
                                                           [ (force
                                                                (force sndPair)
                                                                hd) ]))
                                                   (delay
                                                      (force
                                                         (s
                                                            s
                                                            (delay
                                                               (\x -> x)))))))))
                                   (delay (\x -> x)))
                                ds)
                             (`$dToData` ds))
                          [ (\a -> delay (constr 0 [(`$dUnsafeFromData` a)]))
                          , (delay (constr 1 [])) ])))
               ((\k ->
                   force
                     ((\s -> s s)
                        (\s arg ->
                           delay
                             (caseList'
                                []
                                (\hd ->
                                   force ifThenElse
                                     (equalsData k (force (force fstPair) hd))
                                     (\x -> x)
                                     (\eta ->
                                        force mkCons
                                          hd
                                          (force (s s (delay (\x -> x)))
                                             eta)))))
                        (delay (\x -> x))))
                  (iData (addInteger 5 n))
                  nt))
            ((\z ->
                (\go eta ->
                   go eta)
                  ((\s ->
                      s s)
                     (\s
                       ds ->
                        force
                          (case
                             ds
                             [ (delay z)
                             , (\y
                                 ys ->
                                  delay
                                    ((\ds ->
                                        (\k ->
                                           (\a ->
                                              (\nilCase ->
                                                 force
                                                   ((\s ->
                                                       s s)
                                                      (\s
                                                        arg ->
                                                         delay
                                                           (caseList'
                                                              nilCase
                                                              (\hd ->
                                                                 force
                                                                   (force
                                                                      ifThenElse
                                                                      (equalsData
                                                                         k
                                                                         (force
                                                                            (force
                                                                               fstPair)
                                                                            hd))
                                                                      (delay
                                                                         (force
                                                                            mkCons
                                                                            (mkPairData
                                                                               k
                                                                               a)))
                                                                      (delay
                                                                         (\eta ->
                                                                            force
                                                                              mkCons
                                                                              hd
                                                                              (force
                                                                                 (s
                                                                                    s
                                                                                    (delay
                                                                                       (\x ->
                                                                                          x)))
                                                                                 eta)))))))
                                                      (delay (\x -> x)))
                                                   ds)
                                                (force mkCons
                                                   (mkPairData k a)
                                                   []))
                                             (iData y))
                                          (iData (addInteger n y)))
                                       (s s ys))) ]))))
               (force mkCons (mkPairData (iData n) (I 0)) [])
               (`$fEnumBool_$cenumFromTo` 1 10)))
         (\z f xs ->
            force
              (force (force chooseList)
                 xs
                 (delay z)
                 (delay (f (force headList xs) (force tailList xs))))))
      ((\s -> s s)
         (\s x lim ->
            force
              (force ifThenElse
                 (lessThanEqualsInteger x lim)
                 (delay (constr 1 [x, ((\x -> s s x) (addInteger 1 x) lim)]))
                 (delay (constr 0 [])))))))
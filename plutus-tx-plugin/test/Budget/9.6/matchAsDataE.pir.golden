(let
    data Unit | Unit_match where
      Unit : Unit
    data (Tuple2 :: * -> * -> *) a b | Tuple2_match where
      Tuple2 : a -> b -> Tuple2 a b
  in
  \(ds : (\a -> data) integer) ->
    Tuple2_match
      {integer}
      {list data}
      ((let
           b = list data
         in
         \(tup : pair integer b) ->
           Tuple2
             {integer}
             {b}
             (fstPair {integer} {b} tup)
             (sndPair {integer} {b} tup))
         (unConstrData ds))
      {integer}
      (\(ds : integer) (ds : list data) ->
         case
           (all dead. integer)
           (case bool (equalsInteger 0 ds) [False, True])
           [ (/\dead ->
                Tuple2_match
                  {integer}
                  {list data}
                  ((let
                       b = list data
                     in
                     \(tup : pair integer b) ->
                       Tuple2
                         {integer}
                         {b}
                         (fstPair {integer} {b} tup)
                         (sndPair {integer} {b} tup))
                     (unConstrData ds))
                  {integer}
                  (\(ds : integer) (ds : list data) ->
                     case
                       (all dead. integer)
                       (case bool (equalsInteger 1 ds) [False, True])
                       [ (/\dead ->
                            let
                              !defaultBody : integer = error {integer}
                            in
                            Unit_match (error {Unit}) {integer} defaultBody)
                       , (/\dead -> 1) ]
                       {all dead. dead}))
           , (/\dead -> unIData (headList {data} ds)) ]
           {all dead. dead}))
  (Constr 0 [I 1])
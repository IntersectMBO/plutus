(let
    data Bool | Bool_match where
      True : Bool
      False : Bool
    !lessThanInteger : integer -> integer -> Bool
      = \(x : integer) (y : integer) ->
          ifThenElse {Bool} (lessThanInteger x y) True False
  in
  \(x : integer) (y : integer) ->
    Bool_match
      (lessThanInteger x 3)
      {all dead. Bool}
      (/\dead -> lessThanInteger y 3)
      (/\dead -> False)
      {all dead. dead})
  4
  4
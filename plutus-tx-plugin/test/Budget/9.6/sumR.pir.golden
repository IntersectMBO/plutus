letrec
  data (List :: * -> *) a | List_match where
    Nil : List a
    Cons : a -> List a -> List a
in
letrec
  !go : List integer -> integer
    = \(ds : List integer) ->
        List_match
          {integer}
          ds
          {all dead. integer}
          (/\dead -> 0)
          (\(x : integer) (xs : List integer) -> /\dead -> addInteger x (go xs))
          {all dead. dead}
in
letrec
  !`$fEnumBool_$cenumFromTo` : integer -> integer -> List integer
    = \(x : integer) (lim : integer) ->
        ifThenElse
          {all dead. List integer}
          (lessThanEqualsInteger x lim)
          (/\dead ->
             Cons {integer} x (`$fEnumBool_$cenumFromTo` (addInteger 1 x) lim))
          (/\dead -> Nil {integer})
          {all dead. dead}
in
let
  data Bool | Bool_match where
    True : Bool
    False : Bool
  !ls : List integer = `$fEnumBool_$cenumFromTo` 1 1000
in
go ls
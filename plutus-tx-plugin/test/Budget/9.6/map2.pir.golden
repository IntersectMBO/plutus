let
  !caseList' : all a r. r -> (a -> list a -> r) -> list a -> r
    = /\a r ->
        \(z : r) (f : a -> list a -> r) (xs : list a) ->
          chooseList
            {a}
            {all dead. r}
            xs
            (/\dead -> z)
            (/\dead -> f (headList {a} xs) (tailList {a} xs))
            {r}
  data (Tuple2 :: * -> * -> *) a b | Tuple2_match where
    Tuple2 : a -> b -> Tuple2 a b
in
letrec
  data (List :: * -> *) a | List_match where
    Nil : List a
    Cons : a -> List a -> List a
in
letrec
  ~go : list (pair data data) -> List (Tuple2 integer integer)
    = caseList'
        {pair data data}
        {List (Tuple2 integer integer)}
        (Nil {Tuple2 integer integer})
        (\(hd : pair data data) (tl : list (pair data data)) ->
           Cons
             {Tuple2 integer integer}
             (Tuple2
                {integer}
                {integer}
                (unIData (fstPair {data} {data} hd))
                (unIData (sndPair {data} {data} hd)))
             (go tl))
in
letrec
  !go : list (pair data data) -> list (pair data data) -> list (pair data data)
    = \(acc : list (pair data data)) ->
        caseList'
          {pair data data}
          {list (pair data data)}
          acc
          (\(hd : pair data data) -> go (mkCons {pair data data} hd acc))
in
let
  data (Maybe :: * -> *) a | Maybe_match where
    Just : a -> Maybe a
    Nothing : Maybe a
  data Bool | Bool_match where
    True : Bool
    False : Bool
in
letrec
  !goList : List (Tuple2 data data) -> list (pair data data)
    = \(ds : List (Tuple2 data data)) ->
        List_match
          {Tuple2 data data}
          ds
          {list (pair data data)}
          []
          (\(d : Tuple2 data data) (ds : List (Tuple2 data data)) ->
             mkCons
               {pair data data}
               (Tuple2_match
                  {data}
                  {data}
                  d
                  {pair data data}
                  (\(d : data) (d : data) -> mkPairData d d))
               (goList ds))
in
let
  !unsafeFromSOPList :
     all k a.
       (\a -> a -> data) k ->
       (\a -> a -> data) a ->
       List (Tuple2 k a) ->
       (\k a -> list (pair data data)) k a
    = /\k a ->
        \(`$dToData` : (\a -> a -> data) k)
         (`$dToData` : (\a -> a -> data) a) ->
          letrec
            !go : List (Tuple2 k a) -> List (Tuple2 data data)
              = \(ds : List (Tuple2 k a)) ->
                  List_match
                    {Tuple2 k a}
                    ds
                    {all dead. List (Tuple2 data data)}
                    (/\dead -> Nil {Tuple2 data data})
                    (\(x : Tuple2 k a) (xs : List (Tuple2 k a)) ->
                       /\dead ->
                         Cons
                           {Tuple2 data data}
                           (Tuple2_match
                              {k}
                              {a}
                              x
                              {Tuple2 data data}
                              (\(k : k) (a : a) ->
                                 Tuple2
                                   {data}
                                   {data}
                                   (`$dToData` k)
                                   (`$dToData` a)))
                           (go xs))
                    {all dead. dead}
          in
          \(eta : List (Tuple2 k a)) -> goList (go eta)
in
\(n : integer) ->
  let
    !nt : list (pair data data)
      = unsafeFromSOPList
          {integer}
          {integer}
          (\(i : integer) -> iData i)
          (\(i : integer) -> iData i)
          ((let
               a = Tuple2 integer integer
             in
             \(g : all b. (a -> b -> b) -> b -> b) ->
               g {List a} (\(ds : a) (ds : List a) -> Cons {a} ds ds) (Nil {a}))
             (/\a ->
                \(c : Tuple2 integer integer -> a -> a) (n : a) ->
                  c
                    (Tuple2 {integer} {integer} (addInteger 3 n) 33)
                    (c
                       (Tuple2 {integer} {integer} (addInteger 4 n) 44)
                       (c
                          (Tuple2 {integer} {integer} (addInteger 6 n) 66)
                          (c
                             (Tuple2 {integer} {integer} (addInteger 7 n) 77)
                             n)))))
  in
  letrec
    ~go : list (pair data data) -> list (pair data data)
      = caseList'
          {pair data data}
          {list (pair data data)}
          []
          (\(hd : pair data data) (tl : list (pair data data)) ->
             let
               !v' : data = sndPair {data} {data} hd
               !k' : data = fstPair {data} {data} hd
             in
             letrec
               ~go : list (pair data data) -> Maybe data
                 = caseList'
                     {pair data data}
                     {Maybe data}
                     (Nothing {data})
                     (\(hd : pair data data) ->
                        Bool_match
                          (ifThenElse
                             {Bool}
                             (equalsData k' (fstPair {data} {data} hd))
                             True
                             False)
                          {all dead. list (pair data data) -> Maybe data}
                          (/\dead ->
                             \(ds : list (pair data data)) ->
                               Just {data} (sndPair {data} {data} hd))
                          (/\dead -> go)
                          {all dead. dead})
             in
             Maybe_match
               {data}
               (go nt)
               {all dead. list (pair data data)}
               (\(r : data) ->
                  /\dead ->
                    mkCons
                      {pair data data}
                      (mkPairData
                         k'
                         (iData (addInteger (unIData v') (unIData r))))
                      (go tl))
               (/\dead -> mkCons {pair data data} (mkPairData k' v') (go tl))
               {all dead. dead})
  in
  let
    !nt : list (pair data data)
      = unsafeFromSOPList
          {integer}
          {integer}
          (\(i : integer) -> iData i)
          (\(i : integer) -> iData i)
          ((let
               a = Tuple2 integer integer
             in
             \(g : all b. (a -> b -> b) -> b -> b) ->
               g {List a} (\(ds : a) (ds : List a) -> Cons {a} ds ds) (Nil {a}))
             (/\a ->
                \(c : Tuple2 integer integer -> a -> a) (n : a) ->
                  c
                    (Tuple2 {integer} {integer} (addInteger 1 n) 1)
                    (c
                       (Tuple2 {integer} {integer} (addInteger 2 n) 2)
                       (c
                          (Tuple2 {integer} {integer} (addInteger 3 n) 3)
                          (c
                             (Tuple2 {integer} {integer} (addInteger 4 n) 4)
                             (c
                                (Tuple2 {integer} {integer} (addInteger 5 n) 5)
                                n))))))
  in
  letrec
    ~go : list (pair data data) -> list (pair data data)
      = caseList'
          {pair data data}
          {list (pair data data)}
          []
          (\(hd : pair data data) (tl : list (pair data data)) ->
             let
               !tl' : list (pair data data) = go tl
             in
             Bool_match
               ((let
                    !k : data = fstPair {data} {data} hd
                  in
                  letrec
                    ~go : list (pair data data) -> Bool
                      = caseList'
                          {pair data data}
                          {Bool}
                          False
                          (\(hd : pair data data) ->
                             Bool_match
                               (ifThenElse
                                  {Bool}
                                  (equalsData k (fstPair {data} {data} hd))
                                  True
                                  False)
                               {all dead. list (pair data data) -> Bool}
                               (/\dead -> \(ds : list (pair data data)) -> True)
                               (/\dead -> go)
                               {all dead. dead})
                  in
                  go)
                  nt)
               {all dead. list (pair data data)}
               (/\dead -> tl')
               (/\dead -> mkCons {pair data data} hd tl')
               {all dead. dead})
  in
  let
    !nt : list (pair data data)
      = let
        !rs' : list (pair data data) = go nt
        !ls' : list (pair data data) = go nt
      in
      go rs' ls'
  in
  go nt
(program
   1.1.0
   ((\go ->
       (\go ->
          (\`$fShowBuiltinByteString_$cshowsPrec` ->
             (\toHex ->
                (\go ->
                   (\`$fEnumBool_$cenumFromTo` ->
                      (\go ->
                         (\go ->
                            (\concatBuiltinStrings ->
                               (\`$fShowInteger_$cshow` ->
                                  (\`$fShowInteger` ->
                                     (\a ->
                                        (\b ->
                                           (\c ->
                                              (\d ->
                                                 (\e ->
                                                    multiplyInteger
                                                      2
                                                      (force
                                                         trace
                                                         (concatBuiltinStrings
                                                            (constr 1
                                                               [ "("
                                                               , (case
                                                                    `$fShowInteger`
                                                                    [ (\v v ->
                                                                         v) ]
                                                                    0
                                                                    a
                                                                    (constr 1
                                                                       [ ","
                                                                       , (case
                                                                            `$fShowInteger`
                                                                            [ (\v
                                                                                v ->
                                                                                 v) ]
                                                                            0
                                                                            b
                                                                            (constr 1
                                                                               [ ","
                                                                               , (case
                                                                                    `$fShowInteger`
                                                                                    [ (\v
                                                                                        v ->
                                                                                         v) ]
                                                                                    0
                                                                                    c
                                                                                    (constr 1
                                                                                       [ ","
                                                                                       , (case
                                                                                            `$fShowInteger`
                                                                                            [ (\v
                                                                                                v ->
                                                                                                 v) ]
                                                                                            0
                                                                                            d
                                                                                            (constr 1
                                                                                               [ ","
                                                                                               , (case
                                                                                                    `$fShowInteger`
                                                                                                    [ (\v
                                                                                                        v ->
                                                                                                         v) ]
                                                                                                    0
                                                                                                    e
                                                                                                    (constr 1
                                                                                                       [ ")"
                                                                                                       , (constr 0
                                                                                                            [  ]) ])) ])) ])) ])) ])) ]))
                                                         e))
                                                   (force
                                                      trace
                                                      (concatBuiltinStrings
                                                         ((\showElem ->
                                                             (\go
                                                               eta ->
                                                                constr 1
                                                                  [ "["
                                                                  , (showElem
                                                                       a
                                                                       (go
                                                                          (constr 1
                                                                             [ b
                                                                             , (constr 1
                                                                                  [ c
                                                                                  , (constr 1
                                                                                       [ d
                                                                                       , (constr 0
                                                                                            [  ]) ]) ]) ])
                                                                          (constr 1
                                                                             [ "]"
                                                                             , eta ]))) ])
                                                               ((\s ->
                                                                   s s)
                                                                  (\s
                                                                    ds ->
                                                                     case
                                                                       ds
                                                                       [ (\x ->
                                                                            x)
                                                                       , (\x
                                                                           xs ->
                                                                            (\acc
                                                                              eta ->
                                                                               constr 1
                                                                                 [ ","
                                                                                 , (showElem
                                                                                      x
                                                                                      (acc
                                                                                         eta)) ])
                                                                              (s
                                                                                 s
                                                                                 xs)) ])))
                                                            (case
                                                               `$fShowInteger`
                                                               [(\v v -> v)]
                                                               0)
                                                            (constr 0 [])))
                                                      d))
                                                (force trace
                                                   (case
                                                      (lessThanEqualsInteger
                                                         c
                                                         0)
                                                      ["True", "False"])
                                                   c))
                                             (force trace
                                                (concatBuiltinStrings
                                                   (go
                                                      (`$fEnumBool_$cenumFromTo`
                                                         0
                                                         17)
                                                      (constr 0 [])))
                                                b))
                                          (force trace "This is an example" a))
                                       (force trace
                                          (`$fShowInteger_$cshow` -1234567890)
                                          -1234567890))
                                    (constr 0
                                       [ `$fShowBuiltinByteString_$cshowsPrec`
                                       , `$fShowInteger_$cshow` ]))
                                 (\x ->
                                    concatBuiltinStrings
                                      (`$fShowBuiltinByteString_$cshowsPrec`
                                         0
                                         x
                                         (constr 0 []))))
                              ((\s -> s s)
                                 (\s ds ->
                                    case
                                      ds
                                      [ ""
                                      , (\x ds ->
                                           case
                                             ds
                                             [ x
                                             , (\ipv ipv ->
                                                  case
                                                    ((\n ->
                                                        case
                                                          (lessThanEqualsInteger
                                                             n
                                                             0)
                                                          [ (go n ds)
                                                          , (constr 0
                                                               [ (constr 0 [])
                                                               , ds ]) ])
                                                       (divideInteger
                                                          (go ds)
                                                          2))
                                                    [ (\ipv ipv ->
                                                         (\cse ->
                                                            appendString
                                                              (cse ipv)
                                                              (cse ipv))
                                                           (s s)) ]) ]) ])))
                           ((\s -> s s)
                              (\s ds ->
                                 case
                                   ds
                                   [0, (\ds xs -> addInteger 1 (s s xs))])))
                        ((\s -> s s)
                           (\s ds ds ->
                              case
                                ds
                                [ (constr 0 [(constr 0 []), (constr 0 [])])
                                , (\y ys ->
                                     case
                                       (equalsInteger 1 ds)
                                       [ (case
                                            ((\x -> s s x)
                                               (subtractInteger ds 1)
                                               ys)
                                            [ (\zs ws ->
                                                 constr 0
                                                   [(constr 1 [y, zs]), ws]) ])
                                       , (constr 0
                                            [ (constr 1 [y, (constr 0 [])])
                                            , ys ]) ]) ])))
                     ((\s -> s s)
                        (\s x lim ->
                           case
                             (lessThanEqualsInteger x lim)
                             [ (constr 0 [])
                             , (constr 1
                                  [ x
                                  , ((\x -> s s x) (addInteger 1 x) lim) ]) ])))
                  ((\s -> s s)
                     (\s ds ->
                        case
                          ds
                          [ (\x -> x)
                          , (\x xs ->
                               (\acc eta ->
                                  (\x eta ->
                                     toHex
                                       (divideInteger x 16)
                                       (toHex (modInteger x 16) eta))
                                    (indexByteString
                                       #5468697320697320616e206578616d706c65
                                       x)
                                    (acc eta))
                                 (s s xs)) ])))
               (\x ->
                  case
                    (lessThanEqualsInteger x 9)
                    [ (case
                         (equalsInteger 10 x)
                         [ (case
                              (equalsInteger 11 x)
                              [ (case
                                   (equalsInteger 12 x)
                                   [ (case
                                        (equalsInteger 13 x)
                                        [ (case
                                             (equalsInteger 14 x)
                                             [ (case
                                                  (equalsInteger 15 x)
                                                  [ (\ds ->
                                                       constr 1
                                                         ["<invalid byte>", ds])
                                                  , (\ds ->
                                                       constr 1 ["f", ds]) ])
                                             , (\ds -> constr 1 ["e", ds]) ])
                                        , (\ds -> constr 1 ["d", ds]) ])
                                   , (\ds -> constr 1 ["c", ds]) ])
                              , (\ds -> constr 1 ["b", ds]) ])
                         , (\ds -> constr 1 ["a", ds]) ])
                    , (`$fShowBuiltinByteString_$cshowsPrec` 0 x) ]))
            ((\s -> s s)
               (\s p n ->
                  case
                    (lessThanInteger n 0)
                    [ (go (go (constr 0 []) n))
                    , (\eta ->
                         constr 1 ["-", (s s p (subtractInteger 0 n) eta)]) ])))
         ((\s ->
             s s)
            (\s
              ds ->
               case
                 ds
                 [ (\x -> x)
                 , (\x
                     xs ->
                      (\acc
                        eta ->
                         constr 1
                           [ (case
                                (equalsInteger 0 x)
                                [ (case
                                     (equalsInteger 1 x)
                                     [ (case
                                          (equalsInteger 2 x)
                                          [ (case
                                               (equalsInteger 3 x)
                                               [ (case
                                                    (equalsInteger 4 x)
                                                    [ (case
                                                         (equalsInteger 5 x)
                                                         [ (case
                                                              (equalsInteger
                                                                 6
                                                                 x)
                                                              [ (case
                                                                   (equalsInteger
                                                                      7
                                                                      x)
                                                                   [ (case
                                                                        (equalsInteger
                                                                           8
                                                                           x)
                                                                        [ (case
                                                                             (equalsInteger
                                                                                9
                                                                                x)
                                                                             [ "<invalid digit>"
                                                                             , "9" ])
                                                                        , "8" ])
                                                                   , "7" ])
                                                              , "6" ])
                                                         , "5" ])
                                                    , "4" ])
                                               , "3" ])
                                          , "2" ])
                                     , "1" ])
                                , "0" ])
                           , (acc eta) ])
                        (s s xs)) ])))
      ((\s -> s s)
         (\s acc n ->
            (\x ->
               case
                 (equalsInteger 0 x)
                 [ ((\x -> s s x) (constr 1 [(remainderInteger n 10), acc]) x)
                 , (constr 1 [(remainderInteger n 10), acc]) ])
              (quotientInteger n 10)))))
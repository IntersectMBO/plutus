let
  data Bool | Bool_match where
    True : Bool
    False : Bool
  data Unit | Unit_match where
    Unit : Unit
in
letrec
  !go : list data -> integer -> data
    = \(xs : list data) (i : integer) ->
        (let
            r = Unit -> Unit -> data
          in
          \(z : r) (f : data -> list data -> r) (xs : list data) ->
            chooseList
              {data}
              {all dead. r}
              xs
              (/\dead -> z)
              (/\dead -> f (headList {data} xs) (tailList {data} xs))
              {r})
          (\(ds : Unit) -> error {Unit -> data})
          (\(x : data) (xs : list data) (ds : Unit) (eta : Unit) ->
             Bool_match
               (ifThenElse {Bool} (equalsInteger 0 i) True False)
               {all dead. data}
               (/\dead -> x)
               (/\dead -> go xs (subtractInteger i 1))
               {all dead. dead})
          xs
          Unit
          Unit
in
\(d : data) -> let !xs : list data = unListData d in go xs 5
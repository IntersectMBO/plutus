let
  data Bool | Bool_match where
    True : Bool
    False : Bool
  data Unit | Unit_match where
    Unit : Unit
in
letrec
  !go : list data -> integer -> data
    = \(xs : list data) (i : integer) ->
        chooseList
          {data}
          {Unit -> Unit -> data}
          xs
          (\(ds : Unit) -> error {Unit -> data})
          (\(ds : Unit) (ds : Unit) ->
             let
               !hd : data = headList {data} xs
               !tl : list data = tailList {data} xs
             in
             Bool_match
               (ifThenElse {Bool} (equalsInteger 0 i) True False)
               {all dead. data}
               (/\dead -> hd)
               (/\dead -> go tl (subtractInteger i 1))
               {all dead. dead})
          Unit
          Unit
in
\(d : data) -> let !xs : list data = unListData d in go xs 5
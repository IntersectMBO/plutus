(let
    data Ordering | Ordering_match where
      EQ : Ordering
      GT : Ordering
      LT : Ordering
    data Bool | Bool_match where
      True : Bool
      False : Bool
    data (Ord :: * -> *) a | Ord_match where
      CConsOrd :
        (\a -> a -> a -> Bool) a ->
        (a -> a -> Ordering) ->
        (a -> a -> Bool) ->
        (a -> a -> Bool) ->
        (a -> a -> Bool) ->
        (a -> a -> Bool) ->
        (a -> a -> a) ->
        (a -> a -> a) ->
        Ord a
    !`$fOrdInteger` : Ord integer
      = CConsOrd
          {integer}
          (\(x : integer) (y : integer) ->
             ifThenElse {Bool} (equalsInteger x y) True False)
          (\(eta : integer) (eta : integer) ->
             Bool_match
               (ifThenElse {Bool} (equalsInteger eta eta) True False)
               {all dead. Ordering}
               (/\dead -> EQ)
               (/\dead ->
                  Bool_match
                    (ifThenElse
                       {Bool}
                       (lessThanEqualsInteger eta eta)
                       True
                       False)
                    {all dead. Ordering}
                    (/\dead -> LT)
                    (/\dead -> GT)
                    {all dead. dead})
               {all dead. dead})
          (\(x : integer) (y : integer) ->
             ifThenElse {Bool} (lessThanInteger x y) True False)
          (\(x : integer) (y : integer) ->
             ifThenElse {Bool} (lessThanEqualsInteger x y) True False)
          (\(x : integer) (y : integer) ->
             ifThenElse {Bool} (lessThanEqualsInteger x y) False True)
          (\(x : integer) (y : integer) ->
             ifThenElse {Bool} (lessThanInteger x y) False True)
          (\(x : integer) (y : integer) ->
             Bool_match
               (ifThenElse {Bool} (lessThanEqualsInteger x y) True False)
               {all dead. integer}
               (/\dead -> y)
               (/\dead -> x)
               {all dead. dead})
          (\(x : integer) (y : integer) ->
             Bool_match
               (ifThenElse {Bool} (lessThanEqualsInteger x y) True False)
               {all dead. integer}
               (/\dead -> x)
               (/\dead -> y)
               {all dead. dead})
    !`<` : all a. Ord a -> a -> a -> Bool
      = /\a ->
          \(v : Ord a) ->
            Ord_match
              {a}
              v
              {a -> a -> Bool}
              (\(v : (\a -> a -> a -> Bool) a)
                (v : a -> a -> Ordering)
                (v : a -> a -> Bool)
                (v : a -> a -> Bool)
                (v : a -> a -> Bool)
                (v : a -> a -> Bool)
                (v : a -> a -> a)
                (v : a -> a -> a) ->
                 v)
  in
  \(x : integer) (y : integer) ->
    Bool_match
      (`<` {integer} `$fOrdInteger` x 3)
      {all dead. Bool}
      (/\dead -> `<` {integer} `$fOrdInteger` y 3)
      (/\dead -> False)
      {all dead. dead})
  4
  4
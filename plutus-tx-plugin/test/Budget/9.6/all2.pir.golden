let
  data Unit | Unit_match where
    Unit : Unit
  data Bool | Bool_match where
    True : Bool
    False : Bool
in
letrec
  !go : list (pair data data) -> Bool
    = \(xs : list (pair data data)) ->
        chooseList
          {pair data data}
          {Unit -> Bool}
          xs
          (\(ds : Unit) -> True)
          (\(ds : Unit) ->
             let
               !hd : pair data data = headList {pair data data} xs
               !tl : list (pair data data) = tailList {pair data data} xs
             in
             ifThenElse
               {all dead. Bool}
               (lessThanInteger (unIData (sndPair {data} {data} hd)) 10)
               (/\dead -> go tl)
               (/\dead -> False)
               {all dead. dead})
          Unit
in
\(inp : data) -> go (unMapData inp)
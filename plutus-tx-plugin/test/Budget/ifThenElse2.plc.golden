let ~fAdditiveSemigroupInteger : (\a -> a -> a -> a) integer
      = \(x : integer) (y : integer) -> addInteger x y
    !bad_name : all a. (\a -> a -> a -> a) a -> a -> a -> a
      = /\a -> \(v : (\a -> a -> a -> a) a) -> v
    ~a : integer = bad_name {integer} fAdditiveSemigroupInteger 1 2
    data Bool | Bool_match where
      True : Bool
      False : Bool
in Bool_match
     (ifThenElse {Bool} (lessThanInteger 3 4) True False) {integer -> integer}
     (\(x : integer) -> bad_name {integer} fAdditiveSemigroupInteger x 5)
     (\(x : integer) ->
        bad_name
          {integer} fAdditiveSemigroupInteger (bad_name
                                                 {integer}
                                                 fAdditiveSemigroupInteger x a)
          a) (bad_name {integer} fAdditiveSemigroupInteger 6 7)
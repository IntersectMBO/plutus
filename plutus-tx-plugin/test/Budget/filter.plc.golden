(program
  (let
    (nonrec)
    (datatypebind
      (datatype
        (tyvardecl Bool (type))

        Bool_match
        (vardecl True Bool) (vardecl False Bool)
      )
    )
    (let
      (rec)
      (datatypebind
        (datatype
          (tyvardecl List (fun (type) (type)))
          (tyvardecl a (type))
          Nil_match
          (vardecl Nil [ List a ])
          (vardecl Cons (fun a (fun [ List a ] [ List a ])))
        )
      )
      (let
        (rec)
        (termbind
          (strict)
          (vardecl
            foldr
            (all
              a
              (type)
              (all b (type) (fun (fun a (fun b b)) (fun b (fun [ List a ] b))))
            )
          )
          (abs
            a
            (type)
            (abs
              b
              (type)
              (lam
                f
                (fun a (fun b b))
                (lam
                  acc
                  b
                  (lam
                    l
                    [ List a ]
                    {
                      [
                        [
                          { [ { Nil_match a } l ] (all dead (type) b) }
                          (abs dead (type) acc)
                        ]
                        (lam
                          x
                          a
                          (lam
                            xs
                            [ List a ]
                            (abs
                              dead
                              (type)
                              [ [ f x ] [ [ [ { { foldr a } b } f ] acc ] xs ] ]
                            )
                          )
                        )
                      ]
                      (all dead (type) dead)
                    }
                  )
                )
              )
            )
          )
        )
        [
          [
            [
              { { foldr (con integer) } [ List (con integer) ] }
              (lam
                e
                (con integer)
                (lam
                  xs
                  [ List (con integer) ]
                  {
                    [
                      [
                        {
                          [
                            Bool_match
                            [
                              [
                                [
                                  { (builtin ifThenElse) Bool }
                                  [
                                    [
                                      (builtin equalsInteger)
                                      [
                                        [ (builtin modInteger) e ]
                                        (con integer 2)
                                      ]
                                    ]
                                    (con integer 0)
                                  ]
                                ]
                                True
                              ]
                              False
                            ]
                          ]
                          (all dead (type) [ List (con integer) ])
                        }
                        (abs dead (type) [ [ { Cons (con integer) } e ] xs ])
                      ]
                      (abs dead (type) xs)
                    ]
                    (all dead (type) dead)
                  }
                )
              )
            ]
            { Nil (con integer) }
          ]
          [
            [
              {
                (abs
                  a
                  (type)
                  (lam
                    c
                    (fun (con integer) (fun a a))
                    (lam
                      n
                      a
                      [
                        [ c (con integer 1) ]
                        [
                          [ c (con integer 2) ]
                          [
                            [ c (con integer 3) ]
                            [
                              [ c (con integer 4) ]
                              [
                                [ c (con integer 5) ]
                                [
                                  [ c (con integer 6) ]
                                  [
                                    [ c (con integer 7) ]
                                    [
                                      [ c (con integer 8) ]
                                      [
                                        [ c (con integer 9) ]
                                        [ [ c (con integer 10) ] n ]
                                      ]
                                    ]
                                  ]
                                ]
                              ]
                            ]
                          ]
                        ]
                      ]
                    )
                  )
                )
                [ List (con integer) ]
              }
              { Cons (con integer) }
            ]
            { Nil (con integer) }
          ]
        ]
      )
    )
  )
)
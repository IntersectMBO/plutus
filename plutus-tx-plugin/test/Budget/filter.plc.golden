(program
  (let
    (rec)
    (datatypebind
      (datatype
        (tyvardecl List (fun (type) (type)))
        (tyvardecl a (type))
        Nil_match
        (vardecl Nil [ List a ])
        (vardecl Cons (fun a (fun [ List a ] [ List a ])))
      )
    )
    (let
      (nonrec)
      (termbind
        (strict)
        (vardecl
          build
          (all
            a
            (type)
            (fun (all b (type) (fun (fun a (fun b b)) (fun b b))) [ List a ])
          )
        )
        (abs
          a
          (type)
          (lam
            g
            (all b (type) (fun (fun a (fun b b)) (fun b b)))
            [ [ { g [ List a ] } { Cons a } ] { Nil a } ]
          )
        )
      )
      (termbind
        (strict)
        (vardecl
          equalsInteger (fun (con integer) (fun (con integer) (con bool)))
        )
        (builtin equalsInteger)
      )
      (datatypebind
        (datatype
          (tyvardecl Bool (type))

          Bool_match
          (vardecl True Bool) (vardecl False Bool)
        )
      )
      (termbind
        (strict)
        (vardecl ifThenElse (all a (type) (fun (con bool) (fun a (fun a a)))))
        (builtin ifThenElse)
      )
      (termbind
        (strict)
        (vardecl
          modInteger (fun (con integer) (fun (con integer) (con integer)))
        )
        (builtin modInteger)
      )
      (termbind
        (strict)
        (vardecl even (fun (con integer) Bool))
        (lam
          n
          (con integer)
          [
            [
              [
                { ifThenElse Bool }
                [
                  [ equalsInteger [ [ modInteger n ] (con integer 2) ] ]
                  (con integer 0)
                ]
              ]
              True
            ]
            False
          ]
        )
      )
      (let
        (rec)
        (termbind
          (strict)
          (vardecl
            foldr
            (all
              a
              (type)
              (all b (type) (fun (fun a (fun b b)) (fun b (fun [ List a ] b))))
            )
          )
          (abs
            a
            (type)
            (abs
              b
              (type)
              (lam
                f
                (fun a (fun b b))
                (lam
                  acc
                  b
                  (lam
                    l
                    [ List a ]
                    {
                      [
                        [
                          { [ { Nil_match a } l ] (all dead (type) b) }
                          (abs dead (type) acc)
                        ]
                        (lam
                          x
                          a
                          (lam
                            xs
                            [ List a ]
                            (abs
                              dead
                              (type)
                              [ [ f x ] [ [ [ { { foldr a } b } f ] acc ] xs ] ]
                            )
                          )
                        )
                      ]
                      (all dead (type) dead)
                    }
                  )
                )
              )
            )
          )
        )
        (let
          (nonrec)
          (termbind
            (strict)
            (vardecl
              filter
              (all a (type) (fun (fun a Bool) (fun [ List a ] [ List a ])))
            )
            (abs
              a
              (type)
              (lam
                p
                (fun a Bool)
                [
                  [
                    { { foldr a } [ List a ] }
                    (lam
                      e
                      a
                      (lam
                        xs
                        [ List a ]
                        {
                          [
                            [
                              {
                                [ Bool_match [ p e ] ]
                                (all dead (type) [ List a ])
                              }
                              (abs dead (type) [ [ { Cons a } e ] xs ])
                            ]
                            (abs dead (type) xs)
                          ]
                          (all dead (type) dead)
                        }
                      )
                    )
                  ]
                  { Nil a }
                ]
              )
            )
          )
          [
            [ { filter (con integer) } even ]
            [
              { build (con integer) }
              (abs
                a
                (type)
                (lam
                  c
                  (fun (con integer) (fun a a))
                  (lam
                    n
                    a
                    [
                      [ c (con integer 1) ]
                      [
                        [ c (con integer 2) ]
                        [
                          [ c (con integer 3) ]
                          [
                            [ c (con integer 4) ]
                            [
                              [ c (con integer 5) ]
                              [
                                [ c (con integer 6) ]
                                [
                                  [ c (con integer 7) ]
                                  [
                                    [ c (con integer 8) ]
                                    [
                                      [ c (con integer 9) ]
                                      [ [ c (con integer 10) ] n ]
                                    ]
                                  ]
                                ]
                              ]
                            ]
                          ]
                        ]
                      ]
                    ]
                  )
                )
              )
            ]
          ]
        )
      )
    )
  )
)
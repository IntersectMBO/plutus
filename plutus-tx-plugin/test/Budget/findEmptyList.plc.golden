(program
  (let
    (rec)
    (datatypebind
      (datatype
        (tyvardecl List (fun (type) (type)))
        (tyvardecl a (type))
        Nil_match
        (vardecl Nil [ List a ])
        (vardecl Cons (fun a (fun [ List a ] [ List a ])))
      )
    )
    (let
      (nonrec)
      (datatypebind
        (datatype
          (tyvardecl Monoid (fun (type) (type)))
          (tyvardecl a (type))
          Monoid_match
          (vardecl
            CConsMonoid
            (fun [ (lam a (type) (fun a (fun a a))) a ] (fun a [ Monoid a ]))
          )
        )
      )
      (let
        (rec)
        (termbind
          (strict)
          (vardecl
            fFoldableNil_cfoldMap
            (all
              m
              (type)
              (all
                a (type) (fun [ Monoid m ] (fun (fun a m) (fun [ List a ] m)))
              )
            )
          )
          (abs
            m
            (type)
            (abs
              a
              (type)
              (lam
                dMonoid
                [ Monoid m ]
                (lam
                  eta
                  (fun a m)
                  (lam
                    eta
                    [ List a ]
                    {
                      [
                        [
                          { [ { Nil_match a } eta ] (all dead (type) m) }
                          (abs
                            dead
                            (type)
                            [
                              { [ { Monoid_match m } dMonoid ] m }
                              (lam
                                v
                                [ (lam a (type) (fun a (fun a a))) m ]
                                (lam v m v)
                              )
                            ]
                          )
                        ]
                        (lam
                          x
                          a
                          (lam
                            xs
                            [ List a ]
                            (abs
                              dead
                              (type)
                              [
                                [
                                  [
                                    {
                                      [ { Monoid_match m } dMonoid ]
                                      [ (lam a (type) (fun a (fun a a))) m ]
                                    }
                                    (lam
                                      v
                                      [ (lam a (type) (fun a (fun a a))) m ]
                                      (lam v m v)
                                    )
                                  ]
                                  [ eta x ]
                                ]
                                [
                                  [
                                    [
                                      { { fFoldableNil_cfoldMap m } a } dMonoid
                                    ]
                                    eta
                                  ]
                                  xs
                                ]
                              ]
                            )
                          )
                        )
                      ]
                      (all dead (type) dead)
                    }
                  )
                )
              )
            )
          )
        )
        (let
          (nonrec)
          (datatypebind
            (datatype
              (tyvardecl Maybe (fun (type) (type)))
              (tyvardecl a (type))
              Maybe_match
              (vardecl Just (fun a [ Maybe a ])) (vardecl Nothing [ Maybe a ])
            )
          )
          (datatypebind
            (datatype
              (tyvardecl Bool (type))

              Bool_match
              (vardecl True Bool) (vardecl False Bool)
            )
          )
          (termbind
            (strict) (vardecl x [ List (con integer) ]) { Nil (con integer) }
          )
          [
            [
              [
                {
                  {
                    fFoldableNil_cfoldMap
                    [ (lam a (type) [ Maybe a ]) (con integer) ]
                  }
                  (con integer)
                }
                [
                  [
                    { CConsMonoid [ (lam a (type) [ Maybe a ]) (con integer) ] }
                    (lam
                      ds
                      [ (lam a (type) [ Maybe a ]) (con integer) ]
                      (lam
                        b
                        [ (lam a (type) [ Maybe a ]) (con integer) ]
                        {
                          [
                            [
                              {
                                [ { Maybe_match (con integer) } ds ]
                                (all
                                  dead
                                  (type)
                                  [ (lam a (type) [ Maybe a ]) (con integer) ]
                                )
                              }
                              (lam ipv (con integer) (abs dead (type) ds))
                            ]
                            (abs dead (type) b)
                          ]
                          (all dead (type) dead)
                        }
                      )
                    )
                  ]
                  { Nothing (con integer) }
                ]
              ]
              (lam
                x
                (con integer)
                {
                  [
                    [
                      {
                        [
                          Bool_match
                          [
                            [
                              [
                                { (builtin ifThenElse) Bool }
                                [
                                  [
                                    (builtin lessThanEqualsInteger)
                                    (con integer 1)
                                  ]
                                  x
                                ]
                              ]
                              False
                            ]
                            True
                          ]
                        ]
                        (all dead (type) [ Maybe (con integer) ])
                      }
                      (abs dead (type) [ { Just (con integer) } x ])
                    ]
                    (abs dead (type) { Nothing (con integer) })
                  ]
                  (all dead (type) dead)
                }
              )
            ]
            x
          ]
        )
      )
    )
  )
)
let
  data Bool | Bool_match where
    True : Bool
    False : Bool
in
letrec
  data (List :: * -> *) a | Nil_match where
    Nil : List a
    Cons : a -> List a -> List a
in
letrec
  !foldr : all a b. (a -> b -> b) -> b -> List a -> b
    = /\a b ->
        \(f : a -> b -> b) (acc : b) (l : List a) ->
          Nil_match
            {a}
            l
            {all dead. b}
            (/\dead -> acc)
            (\(x : a) (xs : List a) -> /\dead -> f x (foldr {a} {b} f acc xs))
            {all dead. dead}
in
let
  !eta : List integer
    = (let
          a = List integer
        in
        \(c : integer -> a -> a) (n : a) ->
          c 1 (c 2 (c 3 (c 4 (c 5 (c 6 (c 7 (c 8 (c 9 (c 10 n))))))))))
        (\(ds : integer) (ds : List integer) -> Cons {integer} ds ds)
        (Nil {integer})
in
foldr
  {integer}
  {List integer}
  (\(e : integer) (xs : List integer) ->
     Bool_match
       (ifThenElse {Bool} (equalsInteger 0 (modInteger e 2)) True False)
       {all dead. List integer}
       (/\dead -> Cons {integer} e xs)
       (/\dead -> xs)
       {all dead. dead})
  (Nil {integer})
  eta
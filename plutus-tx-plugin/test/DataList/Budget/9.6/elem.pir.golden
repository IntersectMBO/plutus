let
  data Bool | Bool_match where
    True : Bool
    False : Bool
in
letrec
  !go : list data -> Bool
    = \(xs : list data) ->
        case
          Bool
          xs
          [ False
          , (\(h : data) (t : list data) ->
               Bool_match
                 (case Bool (equalsData (I 8) h) [False, True])
                 {all dead. Bool}
                 (/\dead -> True)
                 (/\dead -> go t)
                 {all dead. dead}) ]
in
\(eta : (\a -> list data) integer) -> go eta
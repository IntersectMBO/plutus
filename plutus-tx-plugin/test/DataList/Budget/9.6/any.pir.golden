let
  data Bool | Bool_match where
    True : Bool
    False : Bool
in
letrec
  !go : (\a -> list data) integer -> Bool
    = \(ds : (\a -> list data) integer) ->
        chooseList
          {data}
          {all dead. Bool}
          ds
          (/\dead -> False)
          (/\dead ->
             let
               !x : data = headList {data} ds
               !eta : list data = tailList {data} ds
             in
             Bool_match
               (case Bool (lessThanInteger (unIData x) 8) [True, False])
               {all dead. Bool}
               (/\dead -> True)
               (/\dead -> go eta)
               {all dead. dead})
          {Bool}
in
\(eta : (\a -> list data) integer) -> go eta
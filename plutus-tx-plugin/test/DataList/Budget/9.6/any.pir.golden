let
  data Bool | Bool_match where
    True : Bool
    False : Bool
in
letrec
  !go : (\a -> list data) integer -> Bool
    = \(ds : (\a -> list data) integer) ->
        case
          Bool
          ds
          [ False
          , (\(x : data) (eta : list data) ->
               Bool_match
                 (case Bool (lessThanInteger (unIData x) 8) [True, False])
                 {all dead. Bool}
                 (/\dead -> True)
                 (/\dead -> go eta)
                 {all dead. dead}) ]
in
\(eta : (\a -> list data) integer) -> go eta
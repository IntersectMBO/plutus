let
  data Bool | Bool_match where
    True : Bool
    False : Bool
in
letrec
  !go : list data -> Bool
    = \(xs : list data) ->
        chooseList
          {data}
          {all dead. Bool}
          xs
          (/\dead -> False)
          (/\dead ->
             let
               !eta : data = headList {data} xs
               !t : (\a -> list data) integer = tailList {data} xs
             in
             Bool_match
               (ifThenElse {Bool} (lessThanInteger (unIData eta) 8) False True)
               {all dead. Bool}
               (/\dead -> True)
               (/\dead -> go t)
               {all dead. dead})
          {Bool}
in
go
let
  data Bool | Bool_match where
    True : Bool
    False : Bool
in
letrec
  !f : list data -> Bool
    = \(xs : list data) ->
        chooseList
          {data}
          {all dead. Bool}
          xs
          (/\dead -> False)
          (/\dead ->
             let
               !x : data = headList {data} xs
               !eta : list data = tailList {data} xs
             in
             Bool_match
               (ifThenElse {Bool} (lessThanInteger (unIData x) 8) False True)
               {all dead. Bool}
               (/\dead -> True)
               (/\dead -> go eta)
               {all dead. dead})
          {Bool}
  !go : (\a -> list data) integer -> Bool
    = \(eta : (\a -> list data) integer) -> f eta
in
go
\(x : integer) (y : integer) (z : integer) ->
  (let
      a = (\a -> list data) integer
    in
    /\b -> \(f : a -> b) (x : a) -> f x)
    {(\a -> list data) integer}
    ((let
         b = (\a -> list data) integer
       in
       /\c a -> \(f : b -> c) (g : a -> b) (x : a) -> f (g x))
       {(\a -> list data) integer}
       {(\a -> list data) integer}
       (mkCons {data} (iData x))
       ((let
            b = (\a -> list data) integer
          in
          /\c a -> \(f : b -> c) (g : a -> b) (x : a) -> f (g x))
          {(\a -> list data) integer}
          {(\a -> list data) integer}
          (mkCons {data} (iData y))
          (mkCons {data} (iData z))))
    []
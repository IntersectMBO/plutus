let
  !addInteger : integer -> integer -> integer
    = \(x : integer) (y : integer) -> addInteger x y
  !int1Manual : data -> integer
    = \(ds : data) ->
        let
          !tup : pair integer (list data) = unConstrData ds
          !i : integer = fstPair {integer} {list data} tup
          !d : data = headList {data} (sndPair {integer} {list data} tup)
        in
        ifThenElse
          {all dead. integer}
          (equalsInteger 0 i)
          (/\dead -> unIData d)
          (/\dead -> error {integer})
          {all dead. dead}
  !int2Manual : data -> integer
    = \(ds : data) ->
        let
          !tup : pair integer (list data) = unConstrData ds
          !i : integer = fstPair {integer} {list data} tup
          !d : data
            = headList
                {data}
                (tailList {data} (sndPair {integer} {list data} tup))
        in
        ifThenElse
          {all dead. integer}
          (equalsInteger 0 i)
          (/\dead -> unIData d)
          (/\dead -> error {integer})
          {all dead. dead}
  !int3Manual : data -> integer
    = \(ds : data) ->
        let
          !tup : pair integer (list data) = unConstrData ds
          !i : integer = fstPair {integer} {list data} tup
          !d : data
            = headList
                {data}
                (tailList
                   {data}
                   (tailList {data} (sndPair {integer} {list data} tup)))
        in
        ifThenElse
          {all dead. integer}
          (equalsInteger 0 i)
          (/\dead -> unIData d)
          (/\dead -> error {integer})
          {all dead. dead}
  !int4Manual : data -> integer
    = \(ds : data) ->
        let
          !tup : pair integer (list data) = unConstrData ds
          !i : integer = fstPair {integer} {list data} tup
          !d : data
            = headList
                {data}
                (tailList
                   {data}
                   (tailList
                      {data}
                      (tailList {data} (sndPair {integer} {list data} tup))))
        in
        ifThenElse
          {all dead. integer}
          (equalsInteger 0 i)
          (/\dead -> unIData d)
          (/\dead -> error {integer})
          {all dead. dead}
  data Bool | Bool_match where
    True : Bool
    False : Bool
  !lessThanInteger : integer -> integer -> Bool
    = \(x : integer) (y : integer) ->
        ifThenElse {Bool} (lessThanInteger x y) True False
in
\(d : data) ->
  let
    !x : integer = int1Manual d
    !y : integer = int2Manual d
    !z : integer = int3Manual d
    !w : integer = int4Manual d
  in
  addInteger
    (addInteger
       (addInteger (addInteger (addInteger x y) z) w)
       (Bool_match
          (lessThanInteger (addInteger y z) (addInteger x w))
          {all dead. integer}
          (/\dead -> addInteger x z)
          (/\dead -> addInteger y w)
          {all dead. dead}))
    (Bool_match
       (lessThanInteger
          (addInteger (int3Manual d) (int2Manual d))
          (addInteger (int4Manual d) (int1Manual d)))
       {all dead. integer}
       (/\dead -> addInteger (int3Manual d) (int1Manual d))
       (/\dead -> addInteger (int4Manual d) (int2Manual d))
       {all dead. dead})
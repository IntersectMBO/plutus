let
  !addInteger : integer -> integer -> integer
    = \(x : integer) (y : integer) -> addInteger x y
  !`$mInts` :
     all r.
       data ->
       (integer -> integer -> integer -> integer -> r) ->
       (unit -> r) ->
       r
    = /\r ->
        \(scrut : data)
         (cont : integer -> integer -> integer -> integer -> r)
         (fail : unit -> r) ->
          let
            !tup : pair integer (list data) = unConstrData scrut
          in
          ifThenElse
            {all dead. r}
            (equalsInteger 0 (fstPair {integer} {list data} tup))
            (/\dead ->
               let
                 !l : list data = sndPair {integer} {list data} tup
                 !l : list data = tailList {data} l
                 !l : list data = tailList {data} l
               in
               cont
                 (unIData (headList {data} l))
                 (unIData (headList {data} l))
                 (unIData (headList {data} l))
                 (unIData (headList {data} (tailList {data} l))))
            (/\dead -> fail ())
            {all dead. dead}
  !int : data -> integer
    = \(ds : data) ->
        `$mInts`
          {integer}
          ds
          (\(ds : integer) (ds : integer) (ds : integer) (ds : integer) -> ds)
          (\(void : unit) -> error {integer})
  !int : data -> integer
    = \(ds : data) ->
        `$mInts`
          {integer}
          ds
          (\(ds : integer) (ds : integer) (ds : integer) (ds : integer) -> ds)
          (\(void : unit) -> error {integer})
  !int : data -> integer
    = \(ds : data) ->
        `$mInts`
          {integer}
          ds
          (\(ds : integer) (ds : integer) (ds : integer) (ds : integer) -> ds)
          (\(void : unit) -> error {integer})
  !int : data -> integer
    = \(ds : data) ->
        `$mInts`
          {integer}
          ds
          (\(ds : integer) (ds : integer) (ds : integer) (ds : integer) -> ds)
          (\(void : unit) -> error {integer})
  data Bool | Bool_match where
    True : Bool
    False : Bool
  !lessThanInteger : integer -> integer -> Bool
    = \(x : integer) (y : integer) ->
        ifThenElse {Bool} (lessThanInteger x y) True False
in
\(d : data) ->
  let
    !x : integer = int d
    !y : integer = int d
    !z : integer = int d
    !w : integer = int d
  in
  addInteger
    (addInteger
       (addInteger (addInteger (addInteger x y) z) w)
       (Bool_match
          (lessThanInteger (addInteger y z) (addInteger x w))
          {all dead. integer}
          (/\dead -> addInteger x z)
          (/\dead -> addInteger y w)
          {all dead. dead}))
    (Bool_match
       (lessThanInteger
          (addInteger (int d) (int d))
          (addInteger (int d) (int d)))
       {all dead. integer}
       (/\dead -> addInteger (int d) (int d))
       (/\dead -> addInteger (int d) (int d))
       {all dead. dead})
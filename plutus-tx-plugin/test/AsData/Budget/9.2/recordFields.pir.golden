let
  !addInteger : integer -> integer -> integer
    = \(x : integer) (y : integer) -> addInteger x y
  !`$mInts` :
     all r.
       data ->
       (integer -> integer -> integer -> integer -> r) ->
       (unit -> r) ->
       r
    = /\r ->
        \(scrut : data)
         (cont : integer -> integer -> integer -> integer -> r)
         (fail : unit -> r) ->
          let
            !tup : pair integer (list data) = unConstrData scrut
          in
          ifThenElse
            {all dead. r}
            (equalsInteger 0 (fstPair {integer} {list data} tup))
            (/\dead ->
               let
                 !l : list data = sndPair {integer} {list data} tup
                 !l : list data = tailList {data} l
                 !l : list data = tailList {data} l
               in
               cont
                 (unIData (headList {data} l))
                 (unIData (headList {data} l))
                 (unIData (headList {data} l))
                 (unIData (headList {data} (tailList {data} l))))
            (/\dead -> fail ())
            {all dead. dead}
  data Bool | Bool_match where
    True : Bool
    False : Bool
in
\(d : data) ->
  let
    !x : integer
      = `$mInts`
          {integer}
          d
          (\(ds : integer) (ds : integer) (ds : integer) (ds : integer) -> ds)
          (\(void : unit) -> error {integer})
    !y : integer
      = `$mInts`
          {integer}
          d
          (\(ds : integer) (ds : integer) (ds : integer) (ds : integer) -> ds)
          (\(void : unit) -> error {integer})
    !z : integer
      = `$mInts`
          {integer}
          d
          (\(ds : integer) (ds : integer) (ds : integer) (ds : integer) -> ds)
          (\(void : unit) -> error {integer})
    !w : integer
      = `$mInts`
          {integer}
          d
          (\(ds : integer) (ds : integer) (ds : integer) (ds : integer) -> ds)
          (\(void : unit) -> error {integer})
  in
  addInteger (addInteger (addInteger x y) z) w
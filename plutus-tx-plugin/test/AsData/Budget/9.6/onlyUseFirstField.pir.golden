let
  data Bool | Bool_match where
    True : Bool
    False : Bool
in
\(d : data) ->
  let
    !tup : pair integer (list data) = unConstrData d
    !idx : integer = fstPair {integer} {list data} tup
    !d : data = headList {data} (sndPair {integer} {list data} tup)
  in
  ifThenElse
    {all dead. integer}
    (equalsInteger 0 idx)
    (/\dead -> unIData d)
    (/\dead -> error {integer})
    {all dead. dead}
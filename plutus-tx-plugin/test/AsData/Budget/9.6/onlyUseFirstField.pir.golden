let
  data (Tuple4 :: * -> * -> * -> * -> *) a b c d | Tuple4_match where
    Tuple4 : a -> b -> c -> d -> Tuple4 a b c d
in
\(d : data) ->
  Tuple4_match
    {integer}
    {integer}
    {integer}
    {integer}
    (let
      !constrArgs : list data = sndPair {integer} {list data} (unConstrData d)
      !rest : list data = tailList {data} constrArgs
      !rest : list data = tailList {data} rest
    in
    Tuple4
      {integer}
      {integer}
      {integer}
      {integer}
      (unIData (headList {data} constrArgs))
      (unIData (headList {data} rest))
      (unIData (headList {data} rest))
      (unIData (headList {data} (tailList {data} rest))))
    {integer}
    (\(int : integer) (int : integer) (int : integer) (int : integer) -> int)
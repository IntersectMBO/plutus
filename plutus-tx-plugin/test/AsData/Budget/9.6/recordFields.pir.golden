let
  !addInteger : integer -> integer -> integer
    = \(x : integer) (y : integer) -> addInteger x y
  data (Tuple4 :: * -> * -> * -> * -> *) a b c d | Tuple4_match where
    Tuple4 : a -> b -> c -> d -> Tuple4 a b c d
  !matchOnInts : data -> Tuple4 integer integer integer integer
    = \(ds : data) ->
        let
          !constrArgs : list data
            = sndPair {integer} {list data} (unConstrData ds)
          !field : integer = unIData (headList {data} constrArgs)
          !rest : list data = tailList {data} constrArgs
          !field : integer = unIData (headList {data} rest)
          !rest : list data = tailList {data} rest
        in
        Tuple4
          {integer}
          {integer}
          {integer}
          {integer}
          field
          field
          (unIData (headList {data} rest))
          (unIData (headList {data} (tailList {data} rest)))
  !int : data -> integer
    = \(ds : data) ->
        Tuple4_match
          {integer}
          {integer}
          {integer}
          {integer}
          (matchOnInts ds)
          {integer}
          (\(int : integer) (int : integer) (int : integer) (int : integer) ->
             int)
  !int : data -> integer
    = \(ds : data) ->
        Tuple4_match
          {integer}
          {integer}
          {integer}
          {integer}
          (matchOnInts ds)
          {integer}
          (\(int : integer) (int : integer) (int : integer) (int : integer) ->
             int)
  !int : data -> integer
    = \(ds : data) ->
        Tuple4_match
          {integer}
          {integer}
          {integer}
          {integer}
          (matchOnInts ds)
          {integer}
          (\(int : integer) (int : integer) (int : integer) (int : integer) ->
             int)
  !int : data -> integer
    = \(ds : data) ->
        Tuple4_match
          {integer}
          {integer}
          {integer}
          {integer}
          (matchOnInts ds)
          {integer}
          (\(int : integer) (int : integer) (int : integer) (int : integer) ->
             int)
  data Bool | Bool_match where
    True : Bool
    False : Bool
  !lessThanInteger : integer -> integer -> Bool
    = \(x : integer) (y : integer) ->
        ifThenElse {Bool} (lessThanInteger x y) True False
in
\(d : data) ->
  let
    !x : integer = int d
    !y : integer = int d
    !z : integer = int d
    !w : integer = int d
  in
  addInteger
    (addInteger
       (addInteger (addInteger (addInteger x y) z) w)
       (Bool_match
          (lessThanInteger (addInteger y z) (addInteger x w))
          {all dead. integer}
          (/\dead -> addInteger x z)
          (/\dead -> addInteger y w)
          {all dead. dead}))
    (Bool_match
       (lessThanInteger
          (addInteger (int d) (int d))
          (addInteger (int d) (int d)))
       {all dead. integer}
       (/\dead -> addInteger (int d) (int d))
       (/\dead -> addInteger (int d) (int d))
       {all dead. dead})
let
  !addInteger : integer -> integer -> integer
    = \(x : integer) (y : integer) -> addInteger x y
  data (Tuple4 :: * -> * -> * -> * -> *) a b c d | Tuple4_match where
    Tuple4 : a -> b -> c -> d -> Tuple4 a b c d
  data Bool | Bool_match where
    True : Bool
    False : Bool
  data (Maybe :: * -> *) a | Maybe_match where
    Just : a -> Maybe a
    Nothing : Maybe a
  !matchOnInts : data -> Maybe (Tuple4 integer integer integer integer)
    = \(ds : data) ->
        let
          !asConstr : pair integer (list data) = unConstrData ds
          !constrIx : integer = fstPair {integer} {list data} asConstr
          !constrArgs : list data = sndPair {integer} {list data} asConstr
          !field : integer = unIData (headList {data} constrArgs)
          !rest : list data = tailList {data} constrArgs
          !field : integer = unIData (headList {data} rest)
          !rest : list data = tailList {data} rest
          !field : integer = unIData (headList {data} rest)
          !field : integer = unIData (headList {data} (tailList {data} rest))
        in
        Bool_match
          (ifThenElse {Bool} (equalsInteger 0 constrIx) True False)
          {all dead. Maybe (Tuple4 integer integer integer integer)}
          (/\dead ->
             Just
               {Tuple4 integer integer integer integer}
               (Tuple4
                  {integer}
                  {integer}
                  {integer}
                  {integer}
                  field
                  field
                  field
                  field))
          (/\dead -> Nothing {Tuple4 integer integer integer integer})
          {all dead. dead}
  !int : data -> integer
    = \(ds : data) ->
        Maybe_match
          {Tuple4 integer integer integer integer}
          (matchOnInts ds)
          {all dead. integer}
          (\(ds : Tuple4 integer integer integer integer) ->
             /\dead ->
               Tuple4_match
                 {integer}
                 {integer}
                 {integer}
                 {integer}
                 ds
                 {integer}
                 (\(int : integer)
                   (int : integer)
                   (int : integer)
                   (int : integer) ->
                    int))
          (/\dead -> error {integer})
          {all dead. dead}
  !int : data -> integer
    = \(ds : data) ->
        Maybe_match
          {Tuple4 integer integer integer integer}
          (matchOnInts ds)
          {all dead. integer}
          (\(ds : Tuple4 integer integer integer integer) ->
             /\dead ->
               Tuple4_match
                 {integer}
                 {integer}
                 {integer}
                 {integer}
                 ds
                 {integer}
                 (\(int : integer)
                   (int : integer)
                   (int : integer)
                   (int : integer) ->
                    int))
          (/\dead -> error {integer})
          {all dead. dead}
  !int : data -> integer
    = \(ds : data) ->
        Maybe_match
          {Tuple4 integer integer integer integer}
          (matchOnInts ds)
          {all dead. integer}
          (\(ds : Tuple4 integer integer integer integer) ->
             /\dead ->
               Tuple4_match
                 {integer}
                 {integer}
                 {integer}
                 {integer}
                 ds
                 {integer}
                 (\(int : integer)
                   (int : integer)
                   (int : integer)
                   (int : integer) ->
                    int))
          (/\dead -> error {integer})
          {all dead. dead}
  !int : data -> integer
    = \(ds : data) ->
        Maybe_match
          {Tuple4 integer integer integer integer}
          (matchOnInts ds)
          {all dead. integer}
          (\(ds : Tuple4 integer integer integer integer) ->
             /\dead ->
               Tuple4_match
                 {integer}
                 {integer}
                 {integer}
                 {integer}
                 ds
                 {integer}
                 (\(int : integer)
                   (int : integer)
                   (int : integer)
                   (int : integer) ->
                    int))
          (/\dead -> error {integer})
          {all dead. dead}
  !lessThanInteger : integer -> integer -> Bool
    = \(x : integer) (y : integer) ->
        ifThenElse {Bool} (lessThanInteger x y) True False
in
\(d : data) ->
  let
    !x : integer = int d
    !y : integer = int d
    !z : integer = int d
    !w : integer = int d
  in
  addInteger
    (addInteger
       (addInteger (addInteger (addInteger x y) z) w)
       (Bool_match
          (lessThanInteger (addInteger y z) (addInteger x w))
          {all dead. integer}
          (/\dead -> addInteger x z)
          (/\dead -> addInteger y w)
          {all dead. dead}))
    (Bool_match
       (lessThanInteger
          (addInteger (int d) (int d))
          (addInteger (int d) (int d)))
       {all dead. integer}
       (/\dead -> addInteger (int d) (int d))
       (/\dead -> addInteger (int d) (int d))
       {all dead. dead})
let
  !`$mInts` :
     all r.
       data ->
       (integer -> integer -> integer -> integer -> r) ->
       (unit -> r) ->
       r
    = /\r ->
        \(scrut : data)
         (cont : integer -> integer -> integer -> integer -> r)
         (fail : unit -> r) ->
          let
            !l : list data = sndPair {integer} {list data} (unConstrData scrut)
            !l : list data = tailList {data} l
            !l : list data = tailList {data} l
          in
          cont
            (unIData (headList {data} l))
            (unIData (headList {data} l))
            (unIData (headList {data} l))
            (unIData (headList {data} (tailList {data} l)))
  data Bool | Bool_match where
    True : Bool
    False : Bool
in
\(d : data) ->
  let
    !x : integer
      = `$mInts`
          {integer}
          d
          (\(ds : integer) (ds : integer) (ds : integer) (ds : integer) -> ds)
          (\(void : unit) -> error {integer})
    !y : integer
      = `$mInts`
          {integer}
          d
          (\(ds : integer) (ds : integer) (ds : integer) (ds : integer) -> ds)
          (\(void : unit) -> error {integer})
    !z : integer
      = `$mInts`
          {integer}
          d
          (\(ds : integer) (ds : integer) (ds : integer) (ds : integer) -> ds)
          (\(void : unit) -> error {integer})
    !w : integer
      = `$mInts`
          {integer}
          d
          (\(ds : integer) (ds : integer) (ds : integer) (ds : integer) -> ds)
          (\(void : unit) -> error {integer})
  in
  addInteger
    (addInteger
       (addInteger (addInteger (addInteger x y) z) w)
       (Bool_match
          (ifThenElse
             {Bool}
             (lessThanInteger (addInteger y z) (addInteger x w))
             True
             False)
          {all dead. integer}
          (/\dead -> addInteger x z)
          (/\dead -> addInteger y w)
          {all dead. dead}))
    (Bool_match
       (ifThenElse
          {Bool}
          (lessThanInteger
             (addInteger
                (`$mInts`
                   {integer}
                   d
                   (\(ds : integer)
                     (ds : integer)
                     (ds : integer)
                     (ds : integer) ->
                      ds)
                   (\(void : unit) -> error {integer}))
                (`$mInts`
                   {integer}
                   d
                   (\(ds : integer)
                     (ds : integer)
                     (ds : integer)
                     (ds : integer) ->
                      ds)
                   (\(void : unit) -> error {integer})))
             (addInteger
                (`$mInts`
                   {integer}
                   d
                   (\(ds : integer)
                     (ds : integer)
                     (ds : integer)
                     (ds : integer) ->
                      ds)
                   (\(void : unit) -> error {integer}))
                (`$mInts`
                   {integer}
                   d
                   (\(ds : integer)
                     (ds : integer)
                     (ds : integer)
                     (ds : integer) ->
                      ds)
                   (\(void : unit) -> error {integer}))))
          True
          False)
       {all dead. integer}
       (/\dead ->
          addInteger
            (`$mInts`
               {integer}
               d
               (\(ds : integer) (ds : integer) (ds : integer) (ds : integer) ->
                  ds)
               (\(void : unit) -> error {integer}))
            (`$mInts`
               {integer}
               d
               (\(ds : integer) (ds : integer) (ds : integer) (ds : integer) ->
                  ds)
               (\(void : unit) -> error {integer})))
       (/\dead ->
          addInteger
            (`$mInts`
               {integer}
               d
               (\(ds : integer) (ds : integer) (ds : integer) (ds : integer) ->
                  ds)
               (\(void : unit) -> error {integer}))
            (`$mInts`
               {integer}
               d
               (\(ds : integer) (ds : integer) (ds : integer) (ds : integer) ->
                  ds)
               (\(void : unit) -> error {integer})))
       {all dead. dead})
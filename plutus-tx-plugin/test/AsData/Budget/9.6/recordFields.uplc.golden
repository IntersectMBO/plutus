(program
   1.1.0
   (\d ->
      (\matchOnInts ->
         (\int ->
            (\x ->
               (\int ->
                  (\y ->
                     (\int ->
                        (\z ->
                           (\int ->
                              (\w ->
                                 (\lessThanInteger ->
                                    addInteger
                                      (addInteger
                                         (addInteger
                                            (addInteger (addInteger x y) z)
                                            w)
                                         (force
                                            (case
                                               (lessThanInteger
                                                  (addInteger y z)
                                                  (addInteger x w))
                                               [ (delay (addInteger x z))
                                               , (delay (addInteger y w)) ])))
                                      (force
                                         (case
                                            (lessThanInteger
                                               (addInteger (int d) (int d))
                                               (addInteger (int d) (int d)))
                                            [ (delay
                                                 (addInteger (int d) (int d)))
                                            , (delay
                                                 (addInteger
                                                    (int d)
                                                    (int d))) ])))
                                   (\x y ->
                                      force ifThenElse
                                        (lessThanInteger x y)
                                        (constr 0 [])
                                        (constr 1 [])))
                                (int d))
                             (\ds ->
                                case
                                  (matchOnInts ds)
                                  [ (\ds int int int int ->
                                       force
                                         (case
                                            ds
                                            [(delay int), (delay error)])) ]))
                          (int d))
                       (\ds ->
                          case
                            (matchOnInts ds)
                            [ (\ds int int int int ->
                                 force
                                   (case ds [(delay int), (delay error)])) ]))
                    (int d))
                 (\ds ->
                    case
                      (matchOnInts ds)
                      [ (\ds int int int int ->
                           force (case ds [(delay int), (delay error)])) ]))
              (int d))
           (\ds ->
              case
                (matchOnInts ds)
                [ (\ds int int int int ->
                     force (case ds [(delay int), (delay error)])) ]))
        (\ds ->
           (\asConstr ->
              (\constrIx ->
                 (\constrArgs ->
                    (\field ->
                       (\rest ->
                          (\field ->
                             (\rest ->
                                (\field ->
                                   (\field ->
                                      constr 0
                                        [ (force ifThenElse
                                             (equalsInteger 0 constrIx)
                                             (constr 0 [])
                                             (constr 1 []))
                                        , field
                                        , field
                                        , field
                                        , field ])
                                     (unIData
                                        (force headList (force tailList rest))))
                                  (unIData (force headList rest)))
                               (force tailList rest))
                            (unIData (force headList rest)))
                         (force tailList constrArgs))
                      (unIData (force headList constrArgs)))
                   (force (force sndPair) asConstr))
                (force (force fstPair) asConstr))
             (unConstrData ds))))
(program
   1.1.0
   (\d ->
      (\matchOnInts ->
         (\int ->
            (\x ->
               (\int ->
                  (\y ->
                     (\int ->
                        (\z ->
                           (\int ->
                              (\w ->
                                 (\lessThanInteger ->
                                    addInteger
                                      (addInteger
                                         (addInteger
                                            (addInteger (addInteger x y) z)
                                            w)
                                         (force
                                            (case
                                               (lessThanInteger
                                                  (addInteger y z)
                                                  (addInteger x w))
                                               [ (delay (addInteger x z))
                                               , (delay (addInteger y w)) ])))
                                      (force
                                         (case
                                            (lessThanInteger
                                               (addInteger (int d) (int d))
                                               (addInteger (int d) (int d)))
                                            [ (delay
                                                 (addInteger (int d) (int d)))
                                            , (delay
                                                 (addInteger
                                                    (int d)
                                                    (int d))) ])))
                                   (\x y ->
                                      force ifThenElse
                                        (lessThanInteger x y)
                                        (constr 0 [])
                                        (constr 1 [])))
                                (int d))
                             (\ds ->
                                force
                                  (case
                                     (matchOnInts ds)
                                     [ (\ds ->
                                          delay
                                            (case
                                               ds
                                               [(\int int int int -> int)]))
                                     , (delay error) ])))
                          (int d))
                       (\ds ->
                          force
                            (case
                               (matchOnInts ds)
                               [ (\ds ->
                                    delay (case ds [(\int int int int -> int)]))
                               , (delay error) ])))
                    (int d))
                 (\ds ->
                    force
                      (case
                         (matchOnInts ds)
                         [ (\ds -> delay (case ds [(\int int int int -> int)]))
                         , (delay error) ])))
              (int d))
           (\ds ->
              force
                (case
                   (matchOnInts ds)
                   [ (\ds -> delay (case ds [(\int int int int -> int)]))
                   , (delay error) ])))
        (\ds ->
           (\asConstr ->
              (\constrIx ->
                 (\constrArgs ->
                    (\field ->
                       (\rest ->
                          (\field ->
                             (\rest ->
                                (\field ->
                                   (\field ->
                                      force
                                        (force
                                           (force ifThenElse
                                              (equalsInteger 0 constrIx)
                                              (delay
                                                 (delay
                                                    (constr 0
                                                       [ (constr 0
                                                            [ field
                                                            , field
                                                            , field
                                                            , field ]) ])))
                                              (delay (delay (constr 1 []))))))
                                     (unIData
                                        (force headList (force tailList rest))))
                                  (unIData (force headList rest)))
                               (force tailList rest))
                            (unIData (force headList rest)))
                         (force tailList constrArgs))
                      (unIData (force headList constrArgs)))
                   (force (force sndPair) asConstr))
                (force (force fstPair) asConstr))
             (unConstrData ds))))
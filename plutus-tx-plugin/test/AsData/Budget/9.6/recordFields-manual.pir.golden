let
  !addInteger : integer -> integer -> integer
    = \(x : integer) (y : integer) -> addInteger x y
  data Bool | Bool_match where
    True : Bool
    False : Bool
in
\(d : data) ->
  let
    !x : integer
      = let
        !tup : pair integer (list data) = unConstrData d
        !i : integer = fstPair {integer} {list data} tup
        !d : data = headList {data} (sndPair {integer} {list data} tup)
      in
      ifThenElse
        {all dead. integer}
        (equalsInteger 0 i)
        (/\dead -> unIData d)
        (/\dead -> error {integer})
        {all dead. dead}
    !y : integer
      = let
        !tup : pair integer (list data) = unConstrData d
        !i : integer = fstPair {integer} {list data} tup
        !d : data
          = headList
              {data}
              (tailList {data} (sndPair {integer} {list data} tup))
      in
      ifThenElse
        {all dead. integer}
        (equalsInteger 0 i)
        (/\dead -> unIData d)
        (/\dead -> error {integer})
        {all dead. dead}
    !z : integer
      = let
        !tup : pair integer (list data) = unConstrData d
        !i : integer = fstPair {integer} {list data} tup
        !d : data
          = headList
              {data}
              (tailList
                 {data}
                 (tailList {data} (sndPair {integer} {list data} tup)))
      in
      ifThenElse
        {all dead. integer}
        (equalsInteger 0 i)
        (/\dead -> unIData d)
        (/\dead -> error {integer})
        {all dead. dead}
    !w : integer
      = let
        !tup : pair integer (list data) = unConstrData d
        !i : integer = fstPair {integer} {list data} tup
        !d : data
          = headList
              {data}
              (tailList
                 {data}
                 (tailList
                    {data}
                    (tailList {data} (sndPair {integer} {list data} tup))))
      in
      ifThenElse
        {all dead. integer}
        (equalsInteger 0 i)
        (/\dead -> unIData d)
        (/\dead -> error {integer})
        {all dead. dead}
  in
  addInteger (addInteger (addInteger x y) z) w
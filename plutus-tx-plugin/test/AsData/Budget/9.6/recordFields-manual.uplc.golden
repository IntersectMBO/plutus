program
  1.1.0
  (\d ->
     (\cse ->
        (\cse ->
           (\cse ->
              (\cse ->
                 (\cse ->
                    (\cse ->
                       (\lessThanInteger ->
                          addInteger
                            (addInteger
                               (addInteger
                                  (addInteger (addInteger cse cse) cse)
                                  cse)
                               (force
                                  (case
                                     (lessThanInteger
                                        (addInteger cse cse)
                                        (addInteger cse cse))
                                     [ (delay (addInteger cse cse))
                                     , (delay (addInteger cse cse)) ])))
                            (force
                               (case
                                  (lessThanInteger
                                     (addInteger cse cse)
                                     (addInteger cse cse))
                                  [ (delay (addInteger cse cse))
                                  , (delay (addInteger cse cse)) ])))
                         (\x y ->
                            force ifThenElse
                              (lessThanInteger x y)
                              (constr 0 [])
                              (constr 1 [])))
                      ((\d ->
                          force
                            (force ifThenElse
                               (equalsInteger 0 cse)
                               (delay (unIData d))
                               (delay error)))
                         (force headList
                            (force tailList
                               (force tailList
                                  (force tailList
                                     (force (force sndPair) cse)))))))
                   ((\d ->
                       force
                         (force ifThenElse
                            (equalsInteger 0 cse)
                            (delay (unIData d))
                            (delay error)))
                      (force headList
                         (force tailList
                            (force tailList (force (force sndPair) cse))))))
                ((\d ->
                    force
                      (force ifThenElse
                         (equalsInteger 0 cse)
                         (delay (unIData d))
                         (delay error)))
                   (force headList
                      (force tailList (force (force sndPair) cse)))))
             ((\d ->
                 force
                   (force ifThenElse
                      (equalsInteger 0 cse)
                      (delay (unIData d))
                      (delay error)))
                (force headList (force (force sndPair) cse))))
          (force (force fstPair) cse))
       (unConstrData d))
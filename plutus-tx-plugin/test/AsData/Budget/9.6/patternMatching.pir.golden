let
  data Unit | Unit_match where
    Unit : Unit
  !addInteger : integer -> integer -> integer
    = \(x : integer) (y : integer) -> addInteger x y
  data Bool | Bool_match where
    True : Bool
    False : Bool
  !lessThanInteger : integer -> integer -> Bool
    = \(x : integer) (y : integer) ->
        ifThenElse {Bool} (lessThanInteger x y) True False
  data (Tuple4 :: * -> * -> * -> * -> *) a b c d | Tuple4_match where
    Tuple4 : a -> b -> c -> d -> Tuple4 a b c d
  data (Maybe :: * -> *) a | Maybe_match where
    Just : a -> Maybe a
    Nothing : Maybe a
in
\(d : data) ->
  let
    ~ds : Tuple4 integer integer integer integer
      = (let
            r = Tuple4 integer integer integer integer
          in
          \(scrut : data)
           (cont : integer -> integer -> integer -> integer -> r)
           (fail : unit -> r) ->
            Maybe_match
              {Tuple4 integer integer integer integer}
              (let
                !asConstr : pair integer (list data) = unConstrData scrut
                !constrIx : integer = fstPair {integer} {list data} asConstr
                !constrArgs : list data = sndPair {integer} {list data} asConstr
                !field : integer = unIData (headList {data} constrArgs)
                !rest : list data = tailList {data} constrArgs
                !field : integer = unIData (headList {data} rest)
                !rest : list data = tailList {data} rest
                !field : integer = unIData (headList {data} rest)
                !field : integer
                  = unIData (headList {data} (tailList {data} rest))
              in
              Bool_match
                (ifThenElse {Bool} (equalsInteger 0 constrIx) True False)
                {all dead. Maybe (Tuple4 integer integer integer integer)}
                (/\dead ->
                   Just
                     {Tuple4 integer integer integer integer}
                     (Tuple4
                        {integer}
                        {integer}
                        {integer}
                        {integer}
                        field
                        field
                        field
                        field))
                (/\dead -> Nothing {Tuple4 integer integer integer integer})
                {all dead. dead})
              {all dead. r}
              (\(ds : Tuple4 integer integer integer integer) ->
                 /\dead ->
                   Tuple4_match
                     {integer}
                     {integer}
                     {integer}
                     {integer}
                     ds
                     {r}
                     (\(int : integer)
                       (int : integer)
                       (int : integer)
                       (int : integer) ->
                        cont int int int int))
              (/\dead -> fail ())
              {all dead. dead})
          d
          (\(x : integer) (y : integer) (z : integer) (w : integer) ->
             Tuple4 {integer} {integer} {integer} {integer} x y z w)
          (\(void : unit) ->
             Unit_match
               (error {Unit})
               {Tuple4 integer integer integer integer}
               (error {Tuple4 integer integer integer integer}))
    ~w : integer
      = Tuple4_match
          {integer}
          {integer}
          {integer}
          {integer}
          ds
          {integer}
          (\(x : integer) (y : integer) (z : integer) (w : integer) -> w)
    ~z : integer
      = Tuple4_match
          {integer}
          {integer}
          {integer}
          {integer}
          ds
          {integer}
          (\(x : integer) (y : integer) (z : integer) (w : integer) -> z)
    ~y : integer
      = Tuple4_match
          {integer}
          {integer}
          {integer}
          {integer}
          ds
          {integer}
          (\(x : integer) (y : integer) (z : integer) (w : integer) -> y)
    ~x : integer
      = Tuple4_match
          {integer}
          {integer}
          {integer}
          {integer}
          ds
          {integer}
          (\(x : integer) (y : integer) (z : integer) (w : integer) -> x)
    !ds : Tuple4 integer integer integer integer = ds
  in
  addInteger
    (addInteger
       (addInteger (addInteger (addInteger x y) z) w)
       (Bool_match
          (lessThanInteger (addInteger y z) (addInteger x w))
          {all dead. integer}
          (/\dead -> addInteger x z)
          (/\dead -> addInteger y w)
          {all dead. dead}))
    (Bool_match
       (lessThanInteger (addInteger z y) (addInteger w x))
       {all dead. integer}
       (/\dead -> addInteger z x)
       (/\dead -> addInteger w y)
       {all dead. dead})
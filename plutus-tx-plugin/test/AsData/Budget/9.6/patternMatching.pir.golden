let
  data Unit | Unit_match where
    Unit : Unit
  !addInteger : integer -> integer -> integer
    = \(x : integer) (y : integer) -> addInteger x y
  data Bool | Bool_match where
    True : Bool
    False : Bool
  !lessThanInteger : integer -> integer -> Bool
    = \(x : integer) (y : integer) ->
        ifThenElse {Bool} (lessThanInteger x y) True False
  data (Tuple4 :: * -> * -> * -> * -> *) a b c d | Tuple4_match where
    Tuple4 : a -> b -> c -> d -> Tuple4 a b c d
in
\(d : data) ->
  Tuple4_match
    {integer}
    {integer}
    {integer}
    {integer}
    (let
      !constrArgs : list data = sndPair {integer} {list data} (unConstrData d)
      !field : integer = unIData (headList {data} constrArgs)
      !rest : list data = tailList {data} constrArgs
      !field : integer = unIData (headList {data} rest)
      !rest : list data = tailList {data} rest
    in
    Tuple4
      {integer}
      {integer}
      {integer}
      {integer}
      field
      field
      (unIData (headList {data} rest))
      (unIData (headList {data} (tailList {data} rest))))
    {integer}
    (\(int : integer) (int : integer) (int : integer) (int : integer) ->
       addInteger
         (addInteger
            (addInteger (addInteger (addInteger int int) int) int)
            (Bool_match
               (lessThanInteger (addInteger int int) (addInteger int int))
               {all dead. integer}
               (/\dead -> addInteger int int)
               (/\dead -> addInteger int int)
               {all dead. dead}))
         (Bool_match
            (lessThanInteger (addInteger int int) (addInteger int int))
            {all dead. integer}
            (/\dead -> addInteger int int)
            (/\dead -> addInteger int int)
            {all dead. dead}))
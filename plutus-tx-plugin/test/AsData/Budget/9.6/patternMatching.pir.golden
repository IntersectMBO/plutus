let
  data Unit | Unit_match where
    Unit : Unit
  !addInteger : integer -> integer -> integer
    = \(x : integer) (y : integer) -> addInteger x y
  data Bool | Bool_match where
    True : Bool
    False : Bool
  !lessThanInteger : integer -> integer -> Bool
    = \(x : integer) (y : integer) ->
        case Bool (lessThanInteger x y) [False, True]
in
\(d : data) ->
  let
    !l : list data = sndPair {integer} {list data} (unConstrData d)
    !l : list data = tailList {data} l
    !l : list data = tailList {data} l
    !x : integer = unIData (headList {data} l)
    !y : integer = unIData (headList {data} l)
    !z : integer = unIData (headList {data} l)
    !w : integer = unIData (headList {data} (tailList {data} l))
  in
  addInteger
    (addInteger
       (addInteger (addInteger (addInteger x y) z) w)
       (Bool_match
          (lessThanInteger (addInteger y z) (addInteger x w))
          {all dead. integer}
          (/\dead -> addInteger x z)
          (/\dead -> addInteger y w)
          {all dead. dead}))
    (Bool_match
       (lessThanInteger (addInteger z y) (addInteger w x))
       {all dead. integer}
       (/\dead -> addInteger z x)
       (/\dead -> addInteger w y)
       {all dead. dead})
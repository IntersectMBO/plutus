(program
   1.1.0
   (\d ->
      (\ds ->
         (\ds ->
            (\x ->
               (\y ->
                  (\z ->
                     (\w ->
                        (\lessThanInteger ->
                           addInteger
                             (addInteger
                                (addInteger
                                   (addInteger
                                      (addInteger (force x) (force y))
                                      (force z))
                                   (force w))
                                (force
                                   (case
                                      (lessThanInteger
                                         (addInteger (force y) (force z))
                                         (addInteger (force x) (force w)))
                                      [ (delay (addInteger (force x) (force z)))
                                      , (delay
                                           (addInteger
                                              (force y)
                                              (force w))) ])))
                             (force
                                (case
                                   (lessThanInteger
                                      (addInteger (force z) (force y))
                                      (addInteger (force w) (force x)))
                                   [ (delay (addInteger (force z) (force x)))
                                   , (delay
                                        (addInteger (force w) (force y))) ])))
                          (\x y ->
                             force ifThenElse
                               (lessThanInteger x y)
                               (constr 0 [])
                               (constr 1 [])))
                       (delay (case (force ds) [(\x y z w -> w)])))
                    (delay (case (force ds) [(\x y z w -> z)])))
                 (delay (case (force ds) [(\x y z w -> y)])))
              (delay (case (force ds) [(\x y z w -> x)])))
           (force ds))
        (delay
           (case
              ((\asConstr ->
                  (\constrIx ->
                     (\constrArgs ->
                        (\field ->
                           (\rest ->
                              (\field ->
                                 (\rest ->
                                    (\field ->
                                       (\field ->
                                          constr 0
                                            [ (force ifThenElse
                                                 (equalsInteger 0 constrIx)
                                                 (constr 0 [])
                                                 (constr 1 []))
                                            , field
                                            , field
                                            , field
                                            , field ])
                                         (unIData
                                            (force headList
                                               (force tailList rest))))
                                      (unIData (force headList rest)))
                                   (force tailList rest))
                                (unIData (force headList rest)))
                             (force tailList constrArgs))
                          (unIData (force headList constrArgs)))
                       (force (force sndPair) asConstr))
                    (force (force fstPair) asConstr))
                 (unConstrData d))
              [ (\ds int int int int ->
                   force
                     (case
                        ds
                        [ (delay (constr 0 [int, int, int, int]))
                        , (delay (case error [error])) ])) ]))))
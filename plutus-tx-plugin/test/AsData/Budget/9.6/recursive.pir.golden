let
  data Bool | Bool_match where
    True : Bool
    False : Bool
in
letrec
  !factorial : integer -> integer
    = \(x : integer) ->
        Bool_match
          (ifThenElse {Bool} (equalsInteger 0 x) True False)
          {all dead. integer}
          (/\dead -> 1)
          (/\dead -> multiplyInteger x (factorial (subtractInteger x 1)))
          {all dead. dead}
in
\(x : integer) (y : integer) (z : integer) ->
  multiplyInteger (multiplyInteger (factorial x) (factorial y)) (factorial z)
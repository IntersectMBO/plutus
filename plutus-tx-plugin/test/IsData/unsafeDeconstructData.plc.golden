(program
  (let
    (nonrec)
    (datatypebind
      (datatype
        (tyvardecl Tuple2 (fun (type) (fun (type) (type))))
        (tyvardecl a (type)) (tyvardecl b (type))
        Tuple2_match
        (vardecl Tuple2 (fun a (fun b [ [ Tuple2 a ] b ])))
      )
    )
    (termbind
      (strict)
      (vardecl equalsInteger (fun (con integer) (fun (con integer) (con bool))))
      (builtin equalsInteger)
    )
    (termbind
      (strict)
      (vardecl error (all a (type) (fun (con unit) a)))
      (abs a (type) (lam thunk (con unit) (error a)))
    )
    (termbind
      (strict)
      (vardecl fst (all a (type) (all b (type) (fun [ [ (con pair) a ] b ] a))))
      (builtin fstPair)
    )
    (termbind
      (strict)
      (vardecl head (all a (type) (fun [ (con list) a ] a)))
      (builtin headList)
    )
    (termbind
      (strict)
      (vardecl ifThenElse (all a (type) (fun (con bool) (fun a (fun a a)))))
      (builtin ifThenElse)
    )
    (termbind
      (strict) (vardecl reconstructCaseError (con string)) (con string "PT1")
    )
    (termbind
      (strict)
      (vardecl snd (all a (type) (all b (type) (fun [ [ (con pair) a ] b ] b))))
      (builtin sndPair)
    )
    (termbind
      (strict)
      (vardecl tail (all a (type) (fun [ (con list) a ] [ (con list) a ])))
      (builtin tailList)
    )
    (termbind
      (strict)
      (vardecl trace (all a (type) (fun (con string) (fun a a))))
      (builtin trace)
    )
    (termbind (strict) (vardecl unitval (con unit)) (con unit ()))
    (termbind
      (strict)
      (vardecl
        unsafeDataAsConstr
        (fun
          (con data) [ [ (con pair) (con integer) ] [ (con list) (con data) ] ]
        )
      )
      (builtin unConstrData)
    )
    (datatypebind
      (datatype (tyvardecl Unit (type))  Unit_match (vardecl Unit Unit))
    )
    (termbind
      (strict)
      (vardecl
        fUnsafeFromDataTuple2_cunsafeFromBuiltinData
        (all
          a
          (type)
          (all
            b
            (type)
            (fun
              [ (lam a (type) (fun (con data) a)) a ]
              (fun
                [ (lam a (type) (fun (con data) a)) b ]
                (fun (con data) [ [ Tuple2 a ] b ])
              )
            )
          )
        )
      )
      (abs
        a
        (type)
        (abs
          b
          (type)
          (let
            (nonrec)
            (termbind
              (nonstrict)
              (vardecl x [ [ Tuple2 a ] b ])
              [
                { error [ [ Tuple2 a ] b ] }
                [
                  {
                    [
                      Unit_match
                      [ [ { trace Unit } reconstructCaseError ] Unit ]
                    ]
                    (con unit)
                  }
                  unitval
                ]
              ]
            )
            (lam
              dUnsafeFromData
              [ (lam a (type) (fun (con data) a)) a ]
              (lam
                dUnsafeFromData
                [ (lam a (type) (fun (con data) a)) b ]
                (lam
                  d
                  (con data)
                  (let
                    (nonrec)
                    (termbind
                      (nonstrict)
                      (vardecl
                        tup
                        [
                          [ (con pair) (con integer) ] [ (con list) (con data) ]
                        ]
                      )
                      [ unsafeDataAsConstr d ]
                    )
                    (termbind
                      (nonstrict)
                      (vardecl t [ (con list) (con data) ])
                      [
                        { { snd (con integer) } [ (con list) (con data) ] } tup
                      ]
                    )
                    (termbind
                      (nonstrict)
                      (vardecl x b)
                      [
                        dUnsafeFromData
                        [ { head (con data) } [ { tail (con data) } t ] ]
                      ]
                    )
                    (termbind
                      (nonstrict)
                      (vardecl x a)
                      [ dUnsafeFromData [ { head (con data) } t ] ]
                    )
                    (termbind
                      (nonstrict)
                      (vardecl x [ [ Tuple2 a ] b ])
                      [ [ { { Tuple2 a } b } x ] x ]
                    )
                    [
                      [
                        [
                          [
                            { ifThenElse (fun (con unit) [ [ Tuple2 a ] b ]) }
                            [
                              [
                                equalsInteger
                                [
                                  {
                                    { fst (con integer) }
                                    [ (con list) (con data) ]
                                  }
                                  tup
                                ]
                              ]
                              (con integer 0)
                            ]
                          ]
                          (lam ds (con unit) x)
                        ]
                        (lam ds (con unit) x)
                      ]
                      unitval
                    ]
                  )
                )
              )
            )
          )
        )
      )
    )
    (termbind
      (nonstrict)
      (vardecl
        fUnsafeFromDataTuple2
        (all
          a
          (type)
          (all
            b
            (type)
            (fun
              [ (lam a (type) (fun (con data) a)) a ]
              (fun
                [ (lam a (type) (fun (con data) a)) b ]
                [ (lam a (type) (fun (con data) a)) [ [ Tuple2 a ] b ] ]
              )
            )
          )
        )
      )
      fUnsafeFromDataTuple2_cunsafeFromBuiltinData
    )
    (termbind
      (strict)
      (vardecl unsafeDataAsI (fun (con data) (con integer)))
      (builtin unIData)
    )
    (termbind
      (nonstrict)
      (vardecl
        fUnsafeFromDataInteger
        [ (lam a (type) (fun (con data) a)) (con integer) ]
      )
      unsafeDataAsI
    )
    (termbind
      (nonstrict)
      (vardecl
        dUnsafeFromData
        [
          (lam a (type) (fun (con data) a))
          [ [ Tuple2 (con integer) ] (con integer) ]
        ]
      )
      [
        [
          { { fUnsafeFromDataTuple2 (con integer) } (con integer) }
          fUnsafeFromDataInteger
        ]
        fUnsafeFromDataInteger
      ]
    )
    (datatypebind
      (datatype
        (tyvardecl Maybe (fun (type) (type)))
        (tyvardecl a (type))
        Maybe_match
        (vardecl Just (fun a [ Maybe a ])) (vardecl Nothing [ Maybe a ])
      )
    )
    (termbind
      (strict)
      (vardecl
        fUnsafeFromDataMaybe_cunsafeFromBuiltinData
        (all
          a
          (type)
          (fun
            [ (lam a (type) (fun (con data) a)) a ] (fun (con data) [ Maybe a ])
          )
        )
      )
      (abs
        a
        (type)
        (let
          (nonrec)
          (termbind
            (nonstrict)
            (vardecl x [ Maybe a ])
            [
              { error [ Maybe a ] }
              [
                {
                  [
                    Unit_match [ [ { trace Unit } reconstructCaseError ] Unit ]
                  ]
                  (con unit)
                }
                unitval
              ]
            ]
          )
          (lam
            dUnsafeFromData
            [ (lam a (type) (fun (con data) a)) a ]
            (lam
              d
              (con data)
              (let
                (nonrec)
                (termbind
                  (nonstrict)
                  (vardecl
                    tup
                    [ [ (con pair) (con integer) ] [ (con list) (con data) ] ]
                  )
                  [ unsafeDataAsConstr d ]
                )
                (termbind
                  (nonstrict)
                  (vardecl index (con integer))
                  [ { { fst (con integer) } [ (con list) (con data) ] } tup ]
                )
                (termbind
                  (nonstrict)
                  (vardecl x [ Maybe a ])
                  [
                    [
                      [
                        [
                          { ifThenElse (fun (con unit) [ Maybe a ]) }
                          [ [ equalsInteger index ] (con integer 1) ]
                        ]
                        (lam ds (con unit) { Nothing a })
                      ]
                      (lam ds (con unit) x)
                    ]
                    unitval
                  ]
                )
                (termbind
                  (nonstrict)
                  (vardecl x a)
                  [
                    dUnsafeFromData
                    [
                      { head (con data) }
                      [
                        { { snd (con integer) } [ (con list) (con data) ] } tup
                      ]
                    ]
                  ]
                )
                (termbind (nonstrict) (vardecl x [ Maybe a ]) [ { Just a } x ])
                [
                  [
                    [
                      [
                        { ifThenElse (fun (con unit) [ Maybe a ]) }
                        [ [ equalsInteger index ] (con integer 0) ]
                      ]
                      (lam ds (con unit) x)
                    ]
                    (lam ds (con unit) x)
                  ]
                  unitval
                ]
              )
            )
          )
        )
      )
    )
    (termbind
      (nonstrict)
      (vardecl
        fUnsafeFromDataMaybe
        (all
          a
          (type)
          (fun
            [ (lam a (type) (fun (con data) a)) a ]
            [ (lam a (type) (fun (con data) a)) [ Maybe a ] ]
          )
        )
      )
      fUnsafeFromDataMaybe_cunsafeFromBuiltinData
    )
    (termbind
      (nonstrict)
      (vardecl
        dUnsafeFromData
        [
          (lam a (type) (fun (con data) a))
          [ Maybe [ [ Tuple2 (con integer) ] (con integer) ] ]
        ]
      )
      [
        { fUnsafeFromDataMaybe [ [ Tuple2 (con integer) ] (con integer) ] }
        dUnsafeFromData
      ]
    )
    (termbind
      (strict)
      (vardecl
        unsafeFromBuiltinData
        (all
          a
          (type)
          (fun [ (lam a (type) (fun (con data) a)) a ] (fun (con data) a))
        )
      )
      (abs a (type) (lam v [ (lam a (type) (fun (con data) a)) a ] v))
    )
    (lam
      ds
      (con data)
      [
        [
          {
            unsafeFromBuiltinData
            [ Maybe [ [ Tuple2 (con integer) ] (con integer) ] ]
          }
          dUnsafeFromData
        ]
        ds
      ]
    )
  )
)
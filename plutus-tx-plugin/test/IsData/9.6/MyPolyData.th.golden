instance (PlutusTx.IsData.Class.ToData a_0,
          PlutusTx.IsData.Class.ToData b_1) => PlutusTx.IsData.Class.ToData (Plugin.Data.Spec.MyPolyData a_0
                                                                                                         b_1)
    where {{-# INLINABLE PlutusTx.IsData.Class.toBuiltinData #-};
           PlutusTx.IsData.Class.toBuiltinData (Plugin.Data.Spec.Poly1 arg_2
                                                                       arg_3) = PlutusTx.Builtins.Internal.mkConstr (0 :: GHC.Num.Integer.Integer) (PlutusTx.Builtins.Internal.mkCons (PlutusTx.IsData.Class.toBuiltinData arg_2) (PlutusTx.Builtins.Internal.mkCons (PlutusTx.IsData.Class.toBuiltinData arg_3) (PlutusTx.Builtins.Internal.mkNilData PlutusTx.Builtins.Internal.unitval)))
           PlutusTx.IsData.Class.toBuiltinData (Plugin.Data.Spec.Poly2 arg_4) = PlutusTx.Builtins.Internal.mkConstr (1 :: GHC.Num.Integer.Integer) (PlutusTx.Builtins.Internal.mkCons (PlutusTx.IsData.Class.toBuiltinData arg_4) (PlutusTx.Builtins.Internal.mkNilData PlutusTx.Builtins.Internal.unitval))}
instance (PlutusTx.IsData.Class.FromData a_0,
          PlutusTx.IsData.Class.FromData b_1) => PlutusTx.IsData.Class.FromData (Plugin.Data.Spec.MyPolyData a_0
                                                                                                             b_1)
    where {{-# INLINABLE PlutusTx.IsData.Class.fromBuiltinData #-};
           PlutusTx.IsData.Class.fromBuiltinData d_5 = let constrFun_6 (!index_7) (!args_8) = case (index_7,
                                                                                                    args_8) of
                                                                                              {(((PlutusTx.Eq.==) (0 :: GHC.Num.Integer.Integer) -> GHC.Types.True),
                                                                                                (PlutusTx.Builtins.uncons -> GHC.Maybe.Just ((PlutusTx.IsData.Class.fromBuiltinData -> GHC.Maybe.Just arg_9),
                                                                                                                                             (PlutusTx.Builtins.headMaybe -> GHC.Maybe.Just (PlutusTx.IsData.Class.fromBuiltinData -> GHC.Maybe.Just arg_10))))) -> GHC.Maybe.Just (Plugin.Data.Spec.Poly1 arg_9 arg_10);
                                                                                               (((PlutusTx.Eq.==) (1 :: GHC.Num.Integer.Integer) -> GHC.Types.True),
                                                                                                (PlutusTx.Builtins.headMaybe -> GHC.Maybe.Just (PlutusTx.IsData.Class.fromBuiltinData -> GHC.Maybe.Just arg_11))) -> GHC.Maybe.Just (Plugin.Data.Spec.Poly2 arg_11);
                                                                                               _ -> GHC.Maybe.Nothing}
                                                        in PlutusTx.Builtins.matchData' d_5 constrFun_6 (GHC.Base.const GHC.Maybe.Nothing) (GHC.Base.const GHC.Maybe.Nothing) (GHC.Base.const GHC.Maybe.Nothing) (GHC.Base.const GHC.Maybe.Nothing)}
instance (PlutusTx.IsData.Class.UnsafeFromData a_0,
          PlutusTx.IsData.Class.UnsafeFromData b_1) => PlutusTx.IsData.Class.UnsafeFromData (Plugin.Data.Spec.MyPolyData a_0
                                                                                                                         b_1)
    where {{-# INLINABLE PlutusTx.IsData.Class.unsafeFromBuiltinData #-};
           PlutusTx.IsData.Class.unsafeFromBuiltinData d_12 = PlutusTx.Builtins.Internal.casePair (PlutusTx.Builtins.Internal.unsafeDataAsConstr d_12) GHC.Base.$ (\index_13 args_14 -> PlutusTx.Builtins.Internal.caseInteger index_13 [\case
                                                                                                                                                                                                                                         {(PlutusTx.AsData.Internal.wrapUnsafeUncons -> ((PlutusTx.IsData.Class.unsafeFromBuiltinData -> arg_15),
                                                                                                                                                                                                                                                                                         (PlutusTx.Builtins.Internal.head -> (PlutusTx.IsData.Class.unsafeFromBuiltinData -> arg_16)))) -> Plugin.Data.Spec.Poly1 arg_15 arg_16;
                                                                                                                                                                                                                                          _ -> PlutusTx.Trace.traceError PlutusTx.ErrorCodes.reconstructCaseError},
                                                                                                                                                                                                                                         \case
                                                                                                                                                                                                                                         {(PlutusTx.Builtins.Internal.head -> (PlutusTx.IsData.Class.unsafeFromBuiltinData -> arg_17)) -> Plugin.Data.Spec.Poly2 arg_17;
                                                                                                                                                                                                                                          _ -> PlutusTx.Trace.traceError PlutusTx.ErrorCodes.reconstructCaseError}] args_14)}
let
  !mkI : integer -> data = iData
  ~`$fToDataInteger_$ctoBuiltinData` : integer -> data
    = \(i : integer) -> let !i : integer = i in mkI i
  ~`$fToDataInteger` : (\a -> a -> data) integer
    = `$fToDataInteger_$ctoBuiltinData`
  !equalsInteger : integer -> integer -> bool = equalsInteger
  !ifThenElse : all a. bool -> a -> a -> a = ifThenElse
  data Bool | Bool_match where
    True : Bool
    False : Bool
  ~equalsInteger : integer -> integer -> Bool
    = \(x : integer) ->
        let
          !x : integer = x
        in
        \(y : integer) ->
          let
            !y : integer = y
            !b : bool = equalsInteger x y
          in
          ifThenElse {Bool} b True False
  ~`$fEqInteger` : (\a -> a -> a -> Bool) integer = equalsInteger
  !unsafeDataAsI : data -> integer = unIData
  ~`$fUnsafeFromDataInteger` : (\a -> data -> a) integer = unsafeDataAsI
  data (Tuple3 :: * -> * -> * -> *) a b c | Tuple3_match where
    Tuple3 : a -> b -> c -> Tuple3 a b c
  ~`==` : all a. (\a -> a -> a -> Bool) a -> a -> a -> Bool
    = /\a -> \(v : (\a -> a -> a -> Bool) a) -> v
  !fst : all a b. pair a b -> a = fstPair
  !head : all a. list a -> a = headList
  !snd : all a b. pair a b -> b = sndPair
  !tail : all a. list a -> list a = tailList
  !unsafeDataAsConstr : data -> pair integer (list data) = unConstrData
  ~unsafeFromBuiltinData : all a. (\a -> data -> a) a -> data -> a
    = /\a -> \(v : (\a -> data -> a) a) -> v
  ~matchOnRecordConstructor :
     all a. (\a -> data -> a) a -> (\a -> data) a -> Tuple3 Bool a integer
    = /\a ->
        \(`$dUnsafeFromData` : (\a -> data -> a) a) (ds : (\a -> data) a) ->
          let
            !builtinData : data = ds
            !asConstr : pair integer (list data)
              = unsafeDataAsConstr builtinData
            !constrIx : integer = fst {integer} {list data} asConstr
            !constrArgs : list data = snd {integer} {list data} asConstr
            !field : a
              = unsafeFromBuiltinData
                  {a}
                  `$dUnsafeFromData`
                  (head {data} constrArgs)
            !rest : list data = tail {data} constrArgs
            !field : integer
              = unsafeFromBuiltinData
                  {integer}
                  `$fUnsafeFromDataInteger`
                  (head {data} rest)
          in
          Tuple3
            {Bool}
            {a}
            {integer}
            (`==` {integer} `$fEqInteger` constrIx 0)
            field
            field
  ~`$mRecordConstructor` :
     all r a.
       (\a -> a -> data) a ->
       (\a -> data -> a) a ->
       (\a -> data) a ->
       (a -> integer -> r) ->
       (unit -> r) ->
       r
    = /\r a ->
        \(`$dToData` : (\a -> a -> data) a)
         (`$dUnsafeFromData` : (\a -> data -> a) a)
         (scrut : (\a -> data) a) ->
          let
            !nt : data = scrut
          in
          \(cont : a -> integer -> r) ->
            let
              !cont : a -> integer -> r = cont
            in
            \(fail : unit -> r) ->
              let
                !fail : unit -> r = fail
              in
              Tuple3_match
                {Bool}
                {a}
                {integer}
                (matchOnRecordConstructor {a} `$dUnsafeFromData` nt)
                {r}
                (\(ds : Bool) (x : a) (y : integer) ->
                   Bool_match
                     ds
                     {all dead. r}
                     (/\dead -> cont x y)
                     (/\dead -> fail ())
                     {all dead. dead})
  ~x : all a. (\a -> a -> data) a -> (\a -> data -> a) a -> (\a -> data) a -> a
    = /\a ->
        \(`$dToData` : (\a -> a -> data) a)
         (`$dUnsafeFromData` : (\a -> data -> a) a)
         (ds : (\a -> data) a) ->
          let
            !nt : data = ds
          in
          `$mRecordConstructor`
            {a}
            {a}
            `$dToData`
            `$dUnsafeFromData`
            nt
            (\(ds : a) (ds : integer) -> ds)
            (\(void : unit) -> (/\e -> error {e}) {a})
in
\(r : (\a -> data) integer) ->
  let
    !nt : data = r
  in
  x {integer} `$fToDataInteger` `$fUnsafeFromDataInteger` nt
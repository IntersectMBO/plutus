instance PlutusTx.IsData.Class.ToData Plugin.Data.Spec.MyMonoData
    where {{-# INLINABLE PlutusTx.IsData.Class.toBuiltinData #-};
           PlutusTx.IsData.Class.toBuiltinData (Plugin.Data.Spec.Mono1 arg_0
                                                                       arg_1) = PlutusTx.Builtins.Internal.mkConstr (0 :: GHC.Num.Integer.Integer) (PlutusTx.Builtins.Internal.mkCons (PlutusTx.IsData.Class.toBuiltinData arg_0) (PlutusTx.Builtins.Internal.mkCons (PlutusTx.IsData.Class.toBuiltinData arg_1) (PlutusTx.Builtins.Internal.mkNilData PlutusTx.Builtins.Internal.unitval)))
           PlutusTx.IsData.Class.toBuiltinData (Plugin.Data.Spec.Mono2 arg_2) = PlutusTx.Builtins.Internal.mkConstr (1 :: GHC.Num.Integer.Integer) (PlutusTx.Builtins.Internal.mkCons (PlutusTx.IsData.Class.toBuiltinData arg_2) (PlutusTx.Builtins.Internal.mkNilData PlutusTx.Builtins.Internal.unitval))
           PlutusTx.IsData.Class.toBuiltinData (Plugin.Data.Spec.Mono3 arg_3) = PlutusTx.Builtins.Internal.mkConstr (2 :: GHC.Num.Integer.Integer) (PlutusTx.Builtins.Internal.mkCons (PlutusTx.IsData.Class.toBuiltinData arg_3) (PlutusTx.Builtins.Internal.mkNilData PlutusTx.Builtins.Internal.unitval))}
instance PlutusTx.IsData.Class.FromData Plugin.Data.Spec.MyMonoData
    where {{-# INLINABLE PlutusTx.IsData.Class.fromBuiltinData #-};
           PlutusTx.IsData.Class.fromBuiltinData d_4 = let constrFun_5 (!index_6) (!args_7) = case (index_6,
                                                                                                    args_7) of
                                                                                              {(((PlutusTx.Eq.==) (0 :: GHC.Num.Integer.Integer) -> GHC.Types.True),
                                                                                                (PlutusTx.Builtins.uncons -> GHC.Maybe.Just ((PlutusTx.IsData.Class.fromBuiltinData -> GHC.Maybe.Just arg_8),
                                                                                                                                             (PlutusTx.Builtins.headMaybe -> GHC.Maybe.Just (PlutusTx.IsData.Class.fromBuiltinData -> GHC.Maybe.Just arg_9))))) -> GHC.Maybe.Just (Plugin.Data.Spec.Mono1 arg_8 arg_9);
                                                                                               (((PlutusTx.Eq.==) (1 :: GHC.Num.Integer.Integer) -> GHC.Types.True),
                                                                                                (PlutusTx.Builtins.headMaybe -> GHC.Maybe.Just (PlutusTx.IsData.Class.fromBuiltinData -> GHC.Maybe.Just arg_10))) -> GHC.Maybe.Just (Plugin.Data.Spec.Mono2 arg_10);
                                                                                               (((PlutusTx.Eq.==) (2 :: GHC.Num.Integer.Integer) -> GHC.Types.True),
                                                                                                (PlutusTx.Builtins.headMaybe -> GHC.Maybe.Just (PlutusTx.IsData.Class.fromBuiltinData -> GHC.Maybe.Just arg_11))) -> GHC.Maybe.Just (Plugin.Data.Spec.Mono3 arg_11);
                                                                                               _ -> GHC.Maybe.Nothing}
                                                        in PlutusTx.Builtins.matchData' d_4 constrFun_5 (GHC.Base.const GHC.Maybe.Nothing) (GHC.Base.const GHC.Maybe.Nothing) (GHC.Base.const GHC.Maybe.Nothing) (GHC.Base.const GHC.Maybe.Nothing)}
instance PlutusTx.IsData.Class.UnsafeFromData Plugin.Data.Spec.MyMonoData
    where {{-# INLINABLE PlutusTx.IsData.Class.unsafeFromBuiltinData #-};
           PlutusTx.IsData.Class.unsafeFromBuiltinData d_12 = PlutusTx.Builtins.Internal.caseDataConstr d_12 [\[arg_13,
                                                                                                                arg_14] -> Plugin.Data.Spec.Mono1 (PlutusTx.IsData.Class.unsafeFromBuiltinData arg_13 :: GHC.Num.Integer.Integer) (PlutusTx.IsData.Class.unsafeFromBuiltinData arg_14 :: GHC.Num.Integer.Integer) :: Plugin.Data.Spec.MyMonoData,
                                                                                                              \[arg_15] -> Plugin.Data.Spec.Mono2 (PlutusTx.IsData.Class.unsafeFromBuiltinData arg_15 :: GHC.Num.Integer.Integer) :: Plugin.Data.Spec.MyMonoData,
                                                                                                              \[arg_16] -> Plugin.Data.Spec.Mono3 (PlutusTx.IsData.Class.unsafeFromBuiltinData arg_16 :: GHC.Num.Integer.Integer) :: Plugin.Data.Spec.MyMonoData]}
let
  data (Tuple2 :: * -> * -> *) a b | Tuple2_match where
    Tuple2 : a -> b -> Tuple2 a b
  data Bool | Bool_match where
    True : Bool
    False : Bool
  !equalsInteger : integer -> integer -> bool = equalsInteger
  !fst : all a b. pair a b -> a = fstPair
  !head : all a. list a -> a = headList
  !ifThenElse : all a. bool -> a -> a -> a = ifThenElse
  ~reconstructCaseError : string = "PT1"
  !snd : all a b. pair a b -> b = sndPair
  !tail : all a. list a -> list a = tailList
  data Unit | Unit_match where
    Unit : Unit
  !error : all a. unit -> a = /\a -> \(thunk : unit) -> error {a}
  !trace : all a. string -> a -> a = trace
  !unitval : unit = ()
  ~traceError : all a. string -> a
    = /\a ->
        \(str : string) ->
          let
            !str : string = str
            !x : Unit = trace {Unit} str Unit
          in
          error {a} unitval
  !unsafeDataAsConstr : data -> pair integer (list data) = unConstrData
  ~`$fUnsafeFromDataTuple2_$cunsafeFromBuiltinData` :
     all a b. (\a -> data -> a) a -> (\a -> data -> a) b -> data -> Tuple2 a b
    = /\a b ->
        \(`$dUnsafeFromData` : (\a -> data -> a) a)
         (`$dUnsafeFromData` : (\a -> data -> a) b)
         (d : data) ->
          let
            !d : data = d
            !tup : pair integer (list data) = unsafeDataAsConstr d
            !index : integer = fst {integer} {list data} tup
            !args : list data = snd {integer} {list data} tup
            !b : bool = equalsInteger 0 index
          in
          Bool_match
            (ifThenElse {Bool} b True False)
            {all dead. Tuple2 a b}
            (/\dead ->
               Tuple2
                 {a}
                 {b}
                 (`$dUnsafeFromData` (head {data} args))
                 (`$dUnsafeFromData` (head {data} (tail {data} args))))
            (/\dead -> traceError {Tuple2 a b} reconstructCaseError)
            {all dead. dead}
  ~`$fUnsafeFromDataTuple2` :
     all a b.
       (\a -> data -> a) a ->
       (\a -> data -> a) b ->
       (\a -> data -> a) (Tuple2 a b)
    = `$fUnsafeFromDataTuple2_$cunsafeFromBuiltinData`
  !unsafeDataAsI : data -> integer = unIData
  ~`$fUnsafeFromDataInteger` : (\a -> data -> a) integer = unsafeDataAsI
  ~`$dUnsafeFromData` : (\a -> data -> a) (Tuple2 integer integer)
    = `$fUnsafeFromDataTuple2`
        {integer}
        {integer}
        `$fUnsafeFromDataInteger`
        `$fUnsafeFromDataInteger`
  data (Maybe :: * -> *) a | Maybe_match where
    Just : a -> Maybe a
    Nothing : Maybe a
  ~`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData` :
     all a. (\a -> data -> a) a -> data -> Maybe a
    = /\a ->
        \(`$dUnsafeFromData` : (\a -> data -> a) a) (d : data) ->
          let
            !d : data = d
            !tup : pair integer (list data) = unsafeDataAsConstr d
            !index : integer = fst {integer} {list data} tup
            !args : list data = snd {integer} {list data} tup
            !b : bool = equalsInteger 1 index
          in
          Bool_match
            (ifThenElse {Bool} b True False)
            {all dead. Maybe a}
            (/\dead -> Nothing {a})
            (/\dead ->
               let
                 !b : bool = equalsInteger 0 index
               in
               Bool_match
                 (ifThenElse {Bool} b True False)
                 {all dead. Maybe a}
                 (/\dead -> Just {a} (`$dUnsafeFromData` (head {data} args)))
                 (/\dead -> traceError {Maybe a} reconstructCaseError)
                 {all dead. dead})
            {all dead. dead}
  ~`$fUnsafeFromDataMaybe` :
     all a. (\a -> data -> a) a -> (\a -> data -> a) (Maybe a)
    = `$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
  ~`$dUnsafeFromData` : (\a -> data -> a) (Maybe (Tuple2 integer integer))
    = `$fUnsafeFromDataMaybe` {Tuple2 integer integer} `$dUnsafeFromData`
  ~unsafeFromBuiltinData : all a. (\a -> data -> a) a -> data -> a
    = /\a -> \(v : (\a -> data -> a) a) -> v
in
\(ds : data) ->
  let
    !ds : data = ds
  in
  unsafeFromBuiltinData {Maybe (Tuple2 integer integer)} `$dUnsafeFromData` ds
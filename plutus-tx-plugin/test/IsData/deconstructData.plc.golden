(program
  (let
    (nonrec)
    (datatypebind
      (datatype
        (tyvardecl Tuple2 (fun (type) (fun (type) (type))))
        (tyvardecl a (type)) (tyvardecl b (type))
        Tuple2_match
        (vardecl Tuple2 (fun a (fun b [ [ Tuple2 a ] b ])))
      )
    )
    (termbind
      (strict)
      (vardecl
        chooseData
        (all
          a (type) (fun (con data) (fun a (fun a (fun a (fun a (fun a a))))))
        )
      )
      (builtin chooseData)
    )
    (termbind
      (strict)
      (vardecl
        chooseList
        (all a (type) (all b (type) (fun [ (con list) a ] (fun b (fun b b)))))
      )
      (builtin chooseList)
    )
    (termbind
      (strict)
      (vardecl equalsInteger (fun (con integer) (fun (con integer) (con bool))))
      (builtin equalsInteger)
    )
    (datatypebind
      (datatype (tyvardecl Unit (type))  Unit_match (vardecl Unit Unit))
    )
    (datatypebind
      (datatype
        (tyvardecl Maybe (fun (type) (type)))
        (tyvardecl a (type))
        Maybe_match
        (vardecl Just (fun a [ Maybe a ])) (vardecl Nothing [ Maybe a ])
      )
    )
    (termbind
      (strict)
      (vardecl fst (all a (type) (all b (type) (fun [ [ (con pair) a ] b ] a))))
      (builtin fstPair)
    )
    (termbind
      (strict)
      (vardecl head (all a (type) (fun [ (con list) a ] a)))
      (builtin headList)
    )
    (termbind
      (strict)
      (vardecl ifThenElse (all a (type) (fun (con bool) (fun a (fun a a)))))
      (builtin ifThenElse)
    )
    (termbind
      (strict)
      (vardecl snd (all a (type) (all b (type) (fun [ [ (con pair) a ] b ] b))))
      (builtin sndPair)
    )
    (termbind
      (strict)
      (vardecl tail (all a (type) (fun [ (con list) a ] [ (con list) a ])))
      (builtin tailList)
    )
    (termbind (strict) (vardecl unitval (con unit)) (con unit ()))
    (termbind
      (strict)
      (vardecl
        unsafeDataAsConstr
        (fun
          (con data) [ [ (con pair) (con integer) ] [ (con list) (con data) ] ]
        )
      )
      (builtin unConstrData)
    )
    (termbind
      (strict)
      (vardecl
        fFromDataTuple2_cfromBuiltinData
        (all
          a
          (type)
          (all
            b
            (type)
            (fun
              [ (lam a (type) (fun (con data) [ Maybe a ])) a ]
              (fun
                [ (lam a (type) (fun (con data) [ Maybe a ])) b ]
                (fun (con data) [ Maybe [ [ Tuple2 a ] b ] ])
              )
            )
          )
        )
      )
      (abs
        a
        (type)
        (abs
          b
          (type)
          (lam
            dFromData
            [ (lam a (type) (fun (con data) [ Maybe a ])) a ]
            (lam
              dFromData
              [ (lam a (type) (fun (con data) [ Maybe a ])) b ]
              (lam
                d
                (con data)
                (let
                  (nonrec)
                  (termbind
                    (nonstrict)
                    (vardecl
                      tup
                      [ [ (con pair) (con integer) ] [ (con list) (con data) ] ]
                    )
                    [ unsafeDataAsConstr d ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl l [ (con list) (con data) ])
                    [ { { snd (con integer) } [ (con list) (con data) ] } tup ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl l [ (con list) (con data) ])
                    [ { tail (con data) } l ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl nilCase [ Maybe [ [ Tuple2 a ] b ] ])
                    {
                      [
                        [
                          {
                            [
                              { Maybe_match a }
                              [ dFromData [ { head (con data) } l ] ]
                            ]
                            (all dead (type) [ Maybe [ [ Tuple2 a ] b ] ])
                          }
                          (lam
                            ipv
                            a
                            (abs
                              dead
                              (type)
                              {
                                [
                                  [
                                    {
                                      [
                                        { Maybe_match b }
                                        [ dFromData [ { head (con data) } l ] ]
                                      ]
                                      (all
                                        dead (type) [ Maybe [ [ Tuple2 a ] b ] ]
                                      )
                                    }
                                    (lam
                                      ipv
                                      b
                                      (abs
                                        dead
                                        (type)
                                        [
                                          { Just [ [ Tuple2 a ] b ] }
                                          [ [ { { Tuple2 a } b } ipv ] ipv ]
                                        ]
                                      )
                                    )
                                  ]
                                  (abs
                                    dead (type) { Nothing [ [ Tuple2 a ] b ] }
                                  )
                                ]
                                (all dead (type) dead)
                              }
                            )
                          )
                        ]
                        (abs dead (type) { Nothing [ [ Tuple2 a ] b ] })
                      ]
                      (all dead (type) dead)
                    }
                  )
                  (termbind
                    (nonstrict)
                    (vardecl lvl [ Maybe [ [ Tuple2 a ] b ] ])
                    [
                      [
                        [
                          [
                            {
                              { chooseList (con data) }
                              (fun Unit [ Maybe [ [ Tuple2 a ] b ] ])
                            }
                            [ { tail (con data) } l ]
                          ]
                          (lam ds Unit nilCase)
                        ]
                        (lam ds Unit { Nothing [ [ Tuple2 a ] b ] })
                      ]
                      Unit
                    ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl lvl [ Maybe [ [ Tuple2 a ] b ] ])
                    [
                      [
                        [
                          [
                            {
                              { chooseList (con data) }
                              (fun Unit [ Maybe [ [ Tuple2 a ] b ] ])
                            }
                            l
                          ]
                          (lam ds Unit { Nothing [ [ Tuple2 a ] b ] })
                        ]
                        (lam ds Unit lvl)
                      ]
                      Unit
                    ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl x [ Maybe [ [ Tuple2 a ] b ] ])
                    [
                      [
                        [
                          [
                            {
                              { chooseList (con data) }
                              (fun Unit [ Maybe [ [ Tuple2 a ] b ] ])
                            }
                            l
                          ]
                          (lam ds Unit { Nothing [ [ Tuple2 a ] b ] })
                        ]
                        (lam ds Unit lvl)
                      ]
                      Unit
                    ]
                  )
                  [
                    [
                      [
                        [
                          [
                            [
                              [
                                {
                                  chooseData
                                  (fun Unit [ Maybe [ [ Tuple2 a ] b ] ])
                                }
                                d
                              ]
                              (lam
                                ds
                                Unit
                                [
                                  [
                                    [
                                      [
                                        {
                                          ifThenElse
                                          (fun
                                            (con unit)
                                            [ Maybe [ [ Tuple2 a ] b ] ]
                                          )
                                        }
                                        [
                                          [
                                            equalsInteger
                                            [
                                              {
                                                { fst (con integer) }
                                                [ (con list) (con data) ]
                                              }
                                              tup
                                            ]
                                          ]
                                          (con integer 0)
                                        ]
                                      ]
                                      (lam ds (con unit) x)
                                    ]
                                    (lam
                                      ds
                                      (con unit)
                                      { Nothing [ [ Tuple2 a ] b ] }
                                    )
                                  ]
                                  unitval
                                ]
                              )
                            ]
                            (lam ds Unit { Nothing [ [ Tuple2 a ] b ] })
                          ]
                          (lam ds Unit { Nothing [ [ Tuple2 a ] b ] })
                        ]
                        (lam ds Unit { Nothing [ [ Tuple2 a ] b ] })
                      ]
                      (lam ds Unit { Nothing [ [ Tuple2 a ] b ] })
                    ]
                    Unit
                  ]
                )
              )
            )
          )
        )
      )
    )
    (termbind
      (nonstrict)
      (vardecl
        fFromDataTuple2
        (all
          a
          (type)
          (all
            b
            (type)
            (fun
              [ (lam a (type) (fun (con data) [ Maybe a ])) a ]
              (fun
                [ (lam a (type) (fun (con data) [ Maybe a ])) b ]
                [
                  (lam a (type) (fun (con data) [ Maybe a ])) [ [ Tuple2 a ] b ]
                ]
              )
            )
          )
        )
      )
      fFromDataTuple2_cfromBuiltinData
    )
    (termbind
      (strict)
      (vardecl unsafeDataAsI (fun (con data) (con integer)))
      (builtin unIData)
    )
    (termbind
      (strict)
      (vardecl
        fFromDataInteger_cfromBuiltinData
        (fun (con data) [ Maybe (con integer) ])
      )
      (lam
        d
        (con data)
        [
          [
            [
              [
                [
                  [
                    [ { chooseData (fun Unit [ Maybe (con integer) ]) } d ]
                    (lam ds Unit { Nothing (con integer) })
                  ]
                  (lam ds Unit { Nothing (con integer) })
                ]
                (lam ds Unit { Nothing (con integer) })
              ]
              (lam ds Unit [ { Just (con integer) } [ unsafeDataAsI d ] ])
            ]
            (lam ds Unit { Nothing (con integer) })
          ]
          Unit
        ]
      )
    )
    (termbind
      (nonstrict)
      (vardecl
        fFromDataInteger
        [ (lam a (type) (fun (con data) [ Maybe a ])) (con integer) ]
      )
      fFromDataInteger_cfromBuiltinData
    )
    (termbind
      (nonstrict)
      (vardecl
        dFromData
        [
          (lam a (type) (fun (con data) [ Maybe a ]))
          [ [ Tuple2 (con integer) ] (con integer) ]
        ]
      )
      [
        [ { { fFromDataTuple2 (con integer) } (con integer) } fFromDataInteger ]
        fFromDataInteger
      ]
    )
    (termbind
      (strict)
      (vardecl
        fromBuiltinData
        (all
          a
          (type)
          (fun
            [ (lam a (type) (fun (con data) [ Maybe a ])) a ]
            (fun (con data) [ Maybe a ])
          )
        )
      )
      (abs a (type) (lam v [ (lam a (type) (fun (con data) [ Maybe a ])) a ] v))
    )
    (lam
      ds
      (con data)
      [
        [
          { fromBuiltinData [ [ Tuple2 (con integer) ] (con integer) ] }
          dFromData
        ]
        ds
      ]
    )
  )
)
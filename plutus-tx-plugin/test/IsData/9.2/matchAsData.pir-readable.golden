let
  data (Maybe :: * -> *) a | Maybe_match where
    Just : a -> Maybe a
    Nothing : Maybe a
  ~defaultBody : Maybe integer = (/\e -> error {e}) {Maybe integer}
  data Unit | Unit_match where
    Unit : Unit
  !error : all a. unit -> a = /\a -> \(thunk : unit) -> error {a}
  ~reconstructCaseError : string = "PT1"
  !trace : all a. string -> a -> a = trace
  !unitval : unit = ()
  ~x : Unit
    = let
      !str : string = reconstructCaseError
      !x : Unit = trace {Unit} str Unit
    in
    error {Unit} unitval
  !equalsInteger : integer -> integer -> bool = equalsInteger
  !ifThenElse : all a. bool -> a -> a -> a = ifThenElse
  !fst : all a b. pair a b -> a = fstPair
  !unsafeDataAsConstr : data -> pair integer (list data) = unConstrData
  ~`$fUnsafeFromDataUnit_$cunsafeFromBuiltinData` : data -> Unit
    = \(d : data) ->
        let
          !d : data = d
          !tup : pair integer (list data) = unsafeDataAsConstr d
          !index : integer = fst {integer} {list data} tup
        in
        ifThenElse
          {unit -> Unit}
          (equalsInteger index 0)
          (\(ds : unit) -> Unit)
          (\(ds : unit) -> x)
          unitval
  ~`$fUnsafeFromDataUnit` : (\a -> data -> a) Unit
    = `$fUnsafeFromDataUnit_$cunsafeFromBuiltinData`
  data Bool | Bool_match where
    True : Bool
    False : Bool
  ~equalsInteger : integer -> integer -> Bool
    = \(x : integer) (y : integer) ->
        let
          !x : integer = x
          !y : integer = y
          !b : bool = equalsInteger x y
        in
        ifThenElse {Bool} b True False
  ~`$fEqInteger` : (\a -> a -> a -> Bool) integer = equalsInteger
  ~`==` : all a. (\a -> a -> a -> Bool) a -> a -> a -> Bool
    = /\a -> \(v : (\a -> a -> a -> Bool) a) -> v
  !chooseList : all a b. list a -> b -> b -> b = chooseList
  !head : all a. list a -> a = headList
  !tail : all a. list a -> list a = tailList
in
letrec
  data (List :: * -> *) a | Nil_match where
    Nil : List a
    Cons : a -> List a -> List a
in
let
  ~`$fFromBuiltinBuiltinListNil_$cfromBuiltin` :
     all arep a. (\arep a -> arep -> a) arep a -> list arep -> List a
    = /\arep a ->
        \(`$dFromBuiltin` : (\arep a -> arep -> a) arep a) ->
          letrec
            ~go : list arep -> List a
              = \(l : list arep) ->
                  let
                    !l : list arep = l
                  in
                  chooseList
                    {arep}
                    {unit -> List a}
                    l
                    (\(ds : unit) -> Nil {a})
                    (\(ds : unit) ->
                       Cons
                         {a}
                         (`$dFromBuiltin` (head {arep} l))
                         (go (tail {arep} l)))
                    unitval
          in
          \(eta : list arep) -> go eta
  data (Tuple2 :: * -> * -> *) a b | Tuple2_match where
    Tuple2 : a -> b -> Tuple2 a b
  ~id : all a. a -> a = /\a -> \(x : a) -> x
  !snd : all a b. pair a b -> b = sndPair
  ~unsafeDataAsConstr : data -> Tuple2 integer (List data)
    = \(d : data) ->
        let
          !d : data = d
          !p : pair integer (list data) = unsafeDataAsConstr d
        in
        Tuple2
          {integer}
          {List data}
          (fst {integer} {list data} p)
          (let
            !a : list data = snd {integer} {list data} p
          in
          `$fFromBuiltinBuiltinListNil_$cfromBuiltin`
            {data}
            {data}
            (id {data})
            a)
  ~unsafeFromBuiltinData : all a. (\a -> data -> a) a -> data -> a
    = /\a -> \(v : (\a -> data -> a) a) -> v
  ~`$mFirstC` : all r. data -> (Unit -> r) -> (unit -> r) -> r
    = /\r ->
        \(scrut : data) (cont : Unit -> r) (fail : unit -> r) ->
          let
            !nt : data = scrut
            !cont : Unit -> r = cont
            !fail : unit -> r = fail
            ~fail : unit -> r = \(ds : unit) -> fail ()
          in
          Tuple2_match
            {integer}
            {List data}
            (unsafeDataAsConstr nt)
            {r}
            (\(ds : integer) (ds : List data) ->
               Bool_match
                 (`==` {integer} `$fEqInteger` 0 ds)
                 {all dead. r}
                 (/\dead ->
                    Nil_match
                      {data}
                      ds
                      {all dead. r}
                      (/\dead -> fail ())
                      (\(ds : data) (ds : List data) ->
                         /\dead ->
                           Nil_match
                             {data}
                             ds
                             {all dead. r}
                             (/\dead ->
                                cont
                                  (unsafeFromBuiltinData
                                     {Unit}
                                     `$fUnsafeFromDataUnit`
                                     ds))
                             (\(ipv : data) (ipv : List data) ->
                                /\dead -> fail ())
                             {all dead. dead})
                      {all dead. dead})
                 (/\dead -> fail ())
                 {all dead. dead})
  !unsafeDataAsI : data -> integer = unIData
  ~`$fUnsafeFromDataInteger` : (\a -> data -> a) integer = unsafeDataAsI
  ~`$mSecondC` : all r. data -> (integer -> r) -> (unit -> r) -> r
    = /\r ->
        \(scrut : data) (cont : integer -> r) (fail : unit -> r) ->
          let
            !nt : data = scrut
            !cont : integer -> r = cont
            !fail : unit -> r = fail
            ~fail : unit -> r = \(ds : unit) -> fail ()
          in
          Tuple2_match
            {integer}
            {List data}
            (unsafeDataAsConstr nt)
            {r}
            (\(ds : integer) (ds : List data) ->
               Bool_match
                 (`==` {integer} `$fEqInteger` 1 ds)
                 {all dead. r}
                 (/\dead ->
                    Nil_match
                      {data}
                      ds
                      {all dead. r}
                      (/\dead -> fail ())
                      (\(ds : data) (ds : List data) ->
                         /\dead ->
                           Nil_match
                             {data}
                             ds
                             {all dead. r}
                             (/\dead ->
                                cont
                                  (unsafeFromBuiltinData
                                     {integer}
                                     `$fUnsafeFromDataInteger`
                                     ds))
                             (\(ipv : data) (ipv : List data) ->
                                /\dead -> fail ())
                             {all dead. dead})
                      {all dead. dead})
                 (/\dead -> fail ())
                 {all dead. dead})
in
\(ds : data) ->
  let
    !nt : data = ds
  in
  `$mFirstC`
    {Maybe integer}
    nt
    (\(ds : Unit) -> Nothing {integer})
    (\(void : unit) ->
       `$mSecondC`
         {Maybe integer}
         nt
         (\(i : integer) -> Just {integer} i)
         (\(void : unit) ->
            Unit_match ((/\e -> error {e}) {Unit}) {Maybe integer} defaultBody))
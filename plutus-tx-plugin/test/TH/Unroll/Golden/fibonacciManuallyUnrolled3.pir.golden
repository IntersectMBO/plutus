let
  data Bool | Bool_match where
    True : Bool
    False : Bool
in
letrec
  !fibonacciManuallyUnrolled : integer -> integer
    = \(n : integer) ->
        let
          !`$j` : integer -> integer
            = \(x : integer) ->
                let
                  !n' : integer = subtractInteger n 2
                  !`$j` : integer -> integer
                    = \(x : integer) ->
                        let
                          !n'' : integer = subtractInteger n' 2
                          !`$j` : integer -> integer
                            = \(x : integer) ->
                                let
                                  !n''' : integer = subtractInteger n'' 2
                                in
                                Bool_match
                                  (Bool_match
                                     (ifThenElse
                                        {Bool}
                                        (equalsInteger 0 n''')
                                        True
                                        False)
                                     {all dead. Bool}
                                     (/\dead -> True)
                                     (/\dead ->
                                        ifThenElse
                                          {Bool}
                                          (equalsInteger 1 n''')
                                          True
                                          False)
                                     {all dead. dead})
                                  {all dead. integer}
                                  (/\dead ->
                                     addInteger
                                       x
                                       (addInteger x (addInteger x n''')))
                                  (/\dead ->
                                     addInteger
                                       x
                                       (addInteger
                                          x
                                          (addInteger
                                             x
                                             (addInteger
                                                (fibonacciManuallyUnrolled
                                                   (subtractInteger n''' 1))
                                                (fibonacciManuallyUnrolled
                                                   (subtractInteger n''' 2))))))
                                  {all dead. dead}
                        in
                        Bool_match
                          (Bool_match
                             (ifThenElse
                                {Bool}
                                (equalsInteger 0 n'')
                                True
                                False)
                             {all dead. Bool}
                             (/\dead -> True)
                             (/\dead ->
                                ifThenElse
                                  {Bool}
                                  (equalsInteger 1 n'')
                                  True
                                  False)
                             {all dead. dead})
                          {all dead. integer}
                          (/\dead -> addInteger x (addInteger x n''))
                          (/\dead ->
                             let
                               !n''' : integer = subtractInteger n'' 1
                             in
                             Bool_match
                               (Bool_match
                                  (ifThenElse
                                     {Bool}
                                     (equalsInteger 0 n''')
                                     True
                                     False)
                                  {all dead. Bool}
                                  (/\dead -> True)
                                  (/\dead ->
                                     ifThenElse
                                       {Bool}
                                       (equalsInteger 1 n''')
                                       True
                                       False)
                                  {all dead. dead})
                               {all dead. integer}
                               (/\dead -> `$j` n''')
                               (/\dead ->
                                  `$j`
                                    (addInteger
                                       (fibonacciManuallyUnrolled
                                          (subtractInteger n''' 1))
                                       (fibonacciManuallyUnrolled
                                          (subtractInteger n''' 2))))
                               {all dead. dead})
                          {all dead. dead}
                in
                Bool_match
                  (Bool_match
                     (ifThenElse {Bool} (equalsInteger 0 n') True False)
                     {all dead. Bool}
                     (/\dead -> True)
                     (/\dead ->
                        ifThenElse {Bool} (equalsInteger 1 n') True False)
                     {all dead. dead})
                  {all dead. integer}
                  (/\dead -> addInteger x n')
                  (/\dead ->
                     let
                       !n'' : integer = subtractInteger n' 1
                       !`$j` : integer -> integer
                         = \(x : integer) ->
                             let
                               !n''' : integer = subtractInteger n'' 2
                             in
                             Bool_match
                               (Bool_match
                                  (ifThenElse
                                     {Bool}
                                     (equalsInteger 0 n''')
                                     True
                                     False)
                                  {all dead. Bool}
                                  (/\dead -> True)
                                  (/\dead ->
                                     ifThenElse
                                       {Bool}
                                       (equalsInteger 1 n''')
                                       True
                                       False)
                                  {all dead. dead})
                               {all dead. integer}
                               (/\dead -> `$j` (addInteger x n'''))
                               (/\dead ->
                                  `$j`
                                    (addInteger
                                       x
                                       (addInteger
                                          (fibonacciManuallyUnrolled
                                             (subtractInteger n''' 1))
                                          (fibonacciManuallyUnrolled
                                             (subtractInteger n''' 2)))))
                               {all dead. dead}
                     in
                     Bool_match
                       (Bool_match
                          (ifThenElse {Bool} (equalsInteger 0 n'') True False)
                          {all dead. Bool}
                          (/\dead -> True)
                          (/\dead ->
                             ifThenElse {Bool} (equalsInteger 1 n'') True False)
                          {all dead. dead})
                       {all dead. integer}
                       (/\dead -> `$j` n'')
                       (/\dead ->
                          let
                            !n''' : integer = subtractInteger n'' 1
                          in
                          Bool_match
                            (Bool_match
                               (ifThenElse
                                  {Bool}
                                  (equalsInteger 0 n''')
                                  True
                                  False)
                               {all dead. Bool}
                               (/\dead -> True)
                               (/\dead ->
                                  ifThenElse
                                    {Bool}
                                    (equalsInteger 1 n''')
                                    True
                                    False)
                               {all dead. dead})
                            {all dead. integer}
                            (/\dead -> `$j` n''')
                            (/\dead ->
                               `$j`
                                 (addInteger
                                    (fibonacciManuallyUnrolled
                                       (subtractInteger n''' 1))
                                    (fibonacciManuallyUnrolled
                                       (subtractInteger n''' 2))))
                            {all dead. dead})
                       {all dead. dead})
                  {all dead. dead}
        in
        Bool_match
          (Bool_match
             (ifThenElse {Bool} (equalsInteger 0 n) True False)
             {all dead. Bool}
             (/\dead -> True)
             (/\dead -> ifThenElse {Bool} (equalsInteger 1 n) True False)
             {all dead. dead})
          {all dead. integer}
          (/\dead -> n)
          (/\dead ->
             let
               !n' : integer = subtractInteger n 1
               !`$j` : integer -> integer
                 = \(x : integer) ->
                     let
                       !n'' : integer = subtractInteger n' 2
                       !`$j` : integer -> integer
                         = \(x : integer) ->
                             let
                               !n''' : integer = subtractInteger n'' 2
                             in
                             Bool_match
                               (Bool_match
                                  (ifThenElse
                                     {Bool}
                                     (equalsInteger 0 n''')
                                     True
                                     False)
                                  {all dead. Bool}
                                  (/\dead -> True)
                                  (/\dead ->
                                     ifThenElse
                                       {Bool}
                                       (equalsInteger 1 n''')
                                       True
                                       False)
                                  {all dead. dead})
                               {all dead. integer}
                               (/\dead ->
                                  `$j` (addInteger x (addInteger x n''')))
                               (/\dead ->
                                  `$j`
                                    (addInteger
                                       x
                                       (addInteger
                                          x
                                          (addInteger
                                             (fibonacciManuallyUnrolled
                                                (subtractInteger n''' 1))
                                             (fibonacciManuallyUnrolled
                                                (subtractInteger n''' 2))))))
                               {all dead. dead}
                     in
                     Bool_match
                       (Bool_match
                          (ifThenElse {Bool} (equalsInteger 0 n'') True False)
                          {all dead. Bool}
                          (/\dead -> True)
                          (/\dead ->
                             ifThenElse {Bool} (equalsInteger 1 n'') True False)
                          {all dead. dead})
                       {all dead. integer}
                       (/\dead -> `$j` (addInteger x n''))
                       (/\dead ->
                          let
                            !n''' : integer = subtractInteger n'' 1
                          in
                          Bool_match
                            (Bool_match
                               (ifThenElse
                                  {Bool}
                                  (equalsInteger 0 n''')
                                  True
                                  False)
                               {all dead. Bool}
                               (/\dead -> True)
                               (/\dead ->
                                  ifThenElse
                                    {Bool}
                                    (equalsInteger 1 n''')
                                    True
                                    False)
                               {all dead. dead})
                            {all dead. integer}
                            (/\dead -> `$j` n''')
                            (/\dead ->
                               `$j`
                                 (addInteger
                                    (fibonacciManuallyUnrolled
                                       (subtractInteger n''' 1))
                                    (fibonacciManuallyUnrolled
                                       (subtractInteger n''' 2))))
                            {all dead. dead})
                       {all dead. dead}
             in
             Bool_match
               (Bool_match
                  (ifThenElse {Bool} (equalsInteger 0 n') True False)
                  {all dead. Bool}
                  (/\dead -> True)
                  (/\dead -> ifThenElse {Bool} (equalsInteger 1 n') True False)
                  {all dead. dead})
               {all dead. integer}
               (/\dead -> `$j` n')
               (/\dead ->
                  let
                    !n'' : integer = subtractInteger n' 1
                    !`$j` : integer -> integer
                      = \(x : integer) ->
                          let
                            !n''' : integer = subtractInteger n'' 2
                          in
                          Bool_match
                            (Bool_match
                               (ifThenElse
                                  {Bool}
                                  (equalsInteger 0 n''')
                                  True
                                  False)
                               {all dead. Bool}
                               (/\dead -> True)
                               (/\dead ->
                                  ifThenElse
                                    {Bool}
                                    (equalsInteger 1 n''')
                                    True
                                    False)
                               {all dead. dead})
                            {all dead. integer}
                            (/\dead -> `$j` (addInteger x n'''))
                            (/\dead ->
                               `$j`
                                 (addInteger
                                    x
                                    (addInteger
                                       (fibonacciManuallyUnrolled
                                          (subtractInteger n''' 1))
                                       (fibonacciManuallyUnrolled
                                          (subtractInteger n''' 2)))))
                            {all dead. dead}
                  in
                  Bool_match
                    (Bool_match
                       (ifThenElse {Bool} (equalsInteger 0 n'') True False)
                       {all dead. Bool}
                       (/\dead -> True)
                       (/\dead ->
                          ifThenElse {Bool} (equalsInteger 1 n'') True False)
                       {all dead. dead})
                    {all dead. integer}
                    (/\dead -> `$j` n'')
                    (/\dead ->
                       let
                         !n''' : integer = subtractInteger n'' 1
                       in
                       Bool_match
                         (Bool_match
                            (ifThenElse
                               {Bool}
                               (equalsInteger 0 n''')
                               True
                               False)
                            {all dead. Bool}
                            (/\dead -> True)
                            (/\dead ->
                               ifThenElse
                                 {Bool}
                                 (equalsInteger 1 n''')
                                 True
                                 False)
                            {all dead. dead})
                         {all dead. integer}
                         (/\dead -> `$j` n''')
                         (/\dead ->
                            `$j`
                              (addInteger
                                 (fibonacciManuallyUnrolled
                                    (subtractInteger n''' 1))
                                 (fibonacciManuallyUnrolled
                                    (subtractInteger n''' 2))))
                         {all dead. dead})
                    {all dead. dead})
               {all dead. dead})
          {all dead. dead}
in
fibonacciManuallyUnrolled 15
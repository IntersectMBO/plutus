(program
  1.1.0
  (let
    (nonrec)
    (datatypebind
      (datatype
        (tyvardecl Bool (type))

        Bool_match
        (vardecl True Bool) (vardecl False Bool)
      )
    )
    (let
      (rec)
      (datatypebind
        (datatype
          (tyvardecl List (fun (type) (type)))
          (tyvardecl a (type))
          List_match
          (vardecl Nil [ List a ])
          (vardecl Cons (fun a (fun [ List a ] [ List a ])))
        )
      )
      (let
        (nonrec)
        (termbind
          (nonstrict)
          (vardecl
            build
            (all
              a
              (type)
              (fun (all b (type) (fun (fun a (fun b b)) (fun b b))) [ List a ])
            )
          )
          (abs
            a
            (type)
            (lam
              g
              (all b (type) (fun (fun a (fun b b)) (fun b b)))
              [
                [
                  { g [ List a ] }
                  (lam ds a (lam ds [ List a ] [ [ { Cons a } ds ] ds ]))
                ]
                { Nil a }
              ]
            )
          )
        )
        (typebind (tyvardecl Unit (type)) (all a (type) (fun a a)))
        (lam
          ds
          Unit
          [
            { build Bool }
            (abs
              a (type) (lam c (fun Bool (fun a a)) (lam n a [ [ c False ] n ]))
            )
          ]
        )
      )
    )
  )
)
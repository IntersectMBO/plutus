let
  data (Tuple2 :: * -> * -> *) a b | Tuple2_match where
    Tuple2 : a -> b -> Tuple2 a b
  data Bool | Bool_match where
    True : Bool
    False : Bool
  data (Maybe :: * -> *) a | Maybe_match where
    Just : a -> Maybe a
    Nothing : Maybe a
  data Unit | Unit_match where
    Unit : Unit
  !traceError : all a. string -> a
    = /\a ->
        \(str : string) -> let !x : Unit = trace {Unit} str Unit in error {a}
in
\(ds : data) ->
  (let
      a = Tuple2 integer integer
    in
    \(`$dUnsafeFromData` : (\a -> data -> a) a) (d : data) ->
      let
        !tup : pair integer (list data) = unConstrData d
        !index : integer = fstPair {integer} {list data} tup
        !args : list data = sndPair {integer} {list data} tup
      in
      ifThenElse
        {all dead. Maybe a}
        (equalsInteger 1 index)
        (/\dead -> Nothing {a})
        (/\dead ->
           ifThenElse
             {all dead. Maybe a}
             (equalsInteger 0 index)
             (/\dead -> Just {a} (`$dUnsafeFromData` (headList {data} args)))
             (/\dead -> traceError {Maybe a} "PT1")
             {all dead. dead})
        {all dead. dead})
    (\(d : data) ->
       let
         !tup : pair integer (list data) = unConstrData d
         !index : integer = fstPair {integer} {list data} tup
         !args : list data = sndPair {integer} {list data} tup
       in
       ifThenElse
         {all dead. Tuple2 integer integer}
         (equalsInteger 0 index)
         (/\dead ->
            Tuple2
              {integer}
              {integer}
              (unIData (headList {data} args))
              (unIData (headList {data} (tailList {data} args))))
         (/\dead -> traceError {Tuple2 integer integer} "PT1")
         {all dead. dead})
    ds
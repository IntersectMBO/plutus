let
  data (Tuple2 :: * -> * -> *) a b | Tuple2_match where
    Tuple2 : a -> b -> Tuple2 a b
  data (Maybe :: * -> *) a | Maybe_match where
    Just : a -> Maybe a
    Nothing : Maybe a
in
\(ds : data) ->
  (let
      a = Tuple2 integer integer
    in
    \(`$dUnsafeFromData` : (\a -> data -> a) a) (d : data) ->
      case
        (Maybe a)
        d
        [(\(ds : data) -> Just {a} (`$dUnsafeFromData` ds)), (Nothing {a})])
    (\(d : data) ->
       case
         (Tuple2 integer integer)
         d
         [ (\(ds : data) (ds : data) ->
              Tuple2 {integer} {integer} (unIData ds) (unIData ds)) ])
    ds
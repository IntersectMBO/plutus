let
  data Unit | Unit_match where
    Unit : Unit
  data Bool | Bool_match where
    True : Bool
    False : Bool
  data (Tuple2 :: * -> * -> *) a b | Tuple2_match where
    Tuple2 : a -> b -> Tuple2 a b
in
\(ds : (\a -> data) integer) ->
  Tuple2_match
    {integer}
    {list data}
    ((let
         b = list data
       in
       \(tup : pair integer b) ->
         Tuple2
           {integer}
           {b}
           (fstPair {integer} {b} tup)
           (sndPair {integer} {b} tup))
       (unConstrData ds))
    {integer}
    (\(ds : integer) (ds : list data) ->
       ifThenElse
         {all dead. integer}
         (equalsInteger 0 ds)
         (/\dead ->
            let
              !ds : data = headList {data} ds
              !ds : list data = tailList {data} ds
              !a : integer = unIData ds
              !ds : integer = unIData (headList {data} ds)
            in
            a)
         (/\dead ->
            Tuple2_match
              {integer}
              {list data}
              ((let
                   b = list data
                 in
                 \(tup : pair integer b) ->
                   Tuple2
                     {integer}
                     {b}
                     (fstPair {integer} {b} tup)
                     (sndPair {integer} {b} tup))
                 (unConstrData ds))
              {integer}
              (\(ds : integer) (ds : list data) ->
                 ifThenElse
                   {all dead. integer}
                   (equalsInteger 1 ds)
                   (/\dead -> 1)
                   (/\dead ->
                      Unit_match (error {Unit}) {integer} (error {integer}))
                   {all dead. dead}))
         {all dead. dead})
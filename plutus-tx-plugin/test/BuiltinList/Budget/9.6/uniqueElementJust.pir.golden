let
  data (Maybe :: * -> *) a | Maybe_match where
    Just : a -> Maybe a
    Nothing : Maybe a
  !caseList' : all a r. r -> (a -> list a -> r) -> list a -> r
    = /\a r ->
        \(z : r) (f : a -> list a -> r) (xs : list a) ->
          chooseList
            {a}
            {all dead. r}
            xs
            (/\dead -> z)
            (/\dead -> f (headList {a} xs) (tailList {a} xs))
            {r}
in
\(xs : list integer) ->
  caseList'
    {integer}
    {Maybe integer}
    (Nothing {integer})
    (\(x : integer) ->
       caseList'
         {integer}
         {Maybe integer}
         (Just {integer} x)
         (\(ds : integer) (ds : list integer) -> Nothing {integer}))
    xs
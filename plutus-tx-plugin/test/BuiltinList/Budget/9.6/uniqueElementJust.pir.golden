let
  ~`$fMkNilInteger` : (\arep -> list arep) integer = []
  data Bool | Bool_match where
    True : Bool
    False : Bool
  !ifThenElse : all a. bool -> a -> a -> a
    = /\a -> \(b : bool) (x : a) (y : a) -> case a b [y, x]
  !lessThanEqualsInteger : integer -> integer -> bool = lessThanEqualsInteger
  !mkCons : all a. a -> list a -> list a = mkCons
  !subtractInteger : integer -> integer -> integer = subtractInteger
  !caseList' : all a r. r -> (a -> list a -> r) -> list a -> r
    = /\a r ->
        \(z : r) (f : a -> list a -> r) (xs : list a) ->
          chooseList
            {a}
            {all dead. r}
            xs
            (/\dead -> z)
            (/\dead -> f (headList {a} xs) (tailList {a} xs))
            {r}
in
letrec
  ~take : all a. (\arep -> list arep) a -> integer -> list a -> list a
    = /\a ->
        \(`$dMkNil` : (\arep -> list arep) a) (n : integer) ->
          let
            !n : integer = n
          in
          \(l : list a) ->
            let
              !l : list a = l
              !b : bool = lessThanEqualsInteger n 0
            in
            Bool_match
              (ifThenElse {Bool} b True False)
              {all dead. list a}
              (/\dead -> `$dMkNil`)
              (/\dead ->
                 caseList'
                   {a}
                   {list a}
                   `$dMkNil`
                   (\(x : a) ->
                      let
                        !x : a = x
                      in
                      \(xs : list a) ->
                        let
                          !xs : list a = xs
                        in
                        mkCons
                          {a}
                          x
                          (take {a} `$dMkNil` (subtractInteger n 1) xs))
                   l)
              {all dead. dead}
in
let
  data (Maybe :: * -> *) a | Maybe_match where
    Just : a -> Maybe a
    Nothing : Maybe a
  ~uniqueElement : all a. list a -> Maybe a
    = /\a ->
        caseList'
          {a}
          {Maybe a}
          (Nothing {a})
          (\(x : a) ->
             let
               !x : a = x
             in
             caseList'
               {a}
               {Maybe a}
               (Just {a} x)
               (\(ds : a) (ds : list a) -> Nothing {a}))
in
\(xs : list integer) ->
  let
    !xs : list integer = xs
  in
  uniqueElement {integer} (take {integer} `$fMkNilInteger` 1 xs)
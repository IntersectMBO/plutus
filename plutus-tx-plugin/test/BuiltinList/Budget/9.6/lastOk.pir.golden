let
  !caseList' : all a r. r -> (a -> list a -> r) -> list a -> r
    = /\a r -> \(z : r) (f : a -> list a -> r) (xs : list a) -> case r xs [z, f]
  ~lastEmptyBuiltinListError : string = "PT25"
  data Unit | Unit_match where
    Unit : Unit
  !error : all a. unit -> a = /\a -> \(thunk : unit) -> error {a}
  !trace : all a. string -> a -> a = trace
  !unitval : unit = ()
  ~traceError : all a. string -> a
    = /\a ->
        \(str : string) ->
          let
            !str : string = str
            !x : Unit = trace {Unit} str Unit
          in
          error {a} unitval
in
letrec
  ~last : all a. list a -> a
    = /\a ->
        \(eta : list a) ->
          let
            !l : list a = eta
          in
          caseList'
            {a}
            {Unit -> a}
            (\(ds : Unit) -> traceError {a} lastEmptyBuiltinListError)
            (\(x : a) ->
               let
                 !x : a = x
               in
               \(xs : list a) ->
                 let
                   !xs : list a = xs
                 in
                 \(ds : Unit) ->
                   caseList'
                     {a}
                     {a}
                     x
                     (\(ds : a) (ds : list a) -> last {a} xs)
                     xs)
            l
            Unit
in
\(xs : list integer) -> let !xs : list integer = xs in last {integer} xs
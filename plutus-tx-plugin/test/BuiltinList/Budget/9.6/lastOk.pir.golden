let
  !caseList' : all a r. r -> (a -> list a -> r) -> list a -> r
    = /\a r ->
        \(z : r) (f : a -> list a -> r) (xs : list a) ->
          chooseList
            {a}
            {all dead. r}
            xs
            (/\dead -> z)
            (/\dead -> f (headList {a} xs) (tailList {a} xs))
            {r}
  data Unit | Unit_match where
    Unit : Unit
  ~caseList : all a r. (Unit -> r) -> (a -> list a -> r) -> list a -> r
    = /\a r ->
        \(nilCase : Unit -> r) ->
          let
            !nilCase : Unit -> r = nilCase
          in
          \(consCase : a -> list a -> r) ->
            let
              !consCase : a -> list a -> r = consCase
            in
            \(l : list a) ->
              let
                !l : list a = l
              in
              caseList'
                {a}
                {Unit -> r}
                nilCase
                (\(x : a) ->
                   let
                     !x : a = x
                   in
                   \(xs : list a) ->
                     let
                       !xs : list a = xs
                     in
                     \(ds : Unit) -> consCase x xs)
                l
                Unit
  ~lastEmptyBuiltinListError : string = "PT25"
  !error : all a. unit -> a = /\a -> \(thunk : unit) -> error {a}
  !trace : all a. string -> a -> a = trace
  !unitval : unit = ()
  ~traceError : all a. string -> a
    = /\a ->
        \(str : string) ->
          let
            !str : string = str
            !x : Unit = trace {Unit} str Unit
          in
          error {a} unitval
in
letrec
  ~last : all a. list a -> a
    = /\a ->
        caseList
          {a}
          {a}
          (\(ds : Unit) -> traceError {a} lastEmptyBuiltinListError)
          (\(x : a) ->
             let
               !x : a = x
             in
             \(xs : list a) ->
               let
                 !xs : list a = xs
               in
               caseList' {a} {a} x (\(ds : a) (ds : list a) -> last {a} xs) xs)
in
\(xs : list integer) -> let !xs : list integer = xs in last {integer} xs
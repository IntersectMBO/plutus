let
  data Bool | Bool_match where
    True : Bool
    False : Bool
  data Unit | Unit_match where
    Unit : Unit
in
letrec
  !go : list integer -> integer -> integer
    = \(xs : list integer) (i : integer) ->
        (let
            r = Unit -> Unit -> integer
          in
          \(z : r) (f : integer -> list integer -> r) (xs : list integer) ->
            chooseList
              {integer}
              {all dead. r}
              xs
              (/\dead -> z)
              (/\dead -> f (headList {integer} xs) (tailList {integer} xs))
              {r})
          (\(ds : Unit) ->
             let
               !x : Unit = trace {Unit} "PT22" Unit
             in
             error {Unit -> integer})
          (\(x : integer) (xs : list integer) (ds : Unit) (eta : Unit) ->
             Bool_match
               (case Bool (equalsInteger 0 i) [False, True])
               {all dead. integer}
               (/\dead -> x)
               (/\dead -> go xs (subtractInteger i 1))
               {all dead. dead})
          xs
          Unit
          Unit
in
\(v : list integer) -> go v 5
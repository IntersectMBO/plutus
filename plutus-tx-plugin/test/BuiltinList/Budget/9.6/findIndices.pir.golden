let
  !addInteger : integer -> integer -> integer = addInteger
  !caseList' : all a r. r -> (a -> list a -> r) -> list a -> r
    = /\a r ->
        \(z : r) (f : a -> list a -> r) (xs : list a) ->
          chooseList
            {a}
            {all dead. r}
            xs
            (/\dead -> z)
            (/\dead -> f (headList {a} xs) (tailList {a} xs))
            {r}
  !mkCons : all a. a -> list a -> list a = mkCons
  data Bool | Bool_match where
    True : Bool
    False : Bool
  ~findIndices : all a. (a -> Bool) -> list a -> list integer
    = /\a ->
        \(p : a -> Bool) ->
          let
            !p : a -> Bool = p
          in
          letrec
            ~go : integer -> list a -> list integer
              = \(i : integer) ->
                  let
                    !i : integer = i
                  in
                  caseList'
                    {a}
                    {list integer}
                    []
                    (\(x : a) ->
                       let
                         !x : a = x
                       in
                       \(xs : list a) ->
                         let
                           !xs : list a = xs
                           !indices : list integer = go (addInteger i 1) xs
                         in
                         Bool_match
                           (p x)
                           {all dead. list integer}
                           (/\dead -> mkCons {integer} i indices)
                           (/\dead -> indices)
                           {all dead. dead})
          in
          go 0
  !equalsInteger : integer -> integer -> bool = equalsInteger
  !ifThenElse : all a. bool -> a -> a -> a = ifThenElse
  !modInteger : integer -> integer -> integer = modInteger
  ~even : integer -> Bool
    = \(n : integer) ->
        let
          !n : integer = n
          !x : integer = modInteger n 2
          !b : bool = equalsInteger x 0
        in
        ifThenElse {Bool} b True False
  ~odd : integer -> Bool
    = \(n : integer) ->
        let
          !n : integer = n
        in
        Bool_match
          (even n)
          {all dead. Bool}
          (/\dead -> False)
          (/\dead -> True)
          {all dead. dead}
in
\(xs : list integer) ->
  let
    !xs : list integer = xs
  in
  findIndices {integer} odd xs
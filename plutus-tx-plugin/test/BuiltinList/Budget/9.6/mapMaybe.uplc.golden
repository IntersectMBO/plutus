(program
   1.1.0
   (\xs ->
      force
        ((\f ->
            (\s -> f (\x -> f (\x -> f (\x -> f (\x -> s s x) x) x) x))
              (\s -> f (\x -> s s x)))
           (\go arg ->
              delay
                (\xs ->
                   force
                     (force (force chooseList)
                        xs
                        (delay [])
                        (delay
                           ((\xs ->
                               force
                                 (case
                                    ((\x ->
                                        force
                                          (case
                                             (force
                                                (case
                                                   (equalsInteger
                                                      (modInteger x 2)
                                                      0)
                                                   [ (delay (constr 0 []))
                                                   , (delay (constr 1 [])) ]))
                                             [ (delay (constr 0 [x]))
                                             , (delay (constr 1 [])) ]))
                                       (force headList xs))
                                    [ (\y ->
                                         delay
                                           (force mkCons
                                              y
                                              (force (go (delay (\x -> x)))
                                                 xs)))
                                    , (delay
                                         (force (go (delay (\x -> x))) xs)) ]))
                              (force tailList xs))))))
           (delay (\x -> x)))
        xs))
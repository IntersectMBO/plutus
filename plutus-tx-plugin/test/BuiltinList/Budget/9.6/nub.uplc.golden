(program
   1.1.0
   (\xs ->
      (\caseList' ->
         (\eta ->
            force
              ((\f ->
                  (\s -> f (\x -> f (\x -> f (\x -> f (\x -> s s x) x) x) x))
                    (\s -> f (\x -> s s x)))
                 (\go arg ->
                    delay
                      (\l xs ->
                         caseList'
                           []
                           (\y ys ->
                              force
                                (case
                                   (force
                                      ((\f ->
                                          (\s ->
                                             f
                                               (\x ->
                                                  f
                                                    (\x ->
                                                       f
                                                         (\x ->
                                                            f (\x -> s s x) x)
                                                         x)
                                                    x))
                                            (\s -> f (\x -> s s x)))
                                         (\go arg ->
                                            delay
                                              (caseList'
                                                 (constr 1 [])
                                                 (\x xs ->
                                                    force
                                                      (case
                                                         (equalsInteger x y)
                                                         [ (delay
                                                              (force
                                                                 (go
                                                                    (delay
                                                                       (\x ->
                                                                          x)))
                                                                 xs))
                                                         , (delay
                                                              (constr 0
                                                                 [])) ]))))
                                         (delay (\x -> x)))
                                      xs)
                                   [ (delay
                                        (force (go (delay (\x -> x))) ys xs))
                                   , (delay
                                        ((\cse ->
                                            cse
                                              (force (go (delay (\x -> x)))
                                                 ys
                                                 (cse xs)))
                                           (force mkCons y))) ]))
                           l))
                 (delay (\x -> x)))
              eta
              [])
           (force
              ((\f ->
                  (\s -> f (\x -> f (\x -> f (\x -> f (\x -> s s x) x) x) x))
                    (\s -> f (\x -> s s x)))
                 (\go arg ->
                    delay
                      (caseList'
                         xs
                         (\x xs ->
                            force mkCons x (force (go (delay (\x -> x))) xs))))
                 (delay (\x -> x)))
              xs))
        (\z f xs ->
           force
             (force (force chooseList)
                xs
                (delay z)
                (delay (f (force headList xs) (force tailList xs)))))))
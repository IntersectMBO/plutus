let
  data Bool | Bool_match where
    True : Bool
    False : Bool
  !equalsInteger : integer -> integer -> bool = equalsInteger
  !ifThenElse : all a. bool -> a -> a -> a
    = /\a -> \(b : bool) (x : a) (y : a) -> case a b [y, x]
  ~equalsInteger : integer -> integer -> Bool
    = \(x : integer) ->
        let
          !x : integer = x
        in
        \(y : integer) ->
          let
            !y : integer = y
            !b : bool = equalsInteger x y
          in
          ifThenElse {Bool} b True False
  ~`$fEqInteger` : (\a -> a -> a -> Bool) integer = equalsInteger
  data (Tuple2 :: * -> * -> *) a b | Tuple2_match where
    Tuple2 : a -> b -> Tuple2 a b
  !caseList' : all a r. r -> (a -> list a -> r) -> list a -> r
    = /\a r -> \(z : r) (f : a -> list a -> r) (xs : list a) -> case r xs [z, f]
  ~elem : all a. (\a -> a -> a -> Bool) a -> a -> list a -> Bool
    = /\a ->
        \(`$dEq` : (\a -> a -> a -> Bool) a) (a : a) ->
          let
            !a : a = a
          in
          letrec
            ~go : list a -> Bool
              = caseList'
                  {a}
                  {Bool}
                  False
                  (\(x : a) ->
                     let
                       !x : a = x
                     in
                     \(xs : list a) ->
                       let
                         !xs : list a = xs
                       in
                       Bool_match
                         (`$dEq` a x)
                         {all dead. Bool}
                         (/\dead -> True)
                         (/\dead -> go xs)
                         {all dead. dead})
          in
          go
in
\(xs : list integer) ->
  let
    !xs : list integer = xs
  in
  Tuple2
    {Bool}
    {Bool}
    (elem {integer} `$fEqInteger` 8 xs)
    (elem {integer} `$fEqInteger` 12 xs)
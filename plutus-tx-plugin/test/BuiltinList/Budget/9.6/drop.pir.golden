let
  ~`$fMkNilInteger` : (\arep -> list arep) integer = []
  data Bool | Bool_match where
    True : Bool
    False : Bool
  !caseList' : all a r. r -> (a -> list a -> r) -> list a -> r
    = /\a r -> \(z : r) (f : a -> list a -> r) (xs : list a) -> case r xs [f, z]
  !ifThenElse : all a. bool -> a -> a -> a
    = /\a -> \(b : bool) (x : a) (y : a) -> case a b [y, x]
  !lessThanEqualsInteger : integer -> integer -> bool = lessThanEqualsInteger
  !subtractInteger : integer -> integer -> integer = subtractInteger
in
letrec
  ~drop : all a. (\arep -> list arep) a -> integer -> list a -> list a
    = /\a ->
        \(`$dMkNil` : (\arep -> list arep) a) (n : integer) ->
          let
            !n : integer = n
          in
          \(l : list a) ->
            let
              !l : list a = l
              !b : bool = lessThanEqualsInteger n 0
            in
            Bool_match
              (ifThenElse {Bool} b True False)
              {all dead. list a}
              (/\dead -> l)
              (/\dead ->
                 caseList'
                   {a}
                   {list a}
                   `$dMkNil`
                   (\(ds : a) (xs : list a) ->
                      let
                        !xs : list a = xs
                      in
                      drop {a} `$dMkNil` (subtractInteger n 1) xs)
                   l)
              {all dead. dead}
in
\(xs : list integer) ->
  let
    !xs : list integer = xs
  in
  drop {integer} `$fMkNilInteger` 5 xs
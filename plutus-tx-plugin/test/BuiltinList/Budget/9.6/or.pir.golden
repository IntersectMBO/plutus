let
  data Bool | Bool_match where
    True : Bool
    False : Bool
  !caseList' : all a r. r -> (a -> list a -> r) -> list a -> r
    = /\a r -> \(z : r) (f : a -> list a -> r) (xs : list a) -> case r xs [z, f]
  ~any : all a. (a -> Bool) -> list a -> Bool
    = /\a ->
        \(p : a -> Bool) ->
          let
            !p : a -> Bool = p
          in
          letrec
            ~go : list a -> Bool
              = caseList'
                  {a}
                  {Bool}
                  False
                  (\(x : a) ->
                     let
                       !x : a = x
                     in
                     \(xs : list a) ->
                       let
                         !xs : list a = xs
                       in
                       Bool_match
                         (p x)
                         {all dead. Bool}
                         (/\dead -> True)
                         (/\dead -> go xs)
                         {all dead. dead})
          in
          go
  !ifThenElse : all a. bool -> a -> a -> a
    = /\a -> \(b : bool) (x : a) (y : a) -> case a b [y, x]
  ~or : list bool -> Bool
    = any
        {bool}
        (\(x : bool) -> let !x : bool = x in ifThenElse {Bool} x True False)
in
\(xs : list bool) -> let !xs : list bool = xs in or xs
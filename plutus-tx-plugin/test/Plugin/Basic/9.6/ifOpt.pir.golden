(program
  1.1.0
  (let
    (nonrec)
    (termbind
      (strict)
      (vardecl
        divideInteger (fun (con integer) (fun (con integer) (con integer)))
      )
      (builtin divideInteger)
    )
    (termbind
      (nonstrict)
      (vardecl
        divideInteger (fun (con integer) (fun (con integer) (con integer)))
      )
      (lam x (con integer) (lam y (con integer) [ [ divideInteger x ] y ]))
    )
    (datatypebind
      (datatype
        (tyvardecl Bool (type))

        Bool_match
        (vardecl True Bool) (vardecl False Bool)
      )
    )
    (termbind
      (strict)
      (vardecl equalsInteger (fun (con integer) (fun (con integer) (con bool))))
      (builtin equalsInteger)
    )
    (termbind
      (strict)
      (vardecl ifThenElse (all a (type) (fun (con bool) (fun a (fun a a)))))
      (builtin ifThenElse)
    )
    (termbind
      (nonstrict)
      (vardecl equalsInteger (fun (con integer) (fun (con integer) Bool)))
      (lam
        x
        (con integer)
        (lam
          y
          (con integer)
          [ [ [ { ifThenElse Bool } [ [ equalsInteger x ] y ] ] True ] False ]
        )
      )
    )
    (termbind
      (strict)
      (vardecl wild Bool)
      [
        [ equalsInteger [ [ divideInteger (con integer 1) ] (con integer 0) ] ]
        (con integer 0)
      ]
    )
    (con integer 1)
  )
)
let
  ~ds : integer = 2
  data Bool | Bool_match where
    True : Bool
    False : Bool
  !equalsInteger : integer -> integer -> bool = equalsInteger
  !ifThenElse : all a. bool -> a -> a -> a = ifThenElse
  ~equalsInteger : integer -> integer -> Bool
    = \(x : integer) ->
        let
          !x : integer = x
        in
        \(y : integer) ->
          let
            !y : integer = y
            !b : bool = equalsInteger x y
          in
          ifThenElse {Bool} b True False
  !integerNegate : integer -> integer = \(x : integer) -> subtractInteger 0 x
in
Bool_match
  (equalsInteger ds 1)
  {all dead. integer}
  (/\dead -> 42)
  (/\dead ->
     Bool_match
       (equalsInteger ds 2)
       {all dead. integer}
       (/\dead -> 100)
       (/\dead -> integerNegate 1)
       {all dead. dead})
  {all dead. dead}
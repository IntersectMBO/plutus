(program
  (let
    (nonrec)
    (datatypebind
      (datatype
        (tyvardecl Bool (type))
        
        Bool_match
        (vardecl True Bool) (vardecl False Bool)
      )
    )
    (termbind
      (strict)
      (vardecl equalsInteger (fun (con integer) (fun (con integer) Bool)))
      (lam
        arg
        (con integer)
        (lam
          arg
          (con integer)
          [
            (lam
              b
              (con bool)
              [ [ [ { (builtin ifThenElse) Bool } b ] True ] False ]
            )
            [ [ (builtin equalsInteger) arg ] arg ]
          ]
        )
      )
    )
    (termbind
      (strict)
      (vardecl wild Bool)
      [
        [ equalsInteger [ [ (builtin divideInteger) (con 1) ] (con 0) ] ]
        (con 0)
      ]
    )
    (con 1)
  )
)
(program
  (let
    (nonrec)
    (datatypebind
      (datatype
        (tyvardecl Bool (type))
        
        Bool_match
        (vardecl True Bool) (vardecl False Bool)
      )
    )
    (let
      (nonrec)
      (termbind
        (strict)
        (vardecl equalsInteger (fun (con integer) (fun (con integer) Bool)))
        (lam
          arg
          (con integer)
          (lam
            arg
            (con integer)
            [
              (lam
                b
                (con bool)
                [ [ [ { (builtin ifThenElse) Bool } b ] True ] False ]
              )
              [ [ (builtin equalsInteger) arg ] arg ]
            ]
          )
        )
      )
      (let
        (nonrec)
        (termbind
          (strict)
          (vardecl
            divideInteger (fun (con integer) (fun (con integer) (con integer)))
          )
          (lam
            arg
            (con integer)
            (lam arg (con integer) [ [ (builtin divideInteger) arg ] arg ])
          )
        )
        (let
          (nonrec)
          (termbind
            (strict)
            (vardecl wild Bool)
            [ [ equalsInteger [ [ divideInteger (con 1) ] (con 0) ] ] (con 0) ]
          )
          (con 1)
        )
      )
    )
  )
)
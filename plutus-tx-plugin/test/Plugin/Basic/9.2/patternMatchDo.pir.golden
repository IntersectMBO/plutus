(program
  1.1.0
  (let
    (nonrec)
    (datatypebind
      (datatype
        (tyvardecl Maybe (fun (type) (type)))
        (tyvardecl a (type))
        Maybe_match
        (vardecl Just (fun a [ Maybe a ])) (vardecl Nothing [ Maybe a ])
      )
    )
    (termbind
      (nonstrict)
      (vardecl `$fApplicativeMaybe_$cpure` (all a (type) (fun a [ Maybe a ])))
      (abs a (type) (lam ds a [ { Just a } ds ]))
    )
    (termbind
      (nonstrict)
      (vardecl
        `$fMonadMaybe_$c>>=`
        (all
          a
          (type)
          (all b (type) (fun [ Maybe a ] (fun (fun a [ Maybe b ]) [ Maybe b ])))
        )
      )
      (abs
        a
        (type)
        (abs
          b
          (type)
          (lam
            ds
            [ Maybe a ]
            (lam
              k
              (fun a [ Maybe b ])
              {
                [
                  [
                    { [ { Maybe_match a } ds ] (all dead (type) [ Maybe b ]) }
                    (lam x a (abs dead (type) [ k x ]))
                  ]
                  (abs dead (type) { Nothing b })
                ]
                (all dead (type) dead)
              }
            )
          )
        )
      )
    )
    (datatypebind
      (datatype
        (tyvardecl Tuple2 (fun (type) (fun (type) (type))))
        (tyvardecl a (type)) (tyvardecl b (type))
        Tuple2_match
        (vardecl Tuple2 (fun a (fun b [ [ Tuple2 a ] b ])))
      )
    )
    (termbind
      (strict)
      (vardecl addInteger (fun (con integer) (fun (con integer) (con integer))))
      (builtin addInteger)
    )
    (termbind
      (nonstrict)
      (vardecl addInteger (fun (con integer) (fun (con integer) (con integer))))
      (lam
        x
        (con integer)
        (let
          (nonrec)
          (termbind (strict) (vardecl x (con integer)) x)
          (lam
            y
            (con integer)
            (let
              (nonrec)
              (termbind (strict) (vardecl y (con integer)) y)
              [ [ addInteger x ] y ]
            )
          )
        )
      )
    )
    (lam
      ds
      [ Maybe [ [ Tuple2 (con integer) ] (con integer) ] ]
      (let
        (nonrec)
        (termbind
          (strict)
          (vardecl ds [ Maybe [ [ Tuple2 (con integer) ] (con integer) ] ])
          ds
        )
        (lam
          ds
          [ Maybe (con integer) ]
          (let
            (nonrec)
            (termbind (strict) (vardecl ds [ Maybe (con integer) ]) ds)
            [
              [
                {
                  {
                    `$fMonadMaybe_$c>>=`
                    [ [ Tuple2 (con integer) ] (con integer) ]
                  }
                  (con integer)
                }
                ds
              ]
              (lam
                ds
                [ [ Tuple2 (con integer) ] (con integer) ]
                [
                  {
                    [ { { Tuple2_match (con integer) } (con integer) } ds ]
                    [ Maybe (con integer) ]
                  }
                  (lam
                    x
                    (con integer)
                    (lam
                      x
                      (con integer)
                      [
                        [
                          {
                            { `$fMonadMaybe_$c>>=` (con integer) } (con integer)
                          }
                          ds
                        ]
                        (lam
                          y'
                          (con integer)
                          (let
                            (nonrec)
                            (termbind (strict) (vardecl y' (con integer)) y')
                            [
                              { `$fApplicativeMaybe_$cpure` (con integer) }
                              [ [ addInteger [ [ addInteger x ] x ] ] y' ]
                            ]
                          )
                        )
                      ]
                    )
                  )
                ]
              )
            ]
          )
        )
      )
    )
  )
)
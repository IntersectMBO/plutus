(program
  (let
    (nonrec
    )
    (datatypebind
      (datatype (tyvardecl Unit (type))  Unit_match (vardecl Unit Unit))
    )
    (let
      (nonrec
      )
      (termbind
        (vardecl
          subtractInteger
          (fun [(con integer) (con 8)] (fun [(con integer) (con 8)] [(con integer) (con 8)]))
        )
        { (builtin subtractInteger) (con 8) }
      )
      (let
        (nonrec)
        (datatypebind
          (datatype
            (tyvardecl Bool (type))
            
            Bool_match
            (vardecl True Bool) (vardecl False Bool)
          )
        )
        (let
          (nonrec)
          (termbind
            (vardecl
              equalsInteger
              (fun [(con integer) (con 8)] (fun [(con integer) (con 8)] Bool))
            )
            (lam
              arg
              [(con integer) (con 8)]
              (lam
                arg
                [(con integer) (con 8)]
                [
                  (lam
                    b
                    (all a (type) (fun a (fun a a)))
                    [ [ { b Bool } True ] False ]
                  )
                  [ [ { (builtin equalsInteger) (con 8) } arg ] arg ]
                ]
              )
            )
          )
          (let
            (rec)
            (termbind
              (vardecl odd (fun [(con integer) (con 8)] Bool))
              (lam
                n
                [(con integer) (con 8)]
                [
                  [
                    [
                      {
                        [ Bool_match [ [ equalsInteger n ] (con 8 ! 0) ] ]
                        (fun Unit Bool)
                      }
                      (lam thunk Unit False)
                    ]
                    (lam
                      thunk Unit [ even [ [ subtractInteger n ] (con 8 ! 1) ] ]
                    )
                  ]
                  Unit
                ]
              )
            )
            (termbind
              (vardecl even (fun [(con integer) (con 8)] Bool))
              (lam
                n
                [(con integer) (con 8)]
                [
                  [
                    [
                      {
                        [ Bool_match [ [ equalsInteger n ] (con 8 ! 0) ] ]
                        (fun Unit Bool)
                      }
                      (lam thunk Unit True)
                    ]
                    (lam
                      thunk Unit [ odd [ [ subtractInteger n ] (con 8 ! 1) ] ]
                    )
                  ]
                  Unit
                ]
              )
            )
            even
          )
        )
      )
    )
  )
)
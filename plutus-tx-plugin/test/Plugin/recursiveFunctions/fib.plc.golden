(program
  (let
    (nonrec
    )
    (datatypebind
      (datatype (tyvardecl Unit (type))  Unit_match (vardecl Unit Unit))
    )
    (let
      (nonrec
      )
      (termbind
        (vardecl
          addInteger
          (fun [(con integer) (con 8)] (fun [(con integer) (con 8)] [(con integer) (con 8)]))
        )
        { (builtin addInteger) (con 8) }
      )
      (let
        (nonrec
        )
        (termbind
          (vardecl
            subtractInteger
            (fun [(con integer) (con 8)] (fun [(con integer) (con 8)] [(con integer) (con 8)]))
          )
          { (builtin subtractInteger) (con 8) }
        )
        (let
          (nonrec)
          (datatypebind
            (datatype
              (tyvardecl Bool (type))
              
              Bool_match
              (vardecl True Bool) (vardecl False Bool)
            )
          )
          (let
            (nonrec)
            (termbind
              (vardecl
                equalsInteger
                (fun [(con integer) (con 8)] (fun [(con integer) (con 8)] Bool))
              )
              (lam
                arg
                [(con integer) (con 8)]
                (lam
                  arg
                  [(con integer) (con 8)]
                  [
                    (lam
                      b
                      (all a (type) (fun a (fun a a)))
                      [ [ { b Bool } True ] False ]
                    )
                    [ [ { (builtin equalsInteger) (con 8) } arg ] arg ]
                  ]
                )
              )
            )
            (let
              (rec)
              (termbind
                (vardecl
                  fib (fun [(con integer) (con 8)] [(con integer) (con 8)])
                )
                (lam
                  n
                  [(con integer) (con 8)]
                  [
                    [
                      [
                        {
                          [ Bool_match [ [ equalsInteger n ] (con 8 ! 0) ] ]
                          (fun Unit [(con integer) (con 8)])
                        }
                        (lam thunk Unit (con 8 ! 0))
                      ]
                      (lam
                        thunk
                        Unit
                        [
                          [
                            [
                              {
                                [
                                  Bool_match [ [ equalsInteger n ] (con 8 ! 1) ]
                                ]
                                (fun Unit [(con integer) (con 8)])
                              }
                              (lam thunk Unit (con 8 ! 1))
                            ]
                            (lam
                              thunk
                              Unit
                              [
                                [
                                  addInteger
                                  [ fib [ [ subtractInteger n ] (con 8 ! 1) ] ]
                                ]
                                [ fib [ [ subtractInteger n ] (con 8 ! 2) ] ]
                              ]
                            )
                          ]
                          Unit
                        ]
                      )
                    ]
                    Unit
                  ]
                )
              )
              fib
            )
          )
        )
      )
    )
  )
)
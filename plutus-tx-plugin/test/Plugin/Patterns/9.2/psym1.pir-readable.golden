let
  data (Example :: * -> *) a | Example_match where
    EInt : integer -> Example a
    ETwo : a -> a -> Example a
  ~`$mEInt'` : all r a. Example a -> (integer -> r) -> (unit -> r) -> r
    = /\r a ->
        \(scrut : Example a) (cont : integer -> r) (fail : unit -> r) ->
          let
            !scrut : Example a = scrut
            !cont : integer -> r = cont
            !fail : unit -> r = fail
          in
          Example_match
            {a}
            scrut
            {r}
            (\(i : integer) -> cont i)
            (\(ipv : a) (ipv : a) -> fail ())
  ~`$mETwo` : all r a. Example a -> (a -> r) -> (unit -> r) -> r
    = /\r a ->
        \(scrut : Example a) (cont : a -> r) (fail : unit -> r) ->
          let
            !scrut : Example a = scrut
            !cont : a -> r = cont
            !fail : unit -> r = fail
          in
          Example_match
            {a}
            scrut
            {r}
            (\(ipv : integer) -> fail ())
            (\(a : a) (b : a) -> cont b)
in
\(ds : Example string) ->
  let
    !ds : Example string = ds
  in
  `$mEInt'`
    {integer}
    {string}
    ds
    (\(i : integer) -> i)
    (\(void : unit) ->
       `$mETwo`
         {integer}
         {string}
         ds
         (\(s : string) -> 1)
         (\(void : unit) -> 0))
(program
  1.1.0
  (let
    (nonrec)
    (termbind
      (strict)
      (vardecl addInteger (fun (con integer) (fun (con integer) (con integer))))
      (builtin addInteger)
    )
    (termbind
      (nonstrict)
      (vardecl addInteger (fun (con integer) (fun (con integer) (con integer))))
      (lam
        x
        (con integer)
        (let
          (nonrec)
          (termbind (strict) (vardecl x (con integer)) x)
          (lam
            y
            (con integer)
            (let
              (nonrec)
              (termbind (strict) (vardecl y (con integer)) y)
              [
                [
                  [
                    { (builtin trace) (fun (con unit) (con integer)) }
                    (con string "entering addInteger")
                  ]
                  (lam
                    thunk
                    (con unit)
                    [
                      [
                        { (builtin trace) (con integer) }
                        (con string "exiting addInteger")
                      ]
                      [ [ addInteger x ] y ]
                    ]
                  )
                ]
                (con unit ())
              ]
            )
          )
        )
      )
    )
    (datatypebind
      (datatype
        (tyvardecl Bool (type))

        Bool_match
        (vardecl True Bool) (vardecl False Bool)
      )
    )
    (termbind
      (strict)
      (vardecl equalsInteger (fun (con integer) (fun (con integer) (con bool))))
      (builtin equalsInteger)
    )
    (termbind
      (strict)
      (vardecl ifThenElse (all a (type) (fun (con bool) (fun a (fun a a)))))
      (builtin ifThenElse)
    )
    (termbind
      (nonstrict)
      (vardecl equalsInteger (fun (con integer) (fun (con integer) Bool)))
      (lam
        x
        (con integer)
        (let
          (nonrec)
          (termbind (strict) (vardecl x (con integer)) x)
          (lam
            y
            (con integer)
            (let
              (nonrec)
              (termbind (strict) (vardecl y (con integer)) y)
              [
                [
                  [
                    { (builtin trace) (fun (con unit) Bool) }
                    (con string "entering equalsInteger")
                  ]
                  (lam
                    thunk
                    (con unit)
                    [
                      [
                        { (builtin trace) Bool }
                        (con string "exiting equalsInteger")
                      ]
                      (let
                        (nonrec)
                        (termbind
                          (strict)
                          (vardecl b (con bool))
                          [ [ equalsInteger x ] y ]
                        )
                        [ [ [ { ifThenElse Bool } b ] True ] False ]
                      )
                    ]
                  )
                ]
                (con unit ())
              ]
            )
          )
        )
      )
    )
    (termbind
      (strict)
      (vardecl
        subtractInteger (fun (con integer) (fun (con integer) (con integer)))
      )
      (builtin subtractInteger)
    )
    (termbind
      (nonstrict)
      (vardecl
        subtractInteger (fun (con integer) (fun (con integer) (con integer)))
      )
      (lam
        x
        (con integer)
        (let
          (nonrec)
          (termbind (strict) (vardecl x (con integer)) x)
          (lam
            y
            (con integer)
            (let
              (nonrec)
              (termbind (strict) (vardecl y (con integer)) y)
              [
                [
                  [
                    { (builtin trace) (fun (con unit) (con integer)) }
                    (con string "entering subtractInteger")
                  ]
                  (lam
                    thunk
                    (con unit)
                    [
                      [
                        { (builtin trace) (con integer) }
                        (con string "exiting subtractInteger")
                      ]
                      [ [ subtractInteger x ] y ]
                    ]
                  )
                ]
                (con unit ())
              ]
            )
          )
        )
      )
    )
    (let
      (rec)
      (termbind
        (nonstrict)
        (vardecl fib (fun (con integer) (con integer)))
        (lam
          n
          (con integer)
          (let
            (nonrec)
            (termbind (strict) (vardecl n (con integer)) n)
            [
              [
                [
                  { (builtin trace) (fun (con unit) (con integer)) }
                  (con string "entering fib")
                ]
                (lam
                  thunk
                  (con unit)
                  [
                    [
                      { (builtin trace) (con integer) }
                      (con string "exiting fib")
                    ]
                    {
                      [
                        [
                          {
                            [
                              Bool_match [ [ equalsInteger n ] (con integer 0) ]
                            ]
                            (all dead (type) (con integer))
                          }
                          (abs dead (type) (con integer 0))
                        ]
                        (abs
                          dead
                          (type)
                          {
                            [
                              [
                                {
                                  [
                                    Bool_match
                                    [ [ equalsInteger n ] (con integer 1) ]
                                  ]
                                  (all dead (type) (con integer))
                                }
                                (abs dead (type) (con integer 1))
                              ]
                              (abs
                                dead
                                (type)
                                [
                                  [
                                    addInteger
                                    [
                                      fib
                                      [ [ subtractInteger n ] (con integer 1) ]
                                    ]
                                  ]
                                  [
                                    fib
                                    [ [ subtractInteger n ] (con integer 2) ]
                                  ]
                                ]
                              )
                            ]
                            (all dead (type) dead)
                          }
                        )
                      ]
                      (all dead (type) dead)
                    }
                  ]
                )
              ]
              (con unit ())
            ]
          )
        )
      )
      fib
    )
  )
)
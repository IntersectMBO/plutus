program
  1.1.0
  (let
    !addInteger : integer -> integer -> integer = addInteger
    ~addInteger : integer -> integer -> integer
      = \(x : integer) ->
          let
            !x : integer = x
          in
          \(y : integer) ->
            let
              !y : integer = y
            in
            trace
              {unit -> integer}
              "entering addInteger"
              (\(thunk : unit) ->
                 trace {integer} "exiting addInteger" (addInteger x y))
              ()
    data Bool | Bool_match where
      True : Bool
      False : Bool
    !equalsInteger : integer -> integer -> bool = equalsInteger
    !ifThenElse : all a. bool -> a -> a -> a = ifThenElse
    ~equalsInteger : integer -> integer -> Bool
      = \(x : integer) ->
          let
            !x : integer = x
          in
          \(y : integer) ->
            let
              !y : integer = y
            in
            trace
              {unit -> Bool}
              "entering equalsInteger"
              (\(thunk : unit) ->
                 trace
                   {Bool}
                   "exiting equalsInteger"
                   (let
                     !b : bool = equalsInteger x y
                   in
                   ifThenElse {Bool} b True False))
              ()
    !subtractInteger : integer -> integer -> integer = subtractInteger
    ~subtractInteger : integer -> integer -> integer
      = \(x : integer) ->
          let
            !x : integer = x
          in
          \(y : integer) ->
            let
              !y : integer = y
            in
            trace
              {unit -> integer}
              "entering subtractInteger"
              (\(thunk : unit) ->
                 trace
                   {integer}
                   "exiting subtractInteger"
                   (subtractInteger x y))
              ()
  in
  letrec
    ~fib : integer -> integer
      = \(n : integer) ->
          let
            !n : integer = n
          in
          trace
            {unit -> integer}
            "entering fib"
            (\(thunk : unit) ->
               trace
                 {integer}
                 "exiting fib"
                 (Bool_match
                    (equalsInteger n 0)
                    {all dead. integer}
                    (/\dead -> 0)
                    (/\dead ->
                       Bool_match
                         (equalsInteger n 1)
                         {all dead. integer}
                         (/\dead -> 1)
                         (/\dead ->
                            addInteger
                              (fib (subtractInteger n 1))
                              (fib (subtractInteger n 2)))
                         {all dead. dead})
                    {all dead. dead}))
            ()
  in
  fib)
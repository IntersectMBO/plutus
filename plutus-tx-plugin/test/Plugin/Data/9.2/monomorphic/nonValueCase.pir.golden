(program
  1.1.0
  (let
    (nonrec)
    (datatypebind
      (datatype
        (tyvardecl MyEnum (type))

        MyEnum_match
        (vardecl Enum MyEnum) (vardecl Enum MyEnum)
      )
    )
    (datatypebind
      (datatype (tyvardecl Unit (type))  Unit_match (vardecl Unit Unit))
    )
    (termbind
      (strict)
      (vardecl error (all a (type) (fun (con unit) a)))
      (abs a (type) (lam thunk (con unit) (error a)))
    )
    (termbind (strict) (vardecl unitval (con unit)) (con unit ()))
    (termbind
      (nonstrict)
      (vardecl error (all a (type) (fun Unit a)))
      (abs a (type) (lam x Unit [ { error a } unitval ]))
    )
    (lam
      ds
      MyEnum
      {
        [
          [
            { [ MyEnum_match ds ] (all dead (type) (con integer)) }
            (abs dead (type) (con integer 1))
          ]
          (abs dead (type) [ { error (con integer) } Unit ])
        ]
        (all dead (type) dead)
      }
    )
  )
)
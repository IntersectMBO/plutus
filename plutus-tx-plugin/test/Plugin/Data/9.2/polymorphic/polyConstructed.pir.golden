(program
  1.1.0
  (let
    (nonrec)
    (datatypebind
      (datatype
        (tyvardecl MyPolyData (fun (type) (fun (type) (type))))
        (tyvardecl a (type)) (tyvardecl b (type))
        MyPolyData_match
        (vardecl Poly (fun a (fun b [ [ MyPolyData a ] b ])))
        (vardecl Poly (fun a [ [ MyPolyData a ] b ]))
      )
    )
    (termbind
      (nonstrict)
      (vardecl
        `$WPoly`
        (all a (type) (all b (type) (fun a (fun b [ [ MyPolyData a ] b ]))))
      )
      (abs
        a
        (type)
        (abs
          b
          (type)
          (lam
            dt
            a
            (let
              (nonrec)
              (termbind (strict) (vardecl dt a) dt)
              (lam
                dt
                b
                (let
                  (nonrec)
                  (termbind (strict) (vardecl dt b) dt)
                  [ [ { { Poly a } b } dt ] dt ]
                )
              )
            )
          )
        )
      )
    )
    [
      [ { { `$WPoly` (con integer) } (con integer) } (con integer 1) ]
      (con integer 2)
    ]
  )
)
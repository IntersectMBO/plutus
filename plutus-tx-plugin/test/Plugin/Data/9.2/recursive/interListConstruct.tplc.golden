program
  1.1.0
  ((/\Bool ->
      \(True : Bool)
       (False : Bool)
       (Bool_match :
          Bool -> (all out_Bool. out_Bool -> out_Bool -> out_Bool)) ->
        (/\(InterList :: * -> * -> *) ->
           \(InterCons : all a b. a -> b -> InterList b a -> InterList a b)
            (InterNil : all a b. InterList a b)
            (InterList_match :
               all a b.
                 InterList a b ->
                 (all out_InterList.
                    (a -> b -> InterList b a -> out_InterList) ->
                    out_InterList ->
                    out_InterList)) ->
             InterCons
               {integer}
               {Bool}
               0
               False
               (InterCons
                  {Bool}
                  {integer}
                  False
                  -1
                  (InterCons
                     {integer}
                     {Bool}
                     42
                     True
                     (InterNil {Bool} {integer}))))
          {\a b ->
             ifix
               (\(rec :: ((* -> * -> *) -> *) -> *)
                 (spine :: (* -> * -> *) -> *) ->
                  spine
                    ((\(InterList :: * -> * -> *) a b ->
                        sop [a, b, (InterList b a)] [])
                       (\a b -> rec (\(dat :: * -> * -> *) -> dat a b))))
               (\(dat :: * -> * -> *) -> dat a b)}
          (/\a b ->
             \(arg_0 : a)
              (arg_1 : b)
              (arg_2 :
                 (\a b ->
                    ifix
                      (\(rec :: ((* -> * -> *) -> *) -> *)
                        (spine :: (* -> * -> *) -> *) ->
                         spine
                           ((\(InterList :: * -> * -> *) a b ->
                               sop [a, b, (InterList b a)] [])
                              (\a b -> rec (\(dat :: * -> * -> *) -> dat a b))))
                      (\(dat :: * -> * -> *) -> dat a b))
                   b
                   a) ->
               iwrap
                 (\(rec :: ((* -> * -> *) -> *) -> *)
                   (spine :: (* -> * -> *) -> *) ->
                    spine
                      ((\(InterList :: * -> * -> *) a b ->
                          sop [a, b, (InterList b a)] [])
                         (\a b -> rec (\(dat :: * -> * -> *) -> dat a b))))
                 (\(dat :: * -> * -> *) -> dat a b)
                 (constr
                    (sop
                       [ a
                       , b
                       , ((\a b ->
                             ifix
                               (\(rec :: ((* -> * -> *) -> *) -> *)
                                 (spine :: (* -> * -> *) -> *) ->
                                  spine
                                    ((\(InterList :: * -> * -> *) a b ->
                                        sop [a, b, (InterList b a)] [])
                                       (\a b ->
                                          rec
                                            (\(dat :: * -> * -> *) ->
                                               dat a b))))
                               (\(dat :: * -> * -> *) -> dat a b))
                            b
                            a) ]
                       [])
                    0
                    [arg_0, arg_1, arg_2]))
          (/\a b ->
             iwrap
               (\(rec :: ((* -> * -> *) -> *) -> *)
                 (spine :: (* -> * -> *) -> *) ->
                  spine
                    ((\(InterList :: * -> * -> *) a b ->
                        sop [a, b, (InterList b a)] [])
                       (\a b -> rec (\(dat :: * -> * -> *) -> dat a b))))
               (\(dat :: * -> * -> *) -> dat a b)
               (constr
                  (sop
                     [ a
                     , b
                     , ((\a b ->
                           ifix
                             (\(rec :: ((* -> * -> *) -> *) -> *)
                               (spine :: (* -> * -> *) -> *) ->
                                spine
                                  ((\(InterList :: * -> * -> *) a b ->
                                      sop [a, b, (InterList b a)] [])
                                     (\a b ->
                                        rec
                                          (\(dat :: * -> * -> *) -> dat a b))))
                             (\(dat :: * -> * -> *) -> dat a b))
                          b
                          a) ]
                     [])
                  1
                  []))
          (/\a b ->
             \(x :
                 (\a b ->
                    ifix
                      (\(rec :: ((* -> * -> *) -> *) -> *)
                        (spine :: (* -> * -> *) -> *) ->
                         spine
                           ((\(InterList :: * -> * -> *) a b ->
                               sop [a, b, (InterList b a)] [])
                              (\a b -> rec (\(dat :: * -> * -> *) -> dat a b))))
                      (\(dat :: * -> * -> *) -> dat a b))
                   a
                   b) ->
               /\out_InterList ->
                 \(case_InterCons :
                     a ->
                     b ->
                     (\a b ->
                        ifix
                          (\(rec :: ((* -> * -> *) -> *) -> *)
                            (spine :: (* -> * -> *) -> *) ->
                             spine
                               ((\(InterList :: * -> * -> *) a b ->
                                   sop [a, b, (InterList b a)] [])
                                  (\a b ->
                                     rec (\(dat :: * -> * -> *) -> dat a b))))
                          (\(dat :: * -> * -> *) -> dat a b))
                       b
                       a ->
                     out_InterList)
                  (case_InterNil : out_InterList) ->
                   case
                     out_InterList
                     (unwrap x)
                     [case_InterCons, case_InterNil]))
     {sop [] []}
     (constr (sop [] []) 0 [])
     (constr (sop [] []) 1 [])
     (\(x : sop [] []) ->
        /\out_Bool ->
          \(case_True : out_Bool) (case_False : out_Bool) ->
            case out_Bool x [case_True, case_False]))
(program
  1.1.0
  (let
    (rec)
    (datatypebind
      (datatype
        (tyvardecl List (fun (type) (type)))
        (tyvardecl a (type))
        List_match
        (vardecl Nil [ List a ])
        (vardecl Cons (fun a (fun [ List a ] [ List a ])))
      )
    )
    (let
      (nonrec)
      (termbind
        (nonstrict)
        (vardecl
          build
          (all
            a
            (type)
            (fun (all b (type) (fun (fun a (fun b b)) (fun b b))) [ List a ])
          )
        )
        (abs
          a
          (type)
          (lam
            g
            (all b (type) (fun (fun a (fun b b)) (fun b b)))
            [
              [
                { g [ List a ] }
                (lam ds a (lam ds [ List a ] [ [ { Cons a } ds ] ds ]))
              ]
              { Nil a }
            ]
          )
        )
      )
      [
        { build (con integer) }
        (abs
          a
          (type)
          (lam
            c
            (fun (con integer) (fun a a))
            (lam n a [ [ c (con integer 1) ] n ])
          )
        )
      ]
    )
  )
)
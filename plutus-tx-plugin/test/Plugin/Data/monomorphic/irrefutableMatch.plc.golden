(program
  (let
    (nonrec)
    (datatypebind
      (datatype
        (tyvardecl MyMonoData (type))

        MyMonoData_match
        (vardecl Mono (fun (con integer) (fun (con integer) MyMonoData)))
        (vardecl Mono (fun (con integer) MyMonoData))
        (vardecl Mono (fun (con integer) MyMonoData))
      )
    )
    (datatypebind
      (datatype (tyvardecl Unit (type))  Unit_match (vardecl Unit Unit))
    )
    (lam
      ds
      MyMonoData
      [
        [
          [
            [
              { [ MyMonoData_match ds ] (fun Unit (con integer)) }
              (lam
                default_arg0
                (con integer)
                (lam
                  default_arg1
                  (con integer)
                  (lam
                    thunk
                    Unit
                    (let
                      (nonrec)
                      (typebind (tyvardecl e (type)) (con integer))
                      (error e)
                    )
                  )
                )
              )
            ]
            (lam a (con integer) (lam thunk Unit a))
          ]
          (lam
            default_arg0
            (con integer)
            (lam
              thunk
              Unit
              (let
                (nonrec) (typebind (tyvardecl e (type)) (con integer)) (error e)
              )
            )
          )
        ]
        Unit
      ]
    )
  )
)
(program
  (let
    (nonrec)
    (datatypebind
      (datatype (tyvardecl Unit (type))  Unit_match (vardecl Unit Unit))
    )
    (let
      (nonrec)
      (datatypebind
        (datatype
          (tyvardecl MyMonoData (type))
          
          MyMonoData_match
          (vardecl Mono (fun (con integer) (fun (con integer) MyMonoData)))
          (vardecl Mono (fun (con integer) MyMonoData))
          (vardecl Mono (fun (con integer) MyMonoData))
        )
      )
      (lam
        ds
        MyMonoData
        [
          [
            [
              [
                { [ MyMonoData_match ds ] (fun Unit (con integer)) }
                (lam
                  default_arg0
                  (con integer)
                  (lam
                    default_arg1
                    (con integer)
                    (lam thunk Unit { (abs e (type) (error e)) (con integer) })
                  )
                )
              ]
              (lam a (con integer) (lam thunk Unit a))
            ]
            (lam
              default_arg0
              (con integer)
              (lam thunk Unit { (abs e (type) (error e)) (con integer) })
            )
          ]
          Unit
        ]
      )
    )
  )
)
(program
  (let
    (nonrec)
    (termbind
      (strict)
      (vardecl addInteger (fun (con integer) (fun (con integer) (con integer))))
      (lam
        arg
        (con integer)
        (lam arg (con integer) [ [ (builtin addInteger) arg ] arg ])
      )
    )
    (let
      (nonrec)
      (datatypebind
        (datatype
          (tyvardecl Tuple2 (fun (type) (fun (type) (type))))
          (tyvardecl a (type)) (tyvardecl b (type))
          Tuple2_match
          (vardecl Tuple2 (fun a (fun b [[Tuple2 a] b])))
        )
      )
      (lam
        t
        [[Tuple2 (con integer)] (con integer)]
        (let
          (nonrec)
          (termbind
            (nonstrict) (vardecl wild [[Tuple2 (con integer)] (con integer)]) t
          )
          [
            {
              [ { { Tuple2_match (con integer) } (con integer) } t ]
              (con integer)
            }
            (lam
              ds
              (con integer)
              (lam
                ds
                (con integer)
                [
                  [ addInteger ds ]
                  [
                    {
                      [ { { Tuple2_match (con integer) } (con integer) } wild ]
                      (con integer)
                    }
                    (lam a (con integer) (lam b (con integer) a))
                  ]
                ]
              )
            )
          ]
        )
      )
    )
  )
)
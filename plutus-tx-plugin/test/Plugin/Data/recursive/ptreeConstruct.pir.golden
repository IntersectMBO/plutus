(program
  1.1.0
  (let
    (nonrec)
    (datatypebind
      (datatype
        (tyvardecl Tuple2 (fun (type) (fun (type) (type))))
        (tyvardecl a (type)) (tyvardecl b (type))
        Tuple2_match
        (vardecl Tuple2 (fun a (fun b [ [ Tuple2 a ] b ])))
      )
    )
    (let
      (rec)
      (datatypebind
        (datatype
          (tyvardecl B (fun (type) (type)))
          (tyvardecl a (type))
          B_match
          (vardecl One (fun a [ B a ]))
          (vardecl Two (fun [ B [ [ Tuple2 a ] a ] ] [ B a ]))
        )
      )
      (let
        (nonrec)
        (termbind
          (nonstrict)
          (vardecl `$WOne` (all a (type) (fun a [ B a ])))
          (abs
            a
            (type)
            (lam
              dt
              a
              (let
                (nonrec) (termbind (strict) (vardecl dt a) dt) [ { One a } dt ]
              )
            )
          )
        )
        (termbind
          (nonstrict)
          (vardecl
            `$WTwo` (all a (type) (fun [ B [ [ Tuple2 a ] a ] ] [ B a ]))
          )
          (abs
            a
            (type)
            (lam
              dt
              [ B [ [ Tuple2 a ] a ] ]
              (let
                (nonrec)
                (termbind (strict) (vardecl dt [ B [ [ Tuple2 a ] a ] ]) dt)
                [ { Two a } dt ]
              )
            )
          )
        )
        [
          { `$WTwo` (con integer) }
          [
            { `$WTwo` [ [ Tuple2 (con integer) ] (con integer) ] }
            [
              {
                `$WOne`
                [
                  [ Tuple2 [ [ Tuple2 (con integer) ] (con integer) ] ]
                  [ [ Tuple2 (con integer) ] (con integer) ]
                ]
              }
              [
                [
                  {
                    { Tuple2 [ [ Tuple2 (con integer) ] (con integer) ] }
                    [ [ Tuple2 (con integer) ] (con integer) ]
                  }
                  [
                    [
                      { { Tuple2 (con integer) } (con integer) } (con integer 1)
                    ]
                    (con integer 2)
                  ]
                ]
                [
                  [ { { Tuple2 (con integer) } (con integer) } (con integer 3) ]
                  (con integer 4)
                ]
              ]
            ]
          ]
        ]
      )
    )
  )
)
(program
  (let
    (rec)
    (datatypebind
      (datatype
        (tyvardecl List (fun (type) (type)))
        (tyvardecl a (type))
        Nil_match
        (vardecl Nil [List a]) (vardecl Cons (fun a (fun [List a] [List a])))
      )
    )
    (let
      (nonrec)
      (termbind
        (strict)
        (vardecl
          build
          (all a (type) (fun (all b (type) (fun (fun a (fun b b)) (fun b b))) [List a]))
        )
        (abs
          a
          (type)
          (lam
            g
            (all b (type) (fun (fun a (fun b b)) (fun b b)))
            [ [ { g [List a] } { Cons a } ] { Nil a } ]
          )
        )
      )
      [
        { build (con integer) }
        (abs
          a
          (type)
          (lam
            c
            (fun (con integer) (fun a a))
            (lam n a [ [ c (con integer 1) ] n ])
          )
        )
      ]
    )
  )
)
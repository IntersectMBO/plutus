(program
  (let
    (nonrec)
    (datatypebind
      (datatype
        (tyvardecl Tuple2 (fun (type) (fun (type) (type))))
        (tyvardecl a (type)) (tyvardecl b (type))
        Tuple2_match
        (vardecl Tuple2 (fun a (fun b [[Tuple2 a] b])))
      )
    )
    (let
      (rec)
      (datatypebind
        (datatype
          (tyvardecl B (fun (type) (type)))
          (tyvardecl a (type))
          B_match
          (vardecl One (fun a [B a]))
          (vardecl Two (fun [B [[Tuple2 a] a]] [B a]))
        )
      )
      [
        { Two (con integer) }
        [
          { Two [[Tuple2 (con integer)] (con integer)] }
          [
            {
              One
              [[Tuple2 [[Tuple2 (con integer)] (con integer)]] [[Tuple2 (con integer)] (con integer)]]
            }
            [
              [
                {
                  { Tuple2 [[Tuple2 (con integer)] (con integer)] }
                  [[Tuple2 (con integer)] (con integer)]
                }
                [
                  [ { { Tuple2 (con integer) } (con integer) } (con integer 1) ]
                  (con integer 2)
                ]
              ]
              [
                [ { { Tuple2 (con integer) } (con integer) } (con integer 3) ]
                (con integer 4)
              ]
            ]
          ]
        ]
      ]
    )
  )
)
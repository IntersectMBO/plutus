(program
  1.1.0
  (let
    (nonrec)
    (datatypebind
      (datatype
        (tyvardecl Bool (type))

        Bool_match
        (vardecl True Bool) (vardecl False Bool)
      )
    )
    (datatypebind
      (datatype (tyvardecl Unit (type))  Unit_match (vardecl Unit Unit))
    )
    (termbind
      (strict)
      (vardecl error (all a (type) (fun (con unit) a)))
      (abs a (type) (lam thunk (con unit) (error a)))
    )
    (termbind (strict) (vardecl unitval (con unit)) (con unit ()))
    (termbind (nonstrict) (vardecl joinError Unit) [ { error Unit } unitval ])
    (termbind
      (nonstrict)
      (vardecl joinError (fun Bool (fun Bool Unit)))
      (lam
        x
        Bool
        (lam
          y
          Bool
          {
            [
              [
                { [ Bool_match x ] (all dead (type) Unit) }
                (abs
                  dead
                  (type)
                  {
                    [
                      [
                        { [ Bool_match y ] (all dead (type) Unit) }
                        (abs dead (type) joinError)
                      ]
                      (abs dead (type) Unit)
                    ]
                    (all dead (type) dead)
                  }
                )
              ]
              (abs dead (type) Unit)
            ]
            (all dead (type) dead)
          }
        )
      )
    )
    joinError
  )
)
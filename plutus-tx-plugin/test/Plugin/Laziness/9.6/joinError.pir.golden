program
  1.1.0
  (let
    data Unit | Unit_match where
      Unit : Unit
    data Bool | Bool_match where
      True : Bool
      False : Bool
    !error : all a. unit -> a = /\a -> \(thunk : unit) -> error {a}
    !unitval : unit = ()
    ~joinError : Bool -> Bool -> Unit
      = \(x : Bool) ->
          let
            !x : Bool = x
          in
          \(y : Bool) ->
            let
              !y : Bool = y
            in
            Bool_match
              x
              {all dead. Unit}
              (/\dead ->
                 Bool_match
                   y
                   {all dead. Unit}
                   (/\dead -> error {Unit} unitval)
                   (/\dead -> Unit)
                   {all dead. dead})
              (/\dead -> Unit)
              {all dead. dead}
  in
  joinError)
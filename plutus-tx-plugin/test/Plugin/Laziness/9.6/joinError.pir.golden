(program
  1.1.0
  (let
    (nonrec)
    (datatypebind
      (datatype (tyvardecl Unit (type))  Unit_match (vardecl Unit Unit))
    )
    (datatypebind
      (datatype
        (tyvardecl Bool (type))

        Bool_match
        (vardecl True Bool) (vardecl False Bool)
      )
    )
    (termbind
      (strict)
      (vardecl error (all a (type) (fun (con unit) a)))
      (abs a (type) (lam thunk (con unit) (error a)))
    )
    (termbind (strict) (vardecl unitval (con unit)) (con unit ()))
    (termbind
      (nonstrict)
      (vardecl joinError (fun Bool (fun Bool Unit)))
      (lam
        x
        Bool
        (let
          (nonrec)
          (termbind (strict) (vardecl x Bool) x)
          (lam
            y
            Bool
            (let
              (nonrec)
              (termbind (strict) (vardecl y Bool) y)
              {
                [
                  [
                    { [ Bool_match x ] (all dead (type) Unit) }
                    (abs
                      dead
                      (type)
                      {
                        [
                          [
                            { [ Bool_match y ] (all dead (type) Unit) }
                            (abs dead (type) [ { error Unit } unitval ])
                          ]
                          (abs dead (type) Unit)
                        ]
                        (all dead (type) dead)
                      }
                    )
                  ]
                  (abs dead (type) Unit)
                ]
                (all dead (type) dead)
              }
            )
          )
        )
      )
    )
    joinError
  )
)
(program
  (let
    (nonrec)
    (datatypebind
      (datatype
        (tyvardecl Maybe (fun (type) (type)))
        (tyvardecl a (type))
        Maybe_match
        (vardecl Just (fun a [Maybe a])) (vardecl Nothing [Maybe a])
      )
    )
    (datatypebind
      (datatype (tyvardecl Unit (type))  Unit_match (vardecl Unit Unit))
    )
    (termbind
      (strict)
      (vardecl
        fApplicativeMaybe_c
        (all a (type) (all b (type) (fun [Maybe (fun a b)] (fun [Maybe a] [Maybe b]))))
      )
      (abs
        a
        (type)
        (abs
          b
          (type)
          (lam
            ds
            [Maybe (fun a b)]
            (lam
              ds
              [Maybe a]
              [
                [
                  [
                    { [ { Maybe_match (fun a b) } ds ] (fun Unit [Maybe b]) }
                    (lam
                      ipv
                      (fun a b)
                      (lam
                        thunk
                        Unit
                        [
                          [
                            [
                              { [ { Maybe_match a } ds ] (fun Unit [Maybe b]) }
                              (lam
                                ipv
                                a
                                (lam thunk Unit [ { Just b } [ ipv ipv ] ])
                              )
                            ]
                            (lam thunk Unit { Nothing b })
                          ]
                          Unit
                        ]
                      )
                    )
                  ]
                  (lam thunk Unit { Nothing b })
                ]
                Unit
              ]
            )
          )
        )
      )
    )
    (termbind
      (strict)
      (vardecl
        fFunctorMaybe_cfmap
        (all a (type) (all b (type) (fun (fun a b) (fun [Maybe a] [Maybe b]))))
      )
      (abs
        a
        (type)
        (abs
          b
          (type)
          (lam
            f
            (fun a b)
            (lam
              ds
              [Maybe a]
              [
                [
                  [
                    { [ { Maybe_match a } ds ] (fun Unit [Maybe b]) }
                    (lam a a (lam thunk Unit [ { Just b } [ f a ] ]))
                  ]
                  (lam thunk Unit { Nothing b })
                ]
                Unit
              ]
            )
          )
        )
      )
    )
    (datatypebind
      (datatype
        (tyvardecl Applicative (fun (fun (type) (type)) (type)))
        (tyvardecl f (fun (type) (type)))
        Applicative_match
        (vardecl
          CConsApplicative
          (fun [(lam f (fun (type) (type)) (all a (type) (all b (type) (fun (fun a b) (fun [f a] [f b]))))) f] (fun (all a (type) (fun a [f a])) (fun (all a (type) (all b (type) (fun [f (fun a b)] (fun [f a] [f b])))) [Applicative f])))
        )
      )
    )
    (termbind
      (nonstrict)
      (vardecl fApplicativeMaybe [Applicative Maybe])
      [
        [ [ { CConsApplicative Maybe } fFunctorMaybe_cfmap ] Just ]
        fApplicativeMaybe_c
      ]
    )
    (let
      (rec)
      (datatypebind
        (datatype
          (tyvardecl List (fun (type) (type)))
          (tyvardecl a (type))
          Nil_match
          (vardecl Nil [List a]) (vardecl Cons (fun a (fun [List a] [List a])))
        )
      )
      (let
        (nonrec)
        (termbind
          (strict)
          (vardecl
            build
            (all a (type) (fun (all b (type) (fun (fun a (fun b b)) (fun b b))) [List a]))
          )
          (abs
            a
            (type)
            (lam
              g
              (all b (type) (fun (fun a (fun b b)) (fun b b)))
              [ [ { g [List a] } { Cons a } ] { Nil a } ]
            )
          )
        )
        (termbind
          (strict)
          (vardecl id (all a (type) (fun a a)))
          (abs a (type) (lam x a x))
        )
        (termbind
          (strict)
          (vardecl
            p1Applicative
            (all f (fun (type) (type)) (fun [Applicative f] [(lam f (fun (type) (type)) (all a (type) (all b (type) (fun (fun a b) (fun [f a] [f b]))))) f]))
          )
          (abs
            f
            (fun (type) (type))
            (lam
              v
              [Applicative f]
              [
                {
                  [ { Applicative_match f } v ]
                  [(lam f (fun (type) (type)) (all a (type) (all b (type) (fun (fun a b) (fun [f a] [f b]))))) f]
                }
                (lam
                  v
                  [(lam f (fun (type) (type)) (all a (type) (all b (type) (fun (fun a b) (fun [f a] [f b]))))) f]
                  (lam
                    v
                    (all a (type) (fun a [f a]))
                    (lam
                      v
                      (all a (type) (all b (type) (fun [f (fun a b)] (fun [f a] [f b]))))
                      v
                    )
                  )
                )
              ]
            )
          )
        )
        (termbind
          (strict)
          (vardecl
            bad_name
            (all f (fun (type) (type)) (fun [Applicative f] (all a (type) (all b (type) (fun [f (fun a b)] (fun [f a] [f b]))))))
          )
          (abs
            f
            (fun (type) (type))
            (lam
              v
              [Applicative f]
              [
                {
                  [ { Applicative_match f } v ]
                  (all a (type) (all b (type) (fun [f (fun a b)] (fun [f a] [f b]))))
                }
                (lam
                  v
                  [(lam f (fun (type) (type)) (all a (type) (all b (type) (fun (fun a b) (fun [f a] [f b]))))) f]
                  (lam
                    v
                    (all a (type) (fun a [f a]))
                    (lam
                      v
                      (all a (type) (all b (type) (fun [f (fun a b)] (fun [f a] [f b]))))
                      v
                    )
                  )
                )
              ]
            )
          )
        )
        (termbind
          (strict)
          (vardecl
            pure
            (all f (fun (type) (type)) (fun [Applicative f] (all a (type) (fun a [f a]))))
          )
          (abs
            f
            (fun (type) (type))
            (lam
              v
              [Applicative f]
              [
                { [ { Applicative_match f } v ] (all a (type) (fun a [f a])) }
                (lam
                  v
                  [(lam f (fun (type) (type)) (all a (type) (all b (type) (fun (fun a b) (fun [f a] [f b]))))) f]
                  (lam
                    v
                    (all a (type) (fun a [f a]))
                    (lam
                      v
                      (all a (type) (all b (type) (fun [f (fun a b)] (fun [f a] [f b]))))
                      v
                    )
                  )
                )
              ]
            )
          )
        )
        (let
          (rec)
          (termbind
            (nonstrict)
            (vardecl
              traverse
              (all f (fun (type) (type)) (all a (type) (all b (type) (fun [Applicative f] (fun (fun a [f b]) (fun [List a] [f [List b]]))))))
            )
            (abs
              f
              (fun (type) (type))
              (abs
                a
                (type)
                (abs
                  b
                  (type)
                  (lam
                    dApplicative
                    [Applicative f]
                    (let
                      (nonrec)
                      (termbind
                        (nonstrict)
                        (vardecl
                          dFunctor
                          [(lam f (fun (type) (type)) (all a (type) (all b (type) (fun (fun a b) (fun [f a] [f b]))))) f]
                        )
                        [ { p1Applicative f } dApplicative ]
                      )
                      (lam
                        ds
                        (fun a [f b])
                        (lam
                          ds
                          [List a]
                          [
                            [
                              [
                                {
                                  [ { Nil_match a } ds ] (fun Unit [f [List b]])
                                }
                                (lam
                                  thunk
                                  Unit
                                  [
                                    { [ { pure f } dApplicative ] [List b] }
                                    { Nil b }
                                  ]
                                )
                              ]
                              (lam
                                h
                                a
                                (lam
                                  t
                                  [List a]
                                  (lam
                                    thunk
                                    Unit
                                    [
                                      [
                                        {
                                          {
                                            [ { bad_name f } dApplicative ]
                                            [List b]
                                          }
                                          [List b]
                                        }
                                        [
                                          [
                                            {
                                              { dFunctor b }
                                              (fun [List b] [List b])
                                            }
                                            { Cons b }
                                          ]
                                          [ ds h ]
                                        ]
                                      ]
                                      [
                                        [
                                          [
                                            { { { traverse f } a } b }
                                            dApplicative
                                          ]
                                          ds
                                        ]
                                        t
                                      ]
                                    ]
                                  )
                                )
                              )
                            ]
                            Unit
                          ]
                        )
                      )
                    )
                  )
                )
              )
            )
          )
          (let
            (nonrec)
            (termbind
              (strict)
              (vardecl
                sequence
                (all f (fun (type) (type)) (all a (type) (fun [Applicative f] (fun [List [f a]] [f [List a]]))))
              )
              (abs
                f
                (fun (type) (type))
                (abs
                  a
                  (type)
                  (lam
                    dApplicative
                    [Applicative f]
                    [
                      [ { { { traverse f } [f a] } a } dApplicative ]
                      { id [f a] }
                    ]
                  )
                )
              )
            )
            [
              [ { { sequence Maybe } (con integer) } fApplicativeMaybe ]
              [
                { build [Maybe (con integer)] }
                (abs
                  a
                  (type)
                  (lam
                    c
                    (fun [Maybe (con integer)] (fun a a))
                    (lam
                      n
                      a
                      [
                        [ c [ { Just (con integer) } (con integer 1) ] ]
                        [ [ c [ { Just (con integer) } (con integer 2) ] ] n ]
                      ]
                    )
                  )
                )
              ]
            ]
          )
        )
      )
    )
  )
)
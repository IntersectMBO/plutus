(program
  (let
    (nonrec)
    (datatypebind
      (datatype
        (tyvardecl DefaultMethods (fun (type) (type)))
        (tyvardecl a (type))
        DefaultMethods_match
        (vardecl
          CConsDefaultMethods
          (fun (fun a (con integer)) (fun (fun a (con integer)) [DefaultMethods a]))
        )
      )
    )
    (let
      (nonrec)
      (termbind
        (strict)
        (vardecl
          method (all a (type) (fun [DefaultMethods a] (fun a (con integer))))
        )
        (abs
          a
          (type)
          (lam
            v
            [DefaultMethods a]
            [
              { [ { DefaultMethods_match a } v ] (fun a (con integer)) }
              (lam v (fun a (con integer)) (lam v (fun a (con integer)) v))
            ]
          )
        )
      )
      (let
        (nonrec)
        (termbind
          (strict)
          (vardecl
            addInteger (fun (con integer) (fun (con integer) (con integer)))
          )
          (lam
            arg
            (con integer)
            (lam arg (con integer) [ [ (builtin addInteger) arg ] arg ])
          )
        )
        (let
          (nonrec)
          (termbind
            (strict)
            (vardecl
              fDefaultMethodsInteger_cmethod (fun (con integer) (con integer))
            )
            (lam a (con integer) [ [ addInteger a ] (con 1) ])
          )
          (let
            (nonrec)
            (termbind
              (strict)
              (vardecl
                fDefaultMethodsInteger_cmethod (fun (con integer) (con integer))
              )
              (lam a (con integer) a)
            )
            (let
              (nonrec)
              (termbind
                (nonstrict)
                (vardecl fDefaultMethodsInteger [DefaultMethods (con integer)])
                [
                  [
                    { CConsDefaultMethods (con integer) }
                    fDefaultMethodsInteger_cmethod
                  ]
                  fDefaultMethodsInteger_cmethod
                ]
              )
              (let
                (nonrec)
                (termbind
                  (strict)
                  (vardecl
                    f
                    (all a (type) (fun [DefaultMethods a] (fun a (con integer))))
                  )
                  (abs
                    a
                    (type)
                    (lam
                      dDefaultMethods
                      [DefaultMethods a]
                      (lam a a [ [ { method a } dDefaultMethods ] a ])
                    )
                  )
                )
                (lam
                  ds
                  (con integer)
                  [ [ { f (con integer) } fDefaultMethodsInteger ] ds ]
                )
              )
            )
          )
        )
      )
    )
  )
)
(program
  1.1.0
  (let
    (nonrec)
    (datatypebind
      (datatype
        (tyvardecl Tuple2 (fun (type) (fun (type) (type))))
        (tyvardecl a (type)) (tyvardecl b (type))
        Tuple2_match
        (vardecl Tuple2 (fun a (fun b [ [ Tuple2 a ] b ])))
      )
    )
    (termbind
      (strict)
      (vardecl addInteger (fun (con integer) (fun (con integer) (con integer))))
      (builtin addInteger)
    )
    (termbind
      (nonstrict)
      (vardecl
        `$csize`
        (all
          a
          (type)
          (all
            b
            (type)
            (fun
              [ (lam a (type) (fun a (con integer))) a ]
              (fun
                [ (lam a (type) (fun a (con integer))) b ]
                (fun [ [ Tuple2 a ] b ] (con integer))
              )
            )
          )
        )
      )
      (abs
        a
        (type)
        (abs
          b
          (type)
          (lam
            `$dSized`
            [ (lam a (type) (fun a (con integer))) a ]
            (lam
              `$dSized`
              [ (lam a (type) (fun a (con integer))) b ]
              (lam
                ds
                [ [ Tuple2 a ] b ]
                [
                  { [ { { Tuple2_match a } b } ds ] (con integer) }
                  (lam
                    a
                    a
                    (lam
                      b
                      b
                      (let
                        (nonrec)
                        (termbind
                          (strict) (vardecl x (con integer)) [ `$dSized` a ]
                        )
                        (termbind
                          (strict) (vardecl y (con integer)) [ `$dSized` b ]
                        )
                        [ [ addInteger x ] y ]
                      )
                    )
                  )
                ]
              )
            )
          )
        )
      )
    )
    (termbind
      (nonstrict)
      (vardecl
        `$fSizedTuple2`
        (all
          a
          (type)
          (all
            b
            (type)
            (fun
              [ (lam a (type) (fun a (con integer))) a ]
              (fun
                [ (lam a (type) (fun a (con integer))) b ]
                [ (lam a (type) (fun a (con integer))) [ [ Tuple2 a ] b ] ]
              )
            )
          )
        )
      )
      `$csize`
    )
    (termbind
      (nonstrict)
      (vardecl `$csize` (fun (con integer) (con integer)))
      (lam x (con integer) x)
    )
    (termbind
      (nonstrict)
      (vardecl
        `$fSizedInteger` [ (lam a (type) (fun a (con integer))) (con integer) ]
      )
      `$csize`
    )
    (termbind
      (nonstrict)
      (vardecl
        `$dSized`
        [
          (lam a (type) (fun a (con integer)))
          [ [ Tuple2 (con integer) ] (con integer) ]
        ]
      )
      [
        [ { { `$fSizedTuple2` (con integer) } (con integer) } `$fSizedInteger` ]
        `$fSizedInteger`
      ]
    )
    (termbind
      (nonstrict)
      (vardecl
        size
        (all
          a
          (type)
          (fun [ (lam a (type) (fun a (con integer))) a ] (fun a (con integer)))
        )
      )
      (abs a (type) (lam v [ (lam a (type) (fun a (con integer))) a ] v))
    )
    (lam
      ds
      (con integer)
      (let
        (nonrec)
        (termbind (strict) (vardecl ds (con integer)) ds)
        (lam
          ds
          (con integer)
          (let
            (nonrec)
            (termbind (strict) (vardecl ds (con integer)) ds)
            [
              [ { size [ [ Tuple2 (con integer) ] (con integer) ] } `$dSized` ]
              [ [ { { Tuple2 (con integer) } (con integer) } ds ] ds ]
            ]
          )
        )
      )
    )
  )
)
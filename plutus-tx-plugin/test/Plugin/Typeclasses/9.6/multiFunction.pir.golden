let
  data Animal | Animal_match where
    Cat : Animal
    Dog : Animal
  data Bool | Bool_match where
    True : Bool
    False : Bool
  data (PersonLike :: * -> *) a | PersonLike_match where
    CConsPersonLike : (a -> integer) -> (a -> Animal -> Bool) -> PersonLike a
  ~age : all a. PersonLike a -> a -> integer
    = /\a ->
        \(v : PersonLike a) ->
          PersonLike_match
            {a}
            v
            {a -> integer}
            (\(v : a -> integer) (v : a -> Animal -> Bool) -> v)
  !ifThenElse : all a. bool -> a -> a -> a = ifThenElse
  !lessThanInteger : integer -> integer -> bool = lessThanInteger
  ~lessThanInteger : integer -> integer -> Bool
    = \(x : integer) ->
        let
          !x : integer = x
        in
        \(y : integer) ->
          let
            !y : integer = y
            !b : bool = lessThanInteger x y
          in
          ifThenElse {Bool} b True False
  ~likesAnimal : all a. PersonLike a -> a -> Animal -> Bool
    = /\a ->
        \(v : PersonLike a) ->
          PersonLike_match
            {a}
            v
            {a -> Animal -> Bool}
            (\(v : a -> integer) (v : a -> Animal -> Bool) -> v)
  ~predicate : all p. PersonLike p -> p -> Bool
    = /\p ->
        \(`$dPersonLike` : PersonLike p) (p : p) ->
          let
            !p : p = p
          in
          Bool_match
            (likesAnimal {p} `$dPersonLike` p Cat)
            {all dead. Bool}
            (/\dead -> lessThanInteger (age {p} `$dPersonLike` p) 30)
            (/\dead -> False)
            {all dead. dead}
  data Person | Person_match where
    Jane : Person
    Jim : Person
  ~`$cage` : Person -> integer
    = \(ds : Person) -> Person_match ds {integer} 35 30
  ~`$clikesAnimal` : Person -> Animal -> Bool
    = \(ds : Person) (ds : Animal) ->
        Person_match
          ds
          {all dead. Bool}
          (/\dead ->
             Animal_match
               ds
               {all dead. Bool}
               (/\dead -> True)
               (/\dead -> False)
               {all dead. dead})
          (/\dead -> False)
          {all dead. dead}
  ~`$fPersonLikePerson` : PersonLike Person
    = CConsPersonLike {Person} `$cage` `$clikesAnimal`
in
\(ds : Person) ->
  let
    !ds : Person = ds
  in
  predicate {Person} `$fPersonLikePerson` ds
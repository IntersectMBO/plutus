(program
  1.1.0
  (let
    (nonrec)
    (datatypebind
      (datatype
        (tyvardecl Bool (type))

        Bool_match
        (vardecl True Bool) (vardecl False Bool)
      )
    )
    (termbind
      (nonstrict)
      (vardecl `&&` (fun Bool (fun Bool Bool)))
      (lam
        l
        Bool
        (lam
          r
          Bool
          {
            [
              [
                { [ Bool_match l ] (all dead (type) Bool) } (abs dead (type) r)
              ]
              (abs dead (type) False)
            ]
            (all dead (type) dead)
          }
        )
      )
    )
    (datatypebind
      (datatype
        (tyvardecl Animal (type))

        Animal_match
        (vardecl Cat Animal) (vardecl Dog Animal)
      )
    )
    (datatypebind
      (datatype
        (tyvardecl PersonLike (fun (type) (type)))
        (tyvardecl a (type))
        PersonLike_match
        (vardecl
          CConsPersonLike
          (fun
            (fun a (con integer))
            (fun (fun a (fun Animal Bool)) [ PersonLike a ])
          )
        )
      )
    )
    (termbind
      (nonstrict)
      (vardecl age (all a (type) (fun [ PersonLike a ] (fun a (con integer)))))
      (abs
        a
        (type)
        (lam
          v
          [ PersonLike a ]
          [
            { [ { PersonLike_match a } v ] (fun a (con integer)) }
            (lam v (fun a (con integer)) (lam v (fun a (fun Animal Bool)) v))
          ]
        )
      )
    )
    (termbind
      (strict)
      (vardecl ifThenElse (all a (type) (fun (con bool) (fun a (fun a a)))))
      (builtin ifThenElse)
    )
    (termbind
      (strict)
      (vardecl
        lessThanInteger (fun (con integer) (fun (con integer) (con bool)))
      )
      (builtin lessThanInteger)
    )
    (termbind
      (nonstrict)
      (vardecl lessThanInteger (fun (con integer) (fun (con integer) Bool)))
      (lam
        x
        (con integer)
        (let
          (nonrec)
          (termbind (strict) (vardecl x (con integer)) x)
          (lam
            y
            (con integer)
            (let
              (nonrec)
              (termbind (strict) (vardecl y (con integer)) y)
              (termbind
                (strict) (vardecl b (con bool)) [ [ lessThanInteger x ] y ]
              )
              [ [ [ { ifThenElse Bool } b ] True ] False ]
            )
          )
        )
      )
    )
    (termbind
      (nonstrict)
      (vardecl
        likesAnimal
        (all a (type) (fun [ PersonLike a ] (fun a (fun Animal Bool))))
      )
      (abs
        a
        (type)
        (lam
          v
          [ PersonLike a ]
          [
            { [ { PersonLike_match a } v ] (fun a (fun Animal Bool)) }
            (lam v (fun a (con integer)) (lam v (fun a (fun Animal Bool)) v))
          ]
        )
      )
    )
    (termbind
      (nonstrict)
      (vardecl predicate (all p (type) (fun [ PersonLike p ] (fun p Bool))))
      (abs
        p
        (type)
        (lam
          `$dPersonLike`
          [ PersonLike p ]
          (lam
            p
            p
            (let
              (nonrec)
              (termbind (strict) (vardecl p p) p)
              [
                [ `&&` [ [ [ { likesAnimal p } `$dPersonLike` ] p ] Cat ] ]
                [
                  [ lessThanInteger [ [ { age p } `$dPersonLike` ] p ] ]
                  (con integer 30)
                ]
              ]
            )
          )
        )
      )
    )
    (datatypebind
      (datatype
        (tyvardecl Person (type))

        Person_match
        (vardecl Jane Person) (vardecl Jim Person)
      )
    )
    (termbind
      (nonstrict)
      (vardecl `$cage` (fun Person (con integer)))
      (lam
        ds
        Person
        [
          [ { [ Person_match ds ] (con integer) } (con integer 35) ]
          (con integer 30)
        ]
      )
    )
    (termbind
      (nonstrict)
      (vardecl `$clikesAnimal` (fun Person (fun Animal Bool)))
      (lam
        ds
        Person
        (lam
          ds
          Animal
          {
            [
              [
                { [ Person_match ds ] (all dead (type) Bool) }
                (abs
                  dead
                  (type)
                  {
                    [
                      [
                        { [ Animal_match ds ] (all dead (type) Bool) }
                        (abs dead (type) True)
                      ]
                      (abs dead (type) False)
                    ]
                    (all dead (type) dead)
                  }
                )
              ]
              (abs dead (type) False)
            ]
            (all dead (type) dead)
          }
        )
      )
    )
    (termbind
      (nonstrict)
      (vardecl `$fPersonLikePerson` [ PersonLike Person ])
      [ [ { CConsPersonLike Person } `$cage` ] `$clikesAnimal` ]
    )
    (lam
      ds
      Person
      (let
        (nonrec)
        (termbind (strict) (vardecl ds Person) ds)
        [ [ { predicate Person } `$fPersonLikePerson` ] ds ]
      )
    )
  )
)
program
  1.1.0
  (let
    data Bool | Bool_match where
      True : Bool
      False : Bool
    data Ordering | Ordering_match where
      EQ : Ordering
      GT : Ordering
      LT : Ordering
    !equalsInteger : integer -> integer -> bool = equalsInteger
    !ifThenElse : all a. bool -> a -> a -> a = ifThenElse
    !lessThanEqualsInteger : integer -> integer -> bool = lessThanEqualsInteger
    ~`$fOrdInteger_$ccompare` : integer -> integer -> Ordering
      = \(eta : integer) ->
          let
            !x : integer = eta
          in
          \(eta : integer) ->
            let
              !y : integer = eta
              !b : bool = equalsInteger x y
            in
            Bool_match
              (ifThenElse {Bool} b True False)
              {all dead. Ordering}
              (/\dead -> EQ)
              (/\dead ->
                 let
                   !b : bool = lessThanEqualsInteger x y
                 in
                 Bool_match
                   (ifThenElse {Bool} b True False)
                   {all dead. Ordering}
                   (/\dead -> LT)
                   (/\dead -> GT)
                   {all dead. dead})
              {all dead. dead}
  in
  `$fOrdInteger_$ccompare`)
(program
  1.1.0
  (let
    (nonrec)
    (termbind
      (strict)
      (vardecl equalsInteger (fun (con integer) (fun (con integer) (con bool))))
      (builtin equalsInteger)
    )
    (termbind
      (strict)
      (vardecl
        lessThanEqualsInteger (fun (con integer) (fun (con integer) (con bool)))
      )
      (builtin lessThanEqualsInteger)
    )
    (termbind
      (strict)
      (vardecl ifThenElse (all a (type) (fun (con bool) (fun a (fun a a)))))
      (builtin ifThenElse)
    )
    (datatypebind
      (datatype
        (tyvardecl Bool (type))

        Bool_match
        (vardecl True Bool) (vardecl False Bool)
      )
    )
    (datatypebind
      (datatype
        (tyvardecl Ordering (type))

        Ordering_match
        (vardecl EQ Ordering) (vardecl GT Ordering) (vardecl LT Ordering)
      )
    )
    (termbind
      (nonstrict)
      (vardecl
        `$fOrdInteger_$ccompare`
        (fun (con integer) (fun (con integer) Ordering))
      )
      (lam
        eta
        (con integer)
        (let
          (nonrec)
          (termbind (strict) (vardecl x (con integer)) eta)
          (lam
            eta
            (con integer)
            (let
              (nonrec)
              (termbind (strict) (vardecl y (con integer)) eta)
              (termbind
                (strict) (vardecl b (con bool)) [ [ equalsInteger x ] y ]
              )
              {
                [
                  [
                    {
                      [
                        Bool_match [ [ [ { ifThenElse Bool } b ] True ] False ]
                      ]
                      (all dead (type) Ordering)
                    }
                    (abs dead (type) EQ)
                  ]
                  (abs
                    dead
                    (type)
                    (let
                      (nonrec)
                      (termbind
                        (strict)
                        (vardecl b (con bool))
                        [ [ lessThanEqualsInteger x ] y ]
                      )
                      {
                        [
                          [
                            {
                              [
                                Bool_match
                                [ [ [ { ifThenElse Bool } b ] True ] False ]
                              ]
                              (all dead (type) Ordering)
                            }
                            (abs dead (type) LT)
                          ]
                          (abs dead (type) GT)
                        ]
                        (all dead (type) dead)
                      }
                    )
                  )
                ]
                (all dead (type) dead)
              }
            )
          )
        )
      )
    )
    (termbind
      (nonstrict)
      (vardecl
        `$fOrdInteger_$cmax`
        (fun (con integer) (fun (con integer) (con integer)))
      )
      (lam
        x
        (con integer)
        (let
          (nonrec)
          (termbind (strict) (vardecl x (con integer)) x)
          (lam
            y
            (con integer)
            (let
              (nonrec)
              (termbind (strict) (vardecl y (con integer)) y)
              (termbind
                (strict)
                (vardecl b (con bool))
                [ [ lessThanEqualsInteger x ] y ]
              )
              {
                [
                  [
                    {
                      [
                        Bool_match [ [ [ { ifThenElse Bool } b ] True ] False ]
                      ]
                      (all dead (type) (con integer))
                    }
                    (abs dead (type) y)
                  ]
                  (abs dead (type) x)
                ]
                (all dead (type) dead)
              }
            )
          )
        )
      )
    )
    (termbind
      (nonstrict)
      (vardecl
        `$fOrdInteger_$cmin`
        (fun (con integer) (fun (con integer) (con integer)))
      )
      (lam
        x
        (con integer)
        (let
          (nonrec)
          (termbind (strict) (vardecl x (con integer)) x)
          (lam
            y
            (con integer)
            (let
              (nonrec)
              (termbind (strict) (vardecl y (con integer)) y)
              (termbind
                (strict)
                (vardecl b (con bool))
                [ [ lessThanEqualsInteger x ] y ]
              )
              {
                [
                  [
                    {
                      [
                        Bool_match [ [ [ { ifThenElse Bool } b ] True ] False ]
                      ]
                      (all dead (type) (con integer))
                    }
                    (abs dead (type) x)
                  ]
                  (abs dead (type) y)
                ]
                (all dead (type) dead)
              }
            )
          )
        )
      )
    )
    (termbind
      (nonstrict)
      (vardecl equalsInteger (fun (con integer) (fun (con integer) Bool)))
      (lam
        x
        (con integer)
        (let
          (nonrec)
          (termbind (strict) (vardecl x (con integer)) x)
          (lam
            y
            (con integer)
            (let
              (nonrec)
              (termbind (strict) (vardecl y (con integer)) y)
              (termbind
                (strict) (vardecl b (con bool)) [ [ equalsInteger x ] y ]
              )
              [ [ [ { ifThenElse Bool } b ] True ] False ]
            )
          )
        )
      )
    )
    (termbind
      (strict)
      (vardecl
        lessThanInteger (fun (con integer) (fun (con integer) (con bool)))
      )
      (builtin lessThanInteger)
    )
    (termbind
      (nonstrict)
      (vardecl
        greaterThanEqualsInteger (fun (con integer) (fun (con integer) Bool))
      )
      (lam
        x
        (con integer)
        (let
          (nonrec)
          (termbind (strict) (vardecl x (con integer)) x)
          (lam
            y
            (con integer)
            (let
              (nonrec)
              (termbind (strict) (vardecl y (con integer)) y)
              [
                [ [ { ifThenElse Bool } [ [ lessThanInteger x ] y ] ] False ]
                True
              ]
            )
          )
        )
      )
    )
    (termbind
      (nonstrict)
      (vardecl greaterThanInteger (fun (con integer) (fun (con integer) Bool)))
      (lam
        x
        (con integer)
        (let
          (nonrec)
          (termbind (strict) (vardecl x (con integer)) x)
          (lam
            y
            (con integer)
            (let
              (nonrec)
              (termbind (strict) (vardecl y (con integer)) y)
              [
                [
                  [ { ifThenElse Bool } [ [ lessThanEqualsInteger x ] y ] ]
                  False
                ]
                True
              ]
            )
          )
        )
      )
    )
    (termbind
      (nonstrict)
      (vardecl
        lessThanEqualsInteger (fun (con integer) (fun (con integer) Bool))
      )
      (lam
        x
        (con integer)
        (let
          (nonrec)
          (termbind (strict) (vardecl x (con integer)) x)
          (lam
            y
            (con integer)
            (let
              (nonrec)
              (termbind (strict) (vardecl y (con integer)) y)
              (termbind
                (strict)
                (vardecl b (con bool))
                [ [ lessThanEqualsInteger x ] y ]
              )
              [ [ [ { ifThenElse Bool } b ] True ] False ]
            )
          )
        )
      )
    )
    (termbind
      (nonstrict)
      (vardecl lessThanInteger (fun (con integer) (fun (con integer) Bool)))
      (lam
        x
        (con integer)
        (let
          (nonrec)
          (termbind (strict) (vardecl x (con integer)) x)
          (lam
            y
            (con integer)
            (let
              (nonrec)
              (termbind (strict) (vardecl y (con integer)) y)
              (termbind
                (strict) (vardecl b (con bool)) [ [ lessThanInteger x ] y ]
              )
              [ [ [ { ifThenElse Bool } b ] True ] False ]
            )
          )
        )
      )
    )
    (datatypebind
      (datatype
        (tyvardecl Ord (fun (type) (type)))
        (tyvardecl a (type))
        Ord_match
        (vardecl
          CConsOrd
          (fun
            [ (lam a (type) (fun a (fun a Bool))) a ]
            (fun
              (fun a (fun a Ordering))
              (fun
                (fun a (fun a Bool))
                (fun
                  (fun a (fun a Bool))
                  (fun
                    (fun a (fun a Bool))
                    (fun
                      (fun a (fun a Bool))
                      (fun (fun a (fun a a)) (fun (fun a (fun a a)) [ Ord a ]))
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
    (termbind
      (nonstrict)
      (vardecl `$fOrdInteger` [ Ord (con integer) ])
      [
        [
          [
            [
              [
                [
                  [
                    [ { CConsOrd (con integer) } equalsInteger ]
                    `$fOrdInteger_$ccompare`
                  ]
                  lessThanInteger
                ]
                lessThanEqualsInteger
              ]
              greaterThanInteger
            ]
            greaterThanEqualsInteger
          ]
          `$fOrdInteger_$cmax`
        ]
        `$fOrdInteger_$cmin`
      ]
    )
    (termbind
      (nonstrict)
      (vardecl compare (all a (type) (fun [ Ord a ] (fun a (fun a Ordering)))))
      (abs
        a
        (type)
        (lam
          v
          [ Ord a ]
          [
            { [ { Ord_match a } v ] (fun a (fun a Ordering)) }
            (lam
              v
              [ (lam a (type) (fun a (fun a Bool))) a ]
              (lam
                v
                (fun a (fun a Ordering))
                (lam
                  v
                  (fun a (fun a Bool))
                  (lam
                    v
                    (fun a (fun a Bool))
                    (lam
                      v
                      (fun a (fun a Bool))
                      (lam
                        v
                        (fun a (fun a Bool))
                        (lam v (fun a (fun a a)) (lam v (fun a (fun a a)) v))
                      )
                    )
                  )
                )
              )
            )
          ]
        )
      )
    )
    (termbind
      (nonstrict)
      (vardecl
        opCompare (all a (type) (fun [ Ord a ] (fun a (fun a Ordering))))
      )
      (abs
        a
        (type)
        (lam
          `$dOrd`
          [ Ord a ]
          (lam
            a
            a
            (let
              (nonrec)
              (termbind (strict) (vardecl a a) a)
              (lam
                b
                a
                (let
                  (nonrec)
                  (termbind (strict) (vardecl b a) b)
                  {
                    [
                      [
                        [
                          {
                            [
                              Ordering_match
                              [ [ [ { compare a } `$dOrd` ] a ] b ]
                            ]
                            (all dead (type) Ordering)
                          }
                          (abs dead (type) EQ)
                        ]
                        (abs dead (type) LT)
                      ]
                      (abs dead (type) GT)
                    ]
                    (all dead (type) dead)
                  }
                )
              )
            )
          )
        )
      )
    )
    [
      [ [ { opCompare (con integer) } `$fOrdInteger` ] (con integer 1) ]
      (con integer 2)
    ]
  )
)
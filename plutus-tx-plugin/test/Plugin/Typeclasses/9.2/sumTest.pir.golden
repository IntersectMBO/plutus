(program
  1.1.0
  (let
    (nonrec)
    (termbind
      (nonstrict)
      (vardecl `$fAdditiveMonoidInteger_$czero` (con integer))
      (con integer 0)
    )
    (termbind
      (strict)
      (vardecl addInteger (fun (con integer) (fun (con integer) (con integer))))
      (builtin addInteger)
    )
    (termbind
      (nonstrict)
      (vardecl addInteger (fun (con integer) (fun (con integer) (con integer))))
      (lam
        x
        (con integer)
        (let
          (nonrec)
          (termbind (strict) (vardecl x (con integer)) x)
          (lam
            y
            (con integer)
            (let
              (nonrec)
              (termbind (strict) (vardecl y (con integer)) y)
              [ [ addInteger x ] y ]
            )
          )
        )
      )
    )
    (datatypebind
      (datatype
        (tyvardecl AdditiveMonoid (fun (type) (type)))
        (tyvardecl a (type))
        AdditiveMonoid_match
        (vardecl
          CConsAdditiveMonoid
          (fun
            [ (lam a (type) (fun a (fun a a))) a ] (fun a [ AdditiveMonoid a ])
          )
        )
      )
    )
    (termbind
      (nonstrict)
      (vardecl `$fAdditiveMonoidInteger` [ AdditiveMonoid (con integer) ])
      [
        [ { CConsAdditiveMonoid (con integer) } addInteger ]
        `$fAdditiveMonoidInteger_$czero`
      ]
    )
    (let
      (rec)
      (datatypebind
        (datatype
          (tyvardecl List (fun (type) (type)))
          (tyvardecl a (type))
          List_match
          (vardecl Nil [ List a ])
          (vardecl Cons (fun a (fun [ List a ] [ List a ])))
        )
      )
      (let
        (nonrec)
        (termbind
          (nonstrict)
          (vardecl
            `$fFoldableNil_$cfoldr`
            (all
              a
              (type)
              (all b (type) (fun (fun a (fun b b)) (fun b (fun [ List a ] b))))
            )
          )
          (abs
            a
            (type)
            (abs
              b
              (type)
              (lam
                f
                (fun a (fun b b))
                (let
                  (nonrec)
                  (termbind (strict) (vardecl f (fun a (fun b b))) f)
                  (lam
                    z
                    b
                    (let
                      (nonrec)
                      (termbind (strict) (vardecl z b) z)
                      (let
                        (rec)
                        (termbind
                          (nonstrict)
                          (vardecl go (fun [ List a ] b))
                          (lam
                            ds
                            [ List a ]
                            {
                              [
                                [
                                  {
                                    [ { List_match a } ds ] (all dead (type) b)
                                  }
                                  (abs dead (type) z)
                                ]
                                (lam
                                  x
                                  a
                                  (lam
                                    xs
                                    [ List a ]
                                    (abs dead (type) [ [ f x ] [ go xs ] ])
                                  )
                                )
                              ]
                              (all dead (type) dead)
                            }
                          )
                        )
                        (lam eta [ List a ] [ go eta ])
                      )
                    )
                  )
                )
              )
            )
          )
        )
        (termbind
          (nonstrict)
          (vardecl
            `$fFoldableNil`
            [
              (lam
                t
                (fun (type) (type))
                (all
                  a
                  (type)
                  (all b (type) (fun (fun a (fun b b)) (fun b (fun [ t a ] b))))
                )
              )
              List
            ]
          )
          `$fFoldableNil_$cfoldr`
        )
        (termbind
          (nonstrict)
          (vardecl
            build
            (all
              a
              (type)
              (fun (all b (type) (fun (fun a (fun b b)) (fun b b))) [ List a ])
            )
          )
          (abs
            a
            (type)
            (lam
              g
              (all b (type) (fun (fun a (fun b b)) (fun b b)))
              [
                [
                  { g [ List a ] }
                  (lam ds a (lam ds [ List a ] [ [ { Cons a } ds ] ds ]))
                ]
                { Nil a }
              ]
            )
          )
        )
        (termbind
          (nonstrict)
          (vardecl
            `$p1AdditiveMonoid`
            (all
              a
              (type)
              (fun [ AdditiveMonoid a ] [ (lam a (type) (fun a (fun a a))) a ])
            )
          )
          (abs
            a
            (type)
            (lam
              v
              [ AdditiveMonoid a ]
              [
                {
                  [ { AdditiveMonoid_match a } v ]
                  [ (lam a (type) (fun a (fun a a))) a ]
                }
                (lam v [ (lam a (type) (fun a (fun a a))) a ] (lam v a v))
              ]
            )
          )
        )
        (termbind
          (nonstrict)
          (vardecl zero (all a (type) (fun [ AdditiveMonoid a ] a)))
          (abs
            a
            (type)
            (lam
              v
              [ AdditiveMonoid a ]
              [
                { [ { AdditiveMonoid_match a } v ] a }
                (lam v [ (lam a (type) (fun a (fun a a))) a ] (lam v a v))
              ]
            )
          )
        )
        (termbind
          (nonstrict)
          (vardecl
            sum
            (all
              t
              (fun (type) (type))
              (all
                a
                (type)
                (fun
                  [
                    (lam
                      t
                      (fun (type) (type))
                      (all
                        a
                        (type)
                        (all
                          b
                          (type)
                          (fun (fun a (fun b b)) (fun b (fun [ t a ] b)))
                        )
                      )
                    )
                    t
                  ]
                  (fun [ AdditiveMonoid a ] (fun [ t a ] a))
                )
              )
            )
          )
          (abs
            t
            (fun (type) (type))
            (abs
              a
              (type)
              (lam
                `$dFoldable`
                [
                  (lam
                    t
                    (fun (type) (type))
                    (all
                      a
                      (type)
                      (all
                        b (type) (fun (fun a (fun b b)) (fun b (fun [ t a ] b)))
                      )
                    )
                  )
                  t
                ]
                (lam
                  `$dAdditiveMonoid`
                  [ AdditiveMonoid a ]
                  [
                    [
                      { { `$dFoldable` a } a }
                      [ { `$p1AdditiveMonoid` a } `$dAdditiveMonoid` ]
                    ]
                    [ { zero a } `$dAdditiveMonoid` ]
                  ]
                )
              )
            )
          )
        )
        [
          [
            [ { { sum List } (con integer) } `$fFoldableNil` ]
            `$fAdditiveMonoidInteger`
          ]
          [
            { build (con integer) }
            (abs
              a
              (type)
              (lam
                c
                (fun (con integer) (fun a a))
                (lam
                  n
                  a
                  [
                    [ c (con integer 1) ]
                    [
                      [ c (con integer 2) ]
                      [ [ c (con integer 3) ] [ [ c (con integer 4) ] n ] ]
                    ]
                  ]
                )
              )
            )
          ]
        ]
      )
    )
  )
)
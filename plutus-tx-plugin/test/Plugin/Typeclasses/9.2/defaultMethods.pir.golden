(program
  1.1.0
  (let
    (nonrec)
    (datatypebind
      (datatype
        (tyvardecl DefaultMethods (fun (type) (type)))
        (tyvardecl a (type))
        DefaultMethods_match
        (vardecl
          CConsDefaultMethods
          (fun
            (fun a (con integer))
            (fun (fun a (con integer)) [ DefaultMethods a ])
          )
        )
      )
    )
    (termbind
      (nonstrict)
      (vardecl
        method (all a (type) (fun [ DefaultMethods a ] (fun a (con integer))))
      )
      (abs
        a
        (type)
        (lam
          v
          [ DefaultMethods a ]
          [
            { [ { DefaultMethods_match a } v ] (fun a (con integer)) }
            (lam v (fun a (con integer)) (lam v (fun a (con integer)) v))
          ]
        )
      )
    )
    (termbind
      (nonstrict)
      (vardecl
        f (all a (type) (fun [ DefaultMethods a ] (fun a (con integer))))
      )
      (abs
        a
        (type)
        (lam
          `$dDefaultMethods`
          [ DefaultMethods a ]
          (lam
            a
            a
            (let
              (nonrec)
              (termbind (strict) (vardecl a a) a)
              [ [ { method a } `$dDefaultMethods` ] a ]
            )
          )
        )
      )
    )
    (termbind
      (nonstrict)
      (vardecl
        `$fDefaultMethodsInteger_$cmethod` (fun (con integer) (con integer))
      )
      (lam a (con integer) a)
    )
    (termbind
      (strict)
      (vardecl addInteger (fun (con integer) (fun (con integer) (con integer))))
      (builtin addInteger)
    )
    (termbind
      (nonstrict)
      (vardecl
        `$fDefaultMethodsInteger_$cmethod` (fun (con integer) (con integer))
      )
      (lam
        a
        (con integer)
        (let
          (nonrec)
          (termbind (strict) (vardecl a (con integer)) a)
          [ [ addInteger a ] (con integer 1) ]
        )
      )
    )
    (termbind
      (nonstrict)
      (vardecl `$fDefaultMethodsInteger` [ DefaultMethods (con integer) ])
      [
        [
          { CConsDefaultMethods (con integer) }
          `$fDefaultMethodsInteger_$cmethod`
        ]
        `$fDefaultMethodsInteger_$cmethod`
      ]
    )
    (lam
      ds
      (con integer)
      (let
        (nonrec)
        (termbind (strict) (vardecl ds (con integer)) ds)
        [ [ { f (con integer) } `$fDefaultMethodsInteger` ] ds ]
      )
    )
  )
)
(program
  (let
    (nonrec)
    (termbind
      (strict)
      (vardecl addInteger (fun (con integer) (fun (con integer) (con integer))))
      (lam
        x (con integer) (lam y (con integer) [ [ (builtin addInteger) x ] y ])
      )
    )
    (datatypebind
      (datatype
        (tyvardecl AdditiveMonoid (fun (type) (type)))
        (tyvardecl a (type))
        AdditiveMonoid_match
        (vardecl
          CConsAdditiveMonoid
          (fun [(lam a (type) (fun a (fun a a))) a] (fun a [AdditiveMonoid a]))
        )
      )
    )
    (termbind
      (nonstrict)
      (vardecl fAdditiveMonoidInteger [AdditiveMonoid (con integer)])
      [ [ { CConsAdditiveMonoid (con integer) } addInteger ] (con integer 0) ]
    )
    (datatypebind
      (datatype
        (tyvardecl Monoid (fun (type) (type)))
        (tyvardecl a (type))
        Monoid_match
        (vardecl
          CConsMonoid
          (fun [(lam a (type) (fun a (fun a a))) a] (fun a [Monoid a]))
        )
      )
    )
    (termbind
      (strict)
      (vardecl
        p1Monoid
        (all a (type) (fun [Monoid a] [(lam a (type) (fun a (fun a a))) a]))
      )
      (abs
        a
        (type)
        (lam
          v
          [Monoid a]
          [
            { [ { Monoid_match a } v ] [(lam a (type) (fun a (fun a a))) a] }
            (lam v [(lam a (type) (fun a (fun a a))) a] (lam v a v))
          ]
        )
      )
    )
    (let
      (rec)
      (datatypebind
        (datatype
          (tyvardecl List (fun (type) (type)))
          (tyvardecl a (type))
          Nil_match
          (vardecl Nil [List a]) (vardecl Cons (fun a (fun [List a] [List a])))
        )
      )
      (let
        (nonrec)
        (termbind
          (strict)
          (vardecl mempty (all a (type) (fun [Monoid a] a)))
          (abs
            a
            (type)
            (lam
              v
              [Monoid a]
              [
                { [ { Monoid_match a } v ] a }
                (lam v [(lam a (type) (fun a (fun a a))) a] (lam v a v))
              ]
            )
          )
        )
        (datatypebind
          (datatype (tyvardecl Unit (type))  Unit_match (vardecl Unit Unit))
        )
        (let
          (rec)
          (termbind
            (nonstrict)
            (vardecl
              fFoldableNil_cfoldMap
              (all m (type) (all a (type) (fun [Monoid m] (fun (fun a m) (fun [List a] m)))))
            )
            (abs
              m
              (type)
              (abs
                a
                (type)
                (lam
                  dMonoid
                  [Monoid m]
                  (let
                    (nonrec)
                    (termbind
                      (nonstrict)
                      (vardecl dSemigroup [(lam a (type) (fun a (fun a a))) m])
                      [ { p1Monoid m } dMonoid ]
                    )
                    (lam
                      ds
                      (fun a m)
                      (lam
                        ds
                        [List a]
                        [
                          [
                            [
                              { [ { Nil_match a } ds ] (fun Unit m) }
                              (lam thunk Unit [ { mempty m } dMonoid ])
                            ]
                            (lam
                              x
                              a
                              (lam
                                xs
                                [List a]
                                (lam
                                  thunk
                                  Unit
                                  [
                                    [ dSemigroup [ ds x ] ]
                                    [
                                      [
                                        [
                                          { { fFoldableNil_cfoldMap m } a }
                                          dMonoid
                                        ]
                                        ds
                                      ]
                                      xs
                                    ]
                                  ]
                                )
                              )
                            )
                          ]
                          Unit
                        ]
                      )
                    )
                  )
                )
              )
            )
          )
          (let
            (nonrec)
            (termbind
              (strict)
              (vardecl
                build
                (all a (type) (fun (all b (type) (fun (fun a (fun b b)) (fun b b))) [List a]))
              )
              (abs
                a
                (type)
                (lam
                  g
                  (all b (type) (fun (fun a (fun b b)) (fun b b)))
                  [ [ { g [List a] } { Cons a } ] { Nil a } ]
                )
              )
            )
            (termbind
              (strict)
              (vardecl
                p1AdditiveMonoid
                (all a (type) (fun [AdditiveMonoid a] [(lam a (type) (fun a (fun a a))) a]))
              )
              (abs
                a
                (type)
                (lam
                  v
                  [AdditiveMonoid a]
                  [
                    {
                      [ { AdditiveMonoid_match a } v ]
                      [(lam a (type) (fun a (fun a a))) a]
                    }
                    (lam v [(lam a (type) (fun a (fun a a))) a] (lam v a v))
                  ]
                )
              )
            )
            (termbind
              (strict)
              (vardecl zero (all a (type) (fun [AdditiveMonoid a] a)))
              (abs
                a
                (type)
                (lam
                  v
                  [AdditiveMonoid a]
                  [
                    { [ { AdditiveMonoid_match a } v ] a }
                    (lam v [(lam a (type) (fun a (fun a a))) a] (lam v a v))
                  ]
                )
              )
            )
            (termbind
              (strict)
              (vardecl
                fMonoidSum
                (all a (type) (fun [AdditiveMonoid a] [Monoid [(lam a (type) a) a]]))
              )
              (abs
                a
                (type)
                (lam
                  v
                  [AdditiveMonoid a]
                  [
                    [
                      { CConsMonoid [(lam a (type) a) a] }
                      (lam
                        eta
                        [(lam a (type) a) a]
                        (lam
                          eta
                          [(lam a (type) a) a]
                          [ [ [ { p1AdditiveMonoid a } v ] eta ] eta ]
                        )
                      )
                    ]
                    [ { zero a } v ]
                  ]
                )
              )
            )
            (termbind
              (strict)
              (vardecl
                sum
                (all t (fun (type) (type)) (all a (type) (fun [(lam t (fun (type) (type)) (all m (type) (all a (type) (fun [Monoid m] (fun (fun a m) (fun [t a] m)))))) t] (fun [AdditiveMonoid a] (fun [t a] a)))))
              )
              (abs
                t
                (fun (type) (type))
                (abs
                  a
                  (type)
                  (lam
                    dFoldable
                    [(lam t (fun (type) (type)) (all m (type) (all a (type) (fun [Monoid m] (fun (fun a m) (fun [t a] m)))))) t]
                    (lam
                      dAdditiveMonoid
                      [AdditiveMonoid a]
                      [
                        [
                          { { dFoldable [(lam a (type) a) a] } a }
                          [ { fMonoidSum a } dAdditiveMonoid ]
                        ]
                        (lam v a v)
                      ]
                    )
                  )
                )
              )
            )
            [
              [
                [ { { sum List } (con integer) } fFoldableNil_cfoldMap ]
                fAdditiveMonoidInteger
              ]
              [
                { build (con integer) }
                (abs
                  a
                  (type)
                  (lam
                    c
                    (fun (con integer) (fun a a))
                    (lam
                      n
                      a
                      [
                        [ c (con integer 1) ]
                        [
                          [ c (con integer 2) ]
                          [ [ c (con integer 3) ] [ [ c (con integer 4) ] n ] ]
                        ]
                      ]
                    )
                  )
                )
              ]
            ]
          )
        )
      )
    )
  )
)
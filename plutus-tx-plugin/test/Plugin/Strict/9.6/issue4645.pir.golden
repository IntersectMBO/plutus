(program
  1.1.0
  (let
    (nonrec)
    (datatypebind
      (datatype
        (tyvardecl Tuple2 (fun (type) (fun (type) (type))))
        (tyvardecl a (type)) (tyvardecl b (type))
        Tuple2_match
        (vardecl Tuple2 (fun a (fun b [ [ Tuple2 a ] b ])))
      )
    )
    (datatypebind
      (datatype
        (tyvardecl Bool (type))

        Bool_match
        (vardecl True Bool) (vardecl False Bool)
      )
    )
    (termbind
      (strict)
      (vardecl z [ [ Tuple2 (con integer) ] (con integer) ])
      [
        [
          { (builtin trace) [ [ Tuple2 (con integer) ] (con integer) ] }
          (con string "z")
        ]
        [
          [
            { (builtin trace) [ [ Tuple2 (con integer) ] (con integer) ] }
            (con string "y")
          ]
          [
            [ { { Tuple2 (con integer) } (con integer) } (con integer 1) ]
            (con integer 2)
          ]
        ]
      ]
    )
    [
      [
        [
          { (builtin ifThenElse) Bool }
          [
            [
              (builtin equalsInteger)
              [
                [ { (builtin trace) (con integer) } (con string "x") ]
                (con integer 0)
              ]
            ]
            [
              [ { (builtin trace) (con integer) } (con string "t") ]
              [
                {
                  [
                    { { Tuple2_match (con integer) } (con integer) }
                    [
                      [
                        {
                          (builtin trace)
                          [ [ Tuple2 (con integer) ] (con integer) ]
                        }
                        (con string "zz")
                      ]
                      z
                    ]
                  ]
                  (con integer)
                }
                (lam zz (con integer) (lam ds (con integer) zz))
              ]
            ]
          ]
        ]
        True
      ]
      False
    ]
  )
)
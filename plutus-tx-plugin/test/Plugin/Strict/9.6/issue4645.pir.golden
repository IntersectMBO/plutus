let
  data (Tuple2 :: * -> * -> *) a b | Tuple2_match where
    Tuple2 : a -> b -> Tuple2 a b
  data Bool | Bool_match where
    True : Bool
    False : Bool
  !z : Tuple2 integer integer
    = trace
        {Tuple2 integer integer}
        "z"
        (trace {Tuple2 integer integer} "y" (Tuple2 {integer} {integer} 1 2))
in
Tuple2_match
  {integer}
  {integer}
  (trace {Tuple2 integer integer} "zz" z)
  {Bool}
  (\(zz : integer) (ds : integer) ->
     let
       !t : integer = trace {integer} "t" zz
     in
     ifThenElse {Bool} (equalsInteger (trace {integer} "x" 0) t) True False)
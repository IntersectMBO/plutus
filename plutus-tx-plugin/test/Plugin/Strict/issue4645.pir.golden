(program
  1.1.0
  (let
    (nonrec)
    (datatypebind
      (datatype
        (tyvardecl Tuple2 (fun (type) (fun (type) (type))))
        (tyvardecl a (type)) (tyvardecl b (type))
        Tuple2_match
        (vardecl Tuple2 (fun a (fun b [ [ Tuple2 a ] b ])))
      )
    )
    (datatypebind
      (datatype
        (tyvardecl Bool (type))

        Bool_match
        (vardecl True Bool) (vardecl False Bool)
      )
    )
    (termbind
      (strict)
      (vardecl y [ [ Tuple2 (con integer) ] (con integer) ])
      [
        [
          { (builtin trace) [ [ Tuple2 (con integer) ] (con integer) ] }
          (con string "y")
        ]
        [
          [ { { Tuple2 (con integer) } (con integer) } (con integer 1) ]
          (con integer 2)
        ]
      ]
    )
    (termbind
      (strict)
      (vardecl z [ [ Tuple2 (con integer) ] (con integer) ])
      [
        [
          { (builtin trace) [ [ Tuple2 (con integer) ] (con integer) ] }
          (con string "z")
        ]
        y
      ]
    )
    [
      {
        [
          { { Tuple2_match (con integer) } (con integer) }
          [
            [
              { (builtin trace) [ [ Tuple2 (con integer) ] (con integer) ] }
              (con string "zz")
            ]
            z
          ]
        ]
        Bool
      }
      (lam
        zz
        (con integer)
        (lam
          ds
          (con integer)
          (let
            (nonrec)
            (termbind
              (strict)
              (vardecl t (con integer))
              [ [ { (builtin trace) (con integer) } (con string "t") ] zz ]
            )
            (termbind
              (strict)
              (vardecl x (con integer))
              [
                [ { (builtin trace) (con integer) } (con string "x") ]
                (con integer 0)
              ]
            )
            (termbind
              (strict)
              (vardecl b (con bool))
              [ [ (builtin equalsInteger) x ] t ]
            )
            [ [ [ { (builtin ifThenElse) Bool } b ] True ] False ]
          )
        )
      )
    ]
  )
)
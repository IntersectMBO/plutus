(program
  (let
    (nonrec)
    (datatypebind
      (datatype (tyvardecl Unit (type))  Unit_match (vardecl Unit Unit))
    )
    (let
      (nonrec)
      (datatypebind
        (datatype
          (tyvardecl Bool (type))
          
          Bool_match
          (vardecl True Bool) (vardecl False Bool)
        )
      )
      (let
        (nonrec)
        (termbind
          (vardecl
            equalsInteger
            (fun [(con integer) (con 8)] (fun [(con integer) (con 8)] Bool))
          )
          (lam
            arg
            [(con integer) (con 8)]
            (lam
              arg
              [(con integer) (con 8)]
              [
                (lam
                  b
                  (all a (type) (fun a (fun a a)))
                  [ [ { b Bool } True ] False ]
                )
                [ [ { (builtin equalsInteger) (con 8) } arg ] arg ]
              ]
            )
          )
        )
        (lam
          ds
          [(con integer) (con 8)]
          (lam
            ds
            [(con integer) (con 8)]
            (let
              (nonrec)
              (termbind (vardecl eta Bool) [ [ equalsInteger ds ] ds ])
              (let
                (nonrec)
                (termbind (vardecl eta Bool) [ [ equalsInteger ds ] ds ])
                [
                  [
                    (lam
                      x
                      Bool
                      (lam
                        y
                        Bool
                        (let
                          (nonrec)
                          (termbind
                            (vardecl fail (fun (all a (type) (fun Unit a)) Bool)
                            )
                            (lam ds (all a (type) (fun Unit a)) False)
                          )
                          [
                            [
                              [
                                { [ Bool_match x ] (fun Unit Bool) }
                                (lam
                                  thunk
                                  Unit
                                  [
                                    [
                                      [
                                        { [ Bool_match y ] (fun Unit Bool) }
                                        (lam thunk Unit True)
                                      ]
                                      (lam
                                        thunk
                                        Unit
                                        [
                                          fail
                                          (abs
                                            e (type) (lam thunk Unit (error e))
                                          )
                                        ]
                                      )
                                    ]
                                    Unit
                                  ]
                                )
                              ]
                              (lam
                                thunk
                                Unit
                                [
                                  fail (abs e (type) (lam thunk Unit (error e)))
                                ]
                              )
                            ]
                            Unit
                          ]
                        )
                      )
                    )
                    eta
                  ]
                  eta
                ]
              )
            )
          )
        )
      )
    )
  )
)
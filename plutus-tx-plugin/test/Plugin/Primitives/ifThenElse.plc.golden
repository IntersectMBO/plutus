(program
  (let
    (nonrec)
    (datatypebind
      (datatype
        (tyvardecl Bool (type))

        Bool_match
        (vardecl True Bool) (vardecl False Bool)
      )
    )
    (termbind
      (strict)
      (vardecl equalsInteger (fun (con integer) (fun (con integer) Bool)))
      (lam
        arg
        (con integer)
        (lam
          arg
          (con integer)
          (let
            (nonrec)
            (termbind
              (strict)
              (vardecl b (con bool))
              [ [ (builtin equalsInteger) arg ] arg ]
            )
            [ [ [ { (builtin ifThenElse) Bool } b ] True ] False ]
          )
        )
      )
    )
    (datatypebind
      (datatype (tyvardecl Unit (type))  Unit_match (vardecl Unit Unit))
    )
    (lam
      ds
      (con integer)
      (lam
        ds
        (con integer)
        [
          [
            [
              {
                [ Bool_match [ [ equalsInteger ds ] ds ] ]
                (fun Unit (con integer))
              }
              (lam thunk Unit ds)
            ]
            (lam thunk Unit ds)
          ]
          Unit
        ]
      )
    )
  )
)
(program
  (let
    (nonrec)
    (datatypebind
      (datatype (tyvardecl Unit (type))  Unit_match (vardecl Unit Unit))
    )
    (let
      (nonrec)
      (datatypebind
        (datatype
          (tyvardecl Bool (type))
          
          Bool_match
          (vardecl True Bool) (vardecl False Bool)
        )
      )
      (let
        (nonrec)
        (termbind
          (strict)
          (vardecl equalsInteger (fun (con integer) (fun (con integer) Bool)))
          (lam
            arg
            (con integer)
            (lam
              arg
              (con integer)
              [
                (lam
                  b
                  (all a (type) (fun a (fun a a)))
                  [ [ { b Bool } True ] False ]
                )
                [ [ (builtin equalsInteger) arg ] arg ]
              ]
            )
          )
        )
        (lam
          ds
          (con integer)
          (lam
            ds
            (con integer)
            [
              [
                [
                  {
                    [ Bool_match [ [ equalsInteger ds ] ds ] ]
                    (fun Unit (con integer))
                  }
                  (lam thunk Unit ds)
                ]
                (lam thunk Unit ds)
              ]
              Unit
            ]
          )
        )
      )
    )
  )
)
program
  1.1.0
  (let
    data Bool | Bool_match where
      True : Bool
      False : Bool
    ~fail : unit -> Bool = \(ds : unit) -> False
    !equalsInteger : integer -> integer -> bool = equalsInteger
    !ifThenElse : all a. bool -> a -> a -> a = ifThenElse
    ~equalsInteger : integer -> integer -> Bool
      = \(x : integer) ->
          let
            !x : integer = x
          in
          \(y : integer) ->
            let
              !y : integer = y
              !b : bool = equalsInteger x y
            in
            ifThenElse {Bool} b True False
  in
  \(ds : integer) ->
    let
      !ds : integer = ds
    in
    \(ds : integer) ->
      let
        !ds : integer = ds
        !x' : Bool = equalsInteger ds ds
        !y' : Bool = equalsInteger ds ds
      in
      Bool_match
        x'
        {all dead. Bool}
        (/\dead ->
           Bool_match
             y'
             {all dead. Bool}
             (/\dead -> True)
             (/\dead -> fail ())
             {all dead. dead})
        (/\dead -> fail ())
        {all dead. dead})
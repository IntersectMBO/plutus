let
  data Bool | Bool_match where
    True : Bool
    False : Bool
  !equalsInteger : integer -> integer -> bool = equalsInteger
  !ifThenElse : all a. bool -> a -> a -> a = ifThenElse
  ~equalsInteger : integer -> integer -> Bool
    = \(x : integer) ->
        let
          !x : integer = x
        in
        \(y : integer) ->
          let
            !y : integer = y
            !b : bool = equalsInteger x y
          in
          ifThenElse {Bool} b True False
in
\(ds : integer) ->
  let
    !ds : integer = ds
  in
  \(ds : integer) ->
    let
      !ds : integer = ds
    in
    Bool_match
      (equalsInteger ds ds)
      {all dead. integer}
      (/\dead -> ds)
      (/\dead -> ds)
      {all dead. dead}
(program
  1.1.0
  (let
    (nonrec)
    (datatypebind
      (datatype
        (tyvardecl Bool (type))

        Bool_match
        (vardecl True Bool) (vardecl False Bool)
      )
    )
    (termbind
      (strict)
      (vardecl trace (all a (type) (fun (con string) (fun a a))))
      (builtin trace)
    )
    (termbind
      (nonstrict)
      (vardecl trace (all a (type) (fun (con string) (fun a a))))
      trace
    )
    (datatypebind
      (datatype (tyvardecl Unit (type))  Unit_match (vardecl Unit Unit))
    )
    (termbind
      (strict)
      (vardecl error (all a (type) (fun (con unit) a)))
      (abs a (type) (lam thunk (con unit) (error a)))
    )
    (termbind (strict) (vardecl unitval (con unit)) (con unit ()))
    (termbind
      (nonstrict)
      (vardecl traceError (all a (type) (fun (con string) a)))
      (abs
        a
        (type)
        (lam
          str
          (con string)
          (let
            (nonrec)
            (termbind (strict) (vardecl str (con string)) str)
            (termbind (strict) (vardecl x Unit) [ [ { trace Unit } str ] Unit ])
            [ { error a } unitval ]
          )
        )
      )
    )
    (lam
      ds
      Bool
      (let
        (nonrec)
        (termbind (strict) (vardecl ds Bool) ds)
        {
          [
            [
              { [ Bool_match ds ] (all dead (type) Unit) }
              (abs dead (type) [ [ { trace Unit } (con string "yes") ] Unit ])
            ]
            (abs dead (type) [ { traceError Unit } (con string "no") ])
          ]
          (all dead (type) dead)
        }
      )
    )
  )
)
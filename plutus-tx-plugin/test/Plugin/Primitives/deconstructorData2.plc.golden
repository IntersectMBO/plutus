(program
  (let
    (nonrec)
    (datatypebind
      (datatype
        (tyvardecl Tuple2 (fun (type) (fun (type) (type))))
        (tyvardecl a (type)) (tyvardecl b (type))
        Tuple2_match
        (vardecl Tuple2 (fun a (fun b [[Tuple2 a] b])))
      )
    )
    (termbind
      (strict)
      (vardecl
        fFunctorTuple2_cfmap
        (all c (type) (all a (type) (all b (type) (fun (fun a b) (fun [[Tuple2 c] a] [[Tuple2 c] b])))))
      )
      (abs
        c
        (type)
        (abs
          a
          (type)
          (abs
            b
            (type)
            (lam
              f
              (fun a b)
              (lam
                ds
                [[Tuple2 c] a]
                [
                  { [ { { Tuple2_match c } a } ds ] [[Tuple2 c] b] }
                  (lam c c (lam a a [ [ { { Tuple2 c } b } c ] [ f a ] ]))
                ]
              )
            )
          )
        )
      )
    )
    (datatypebind
      (datatype (tyvardecl Unit (type))  Unit_match (vardecl Unit Unit))
    )
    (let
      (rec)
      (datatypebind
        (datatype
          (tyvardecl List (fun (type) (type)))
          (tyvardecl a (type))
          Nil_match
          (vardecl Nil [List a]) (vardecl Cons (fun a (fun [List a] [List a])))
        )
      )
      (let
        (rec)
        (termbind
          (nonstrict)
          (vardecl
            fFunctorNil_cfmap
            (all a (type) (all b (type) (fun (fun a b) (fun [List a] [List b]))))
          )
          (abs
            a
            (type)
            (abs
              b
              (type)
              (lam
                f
                (fun a b)
                (lam
                  l
                  [List a]
                  [
                    [
                      [
                        { [ { Nil_match a } l ] (fun Unit [List b]) }
                        (lam thunk Unit { Nil b })
                      ]
                      (lam
                        x
                        a
                        (lam
                          xs
                          [List a]
                          (lam
                            thunk
                            Unit
                            [
                              [ { Cons b } [ f x ] ]
                              [ [ { { fFunctorNil_cfmap a } b } f ] xs ]
                            ]
                          )
                        )
                      )
                    ]
                    Unit
                  ]
                )
              )
            )
          )
        )
        (let
          (nonrec)
          (termbind
            (strict)
            (vardecl
              bad_name
              (all b (type) (all c (type) (all a (type) (fun (fun b c) (fun (fun a b) (fun a c))))))
            )
            (abs
              b
              (type)
              (abs
                c
                (type)
                (abs
                  a
                  (type)
                  (lam f (fun b c) (lam g (fun a b) (lam x a [ f [ g x ] ])))
                )
              )
            )
          )
          (termbind
            (strict)
            (vardecl
              fmap
              (all f (fun (type) (type)) (fun [(lam f (fun (type) (type)) (all a (type) (all b (type) (fun (fun a b) (fun [f a] [f b]))))) f] (all a (type) (all b (type) (fun (fun a b) (fun [f a] [f b]))))))
            )
            (abs
              f
              (fun (type) (type))
              (lam
                v
                [(lam f (fun (type) (type)) (all a (type) (all b (type) (fun (fun a b) (fun [f a] [f b]))))) f]
                v
              )
            )
          )
          (let
            (rec)
            (termbind
              (strict)
              (vardecl
                unsafeDataAsList_go
                (fun [(con list) (con data)] [List (con data)])
              )
              (lam
                l
                [(con list) (con data)]
                [
                  [
                    [
                      [
                        {
                          {
                            (builtin chooseList)
                            (fun (con unit) [List (con data)])
                          }
                          (con data)
                        }
                        (lam ds (con unit) { Nil (con data) })
                      ]
                      (lam
                        ds
                        (con unit)
                        [
                          [
                            { Cons (con data) }
                            [ { (builtin headList) (con data) } l ]
                          ]
                          [
                            unsafeDataAsList_go
                            [ { (builtin tailList) (con data) } l ]
                          ]
                        ]
                      )
                    ]
                    l
                  ]
                  (con unit ())
                ]
              )
            )
            (let
              (nonrec)
              (termbind
                (strict)
                (vardecl
                  unsafeDataAsConstr
                  (fun (con data) [[Tuple2 (con integer)] [List (con data)]])
                )
                (lam
                  w
                  (con data)
                  (let
                    (nonrec)
                    (termbind
                      (nonstrict)
                      (vardecl
                        p [[(con pair) (con integer)] [(con list) (con data)]]
                      )
                      [ (builtin unConstrData) w ]
                    )
                    [
                      [
                        { { Tuple2 (con integer) } [List (con data)] }
                        [
                          {
                            { (builtin fstPair) (con integer) }
                            [(con list) (con data)]
                          }
                          p
                        ]
                      ]
                      [
                        unsafeDataAsList_go
                        [
                          {
                            { (builtin sndPair) (con integer) }
                            [(con list) (con data)]
                          }
                          p
                        ]
                      ]
                    ]
                  )
                )
              )
              (termbind
                (strict)
                (vardecl unsafeDataAsI (fun (con data) (con integer)))
                (lam d (con data) [ (builtin unIData) d ])
              )
              (lam
                ds
                (con data)
                [
                  [
                    [
                      [
                        {
                          {
                            {
                              bad_name
                              (fun [List (con data)] [List (con integer)])
                            }
                            (fun [[Tuple2 (con integer)] [List (con data)]] [[Tuple2 (con integer)] [List (con integer)]])
                          }
                          (fun (con data) (con integer))
                        }
                        {
                          {
                            [
                              { fmap [Tuple2 (con integer)] }
                              { fFunctorTuple2_cfmap (con integer) }
                            ]
                            [List (con data)]
                          }
                          [List (con integer)]
                        }
                      ]
                      {
                        { [ { fmap List } fFunctorNil_cfmap ] (con data) }
                        (con integer)
                      }
                    ]
                    unsafeDataAsI
                  ]
                  [ unsafeDataAsConstr ds ]
                ]
              )
            )
          )
        )
      )
    )
  )
)
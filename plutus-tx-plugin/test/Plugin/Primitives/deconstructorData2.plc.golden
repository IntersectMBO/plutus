(program
  (let
    (nonrec)
    (datatypebind
      (datatype
        (tyvardecl Tuple2 (fun (type) (fun (type) (type))))
        (tyvardecl a (type)) (tyvardecl b (type))
        Tuple2_match
        (vardecl Tuple2 (fun a (fun b [ [ Tuple2 a ] b ])))
      )
    )
    (termbind
      (strict)
      (vardecl
        fFunctorTuple2_cfmap
        (all
          c
          (type)
          (all
            a
            (type)
            (all
              b
              (type)
              (fun (fun a b) (fun [ [ Tuple2 c ] a ] [ [ Tuple2 c ] b ]))
            )
          )
        )
      )
      (abs
        c
        (type)
        (abs
          a
          (type)
          (abs
            b
            (type)
            (lam
              f
              (fun a b)
              (lam
                ds
                [ [ Tuple2 c ] a ]
                [
                  { [ { { Tuple2_match c } a } ds ] [ [ Tuple2 c ] b ] }
                  (lam c c (lam a a [ [ { { Tuple2 c } b } c ] [ f a ] ]))
                ]
              )
            )
          )
        )
      )
    )
    (termbind
      (nonstrict)
      (vardecl
        fFunctorTuple2
        (all
          c
          (type)
          [
            (lam
              f
              (fun (type) (type))
              (all
                a (type) (all b (type) (fun (fun a b) (fun [ f a ] [ f b ])))
              )
            )
            [ Tuple2 c ]
          ]
        )
      )
      fFunctorTuple2_cfmap
    )
    (let
      (rec)
      (datatypebind
        (datatype
          (tyvardecl List (fun (type) (type)))
          (tyvardecl a (type))
          Nil_match
          (vardecl Nil [ List a ])
          (vardecl Cons (fun a (fun [ List a ] [ List a ])))
        )
      )
      (let
        (rec)
        (termbind
          (strict)
          (vardecl
            fFunctorNil_cfmap
            (all
              a
              (type)
              (all b (type) (fun (fun a b) (fun [ List a ] [ List b ])))
            )
          )
          (abs
            a
            (type)
            (abs
              b
              (type)
              (lam
                f
                (fun a b)
                (lam
                  l
                  [ List a ]
                  {
                    [
                      [
                        { [ { Nil_match a } l ] (all dead (type) [ List b ]) }
                        (abs dead (type) { Nil b })
                      ]
                      (lam
                        x
                        a
                        (lam
                          xs
                          [ List a ]
                          (abs
                            dead
                            (type)
                            [
                              [ { Cons b } [ f x ] ]
                              [ [ { { fFunctorNil_cfmap a } b } f ] xs ]
                            ]
                          )
                        )
                      )
                    ]
                    (all dead (type) dead)
                  }
                )
              )
            )
          )
        )
        (let
          (nonrec)
          (termbind
            (nonstrict)
            (vardecl
              fFunctorNil
              [
                (lam
                  f
                  (fun (type) (type))
                  (all
                    a
                    (type)
                    (all b (type) (fun (fun a b) (fun [ f a ] [ f b ])))
                  )
                )
                List
              ]
            )
            fFunctorNil_cfmap
          )
          (termbind
            (strict)
            (vardecl
              bad_name
              (all
                b
                (type)
                (all
                  c
                  (type)
                  (all a (type) (fun (fun b c) (fun (fun a b) (fun a c))))
                )
              )
            )
            (abs
              b
              (type)
              (abs
                c
                (type)
                (abs
                  a
                  (type)
                  (lam f (fun b c) (lam g (fun a b) (lam x a [ f [ g x ] ])))
                )
              )
            )
          )
          (termbind
            (strict)
            (vardecl
              fmap
              (all
                f
                (fun (type) (type))
                (fun
                  [
                    (lam
                      f
                      (fun (type) (type))
                      (all
                        a
                        (type)
                        (all b (type) (fun (fun a b) (fun [ f a ] [ f b ])))
                      )
                    )
                    f
                  ]
                  (all
                    a
                    (type)
                    (all b (type) (fun (fun a b) (fun [ f a ] [ f b ])))
                  )
                )
              )
            )
            (abs
              f
              (fun (type) (type))
              (lam
                v
                [
                  (lam
                    f
                    (fun (type) (type))
                    (all
                      a
                      (type)
                      (all b (type) (fun (fun a b) (fun [ f a ] [ f b ])))
                    )
                  )
                  f
                ]
                v
              )
            )
          )
          (termbind
            (strict)
            (vardecl
              fst (all a (type) (all b (type) (fun [ [ (con pair) a ] b ] a)))
            )
            (builtin fstPair)
          )
          (termbind
            (strict)
            (vardecl
              snd (all a (type) (all b (type) (fun [ [ (con pair) a ] b ] b)))
            )
            (builtin sndPair)
          )
          (termbind
            (strict)
            (vardecl
              unsafeDataAsConstr
              (fun
                (con data)
                [ [ (con pair) (con integer) ] [ (con list) (con data) ] ]
              )
            )
            (builtin unConstrData)
          )
          (termbind
            (strict)
            (vardecl
              chooseList
              (all
                a (type) (all b (type) (fun [ (con list) a ] (fun b (fun b b))))
              )
            )
            (builtin chooseList)
          )
          (termbind
            (strict)
            (vardecl head (all a (type) (fun [ (con list) a ] a)))
            (builtin headList)
          )
          (termbind
            (strict)
            (vardecl
              tail (all a (type) (fun [ (con list) a ] [ (con list) a ]))
            )
            (builtin tailList)
          )
          (termbind (strict) (vardecl unitval (con unit)) (con unit ()))
          (let
            (rec)
            (termbind
              (strict)
              (vardecl
                unsafeDataAsList_go
                (fun [ (con list) (con data) ] [ List (con data) ])
              )
              (lam
                l
                [ (con list) (con data) ]
                [
                  [
                    [
                      [
                        {
                          { chooseList (con data) }
                          (fun (con unit) [ List (con data) ])
                        }
                        l
                      ]
                      (lam ds (con unit) { Nil (con data) })
                    ]
                    (lam
                      ds
                      (con unit)
                      [
                        [ { Cons (con data) } [ { head (con data) } l ] ]
                        [ unsafeDataAsList_go [ { tail (con data) } l ] ]
                      ]
                    )
                  ]
                  unitval
                ]
              )
            )
            (let
              (nonrec)
              (termbind
                (strict)
                (vardecl
                  unsafeDataAsConstr
                  (fun
                    (con data) [ [ Tuple2 (con integer) ] [ List (con data) ] ]
                  )
                )
                (lam
                  w
                  (con data)
                  (let
                    (nonrec)
                    (termbind
                      (nonstrict)
                      (vardecl
                        p
                        [
                          [ (con pair) (con integer) ] [ (con list) (con data) ]
                        ]
                      )
                      [ unsafeDataAsConstr w ]
                    )
                    [
                      [
                        { { Tuple2 (con integer) } [ List (con data) ] }
                        [
                          { { fst (con integer) } [ (con list) (con data) ] } p
                        ]
                      ]
                      [
                        unsafeDataAsList_go
                        [
                          { { snd (con integer) } [ (con list) (con data) ] } p
                        ]
                      ]
                    ]
                  )
                )
              )
              (termbind
                (strict)
                (vardecl unsafeDataAsI (fun (con data) (con integer)))
                (builtin unIData)
              )
              (termbind
                (strict)
                (vardecl unsafeDataAsI (fun (con data) (con integer)))
                (lam d (con data) [ unsafeDataAsI d ])
              )
              (lam
                ds
                (con data)
                [
                  [
                    [
                      [
                        {
                          {
                            {
                              bad_name
                              (fun [ List (con data) ] [ List (con integer) ])
                            }
                            (fun
                              [ [ Tuple2 (con integer) ] [ List (con data) ] ]
                              [
                                [ Tuple2 (con integer) ] [ List (con integer) ]
                              ]
                            )
                          }
                          (fun (con data) (con integer))
                        }
                        {
                          {
                            [
                              { fmap [ Tuple2 (con integer) ] }
                              { fFunctorTuple2 (con integer) }
                            ]
                            [ List (con data) ]
                          }
                          [ List (con integer) ]
                        }
                      ]
                      {
                        { [ { fmap List } fFunctorNil ] (con data) }
                        (con integer)
                      }
                    ]
                    unsafeDataAsI
                  ]
                  [ unsafeDataAsConstr ds ]
                ]
              )
            )
          )
        )
      )
    )
  )
)
(program
  (let
    (nonrec)
    (datatypebind
      (datatype (tyvardecl Unit (type))  Unit_match (vardecl Unit Unit))
    )
    (let
      (nonrec)
      (datatypebind
        (datatype
          (tyvardecl Bool (type))
          
          Bool_match
          (vardecl True Bool) (vardecl False Bool)
        )
      )
      (let
        (nonrec)
        (termbind
          (strict)
          (vardecl equalsInteger (fun (con integer) (fun (con integer) Bool)))
          (lam
            arg
            (con integer)
            (lam
              arg
              (con integer)
              [
                (lam
                  b
                  (con bool)
                  [ [ [ { (builtin ifThenElse) Bool } b ] True ] False ]
                )
                [ [ (builtin equalsInteger) arg ] arg ]
              ]
            )
          )
        )
        (lam
          ds
          (con integer)
          (lam
            ds
            (con integer)
            (let
              (nonrec)
              (termbind
                (strict)
                (vardecl fail (fun (all a (type) a) Bool))
                (lam ds (all a (type) a) False)
              )
              [
                [
                  [
                    {
                      [ Bool_match [ [ equalsInteger ds ] ds ] ] (fun Unit Bool)
                    }
                    (lam
                      thunk
                      Unit
                      [
                        [
                          [
                            {
                              [ Bool_match [ [ equalsInteger ds ] ds ] ]
                              (fun Unit Bool)
                            }
                            (lam thunk Unit True)
                          ]
                          (lam thunk Unit [ fail (abs e (type) (error e)) ])
                        ]
                        Unit
                      ]
                    )
                  ]
                  (lam thunk Unit [ fail (abs e (type) (error e)) ])
                ]
                Unit
              ]
            )
          )
        )
      )
    )
  )
)
(program
  (let
    (nonrec)
    (datatypebind
      (datatype
        (tyvardecl Bool (type))

        Bool_match
        (vardecl True Bool) (vardecl False Bool)
      )
    )
    (termbind
      (strict)
      (vardecl fail (fun (all a (type) a) Bool))
      (lam ds (all a (type) a) False)
    )
    (termbind
      (strict)
      (vardecl equalsInteger (fun (con integer) (fun (con integer) (con bool))))
      (builtin equalsInteger)
    )
    (termbind
      (strict)
      (vardecl ifThenElse (all a (type) (fun (con bool) (fun a (fun a a)))))
      (builtin ifThenElse)
    )
    (termbind
      (strict)
      (vardecl equalsInteger (fun (con integer) (fun (con integer) Bool)))
      (lam
        x
        (con integer)
        (lam
          y
          (con integer)
          [ [ [ { ifThenElse Bool } [ [ equalsInteger x ] y ] ] True ] False ]
        )
      )
    )
    (lam
      ds
      (con integer)
      (lam
        ds
        (con integer)
        {
          [
            [
              {
                [ Bool_match [ [ equalsInteger ds ] ds ] ]
                (all dead (type) Bool)
              }
              (abs
                dead
                (type)
                {
                  [
                    [
                      {
                        [ Bool_match [ [ equalsInteger ds ] ds ] ]
                        (all dead (type) Bool)
                      }
                      (abs dead (type) True)
                    ]
                    (abs dead (type) [ fail (abs e (type) (error e)) ])
                  ]
                  (all dead (type) dead)
                }
              )
            ]
            (abs dead (type) [ fail (abs e (type) (error e)) ])
          ]
          (all dead (type) dead)
        }
      )
    )
  )
)
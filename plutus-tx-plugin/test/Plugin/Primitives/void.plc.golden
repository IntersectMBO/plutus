(program
  (let
    (nonrec)
    (datatypebind
      (datatype
        (tyvardecl Bool (type))

        Bool_match
        (vardecl True Bool) (vardecl False Bool)
      )
    )
    (termbind
      (strict)
      (vardecl equalsInteger (fun (con integer) (fun (con integer) Bool)))
      (lam
        x
        (con integer)
        (lam
          y
          (con integer)
          [
            [
              [
                { (builtin ifThenElse) Bool }
                [ [ (builtin equalsInteger) x ] y ]
              ]
              True
            ]
            False
          ]
        )
      )
    )
    (datatypebind
      (datatype (tyvardecl Unit (type))  Unit_match (vardecl Unit Unit))
    )
    (lam
      ds
      (con integer)
      (lam
        ds
        (con integer)
        (let
          (nonrec)
          (termbind
            (strict)
            (vardecl fail (fun (all a (type) a) Bool))
            (lam ds (all a (type) a) False)
          )
          [
            [
              [
                { [ Bool_match [ [ equalsInteger ds ] ds ] ] (fun Unit Bool) }
                (lam
                  thunk
                  Unit
                  [
                    [
                      [
                        {
                          [ Bool_match [ [ equalsInteger ds ] ds ] ]
                          (fun Unit Bool)
                        }
                        (lam thunk Unit True)
                      ]
                      (lam thunk Unit [ fail (abs e (type) (error e)) ])
                    ]
                    Unit
                  ]
                )
              ]
              (lam thunk Unit [ fail (abs e (type) (error e)) ])
            ]
            Unit
          ]
        )
      )
    )
  )
)
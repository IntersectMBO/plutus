(program
  1.1.0
  (let
    (nonrec)
    (datatypebind
      (datatype
        (tyvardecl UTuple3 (fun (type) (fun (type) (fun (type) (type)))))
        (tyvardecl a (type)) (tyvardecl b (type)) (tyvardecl c (type))
        UTuple3_match
        (vardecl UTuple3 (fun a (fun b (fun c [ [ [ UTuple3 a ] b ] c ]))))
      )
    )
    (termbind
      (strict)
      (vardecl addInteger (fun (con integer) (fun (con integer) (con integer))))
      (builtin addInteger)
    )
    (termbind
      (nonstrict)
      (vardecl addInteger (fun (con integer) (fun (con integer) (con integer))))
      (lam
        x
        (con integer)
        (let
          (nonrec)
          (termbind (strict) (vardecl x (con integer)) x)
          (lam
            y
            (con integer)
            (let
              (nonrec)
              (termbind (strict) (vardecl y (con integer)) y)
              [ [ addInteger x ] y ]
            )
          )
        )
      )
    )
    (termbind
      (nonstrict)
      (vardecl
        unboxedTuple
        (fun
          [ [ [ UTuple3 (con integer) ] (con integer) ] (con integer) ]
          (con integer)
        )
      )
      (lam
        ds
        [ [ [ UTuple3 (con integer) ] (con integer) ] (con integer) ]
        [
          {
            [
              {
                { { UTuple3_match (con integer) } (con integer) } (con integer)
              }
              ds
            ]
            (con integer)
          }
          (lam
            i
            (con integer)
            (lam
              j
              (con integer)
              (lam k (con integer) [ [ addInteger [ [ addInteger i ] j ] ] k ])
            )
          )
        ]
      )
    )
    (lam
      x
      (con integer)
      (let
        (nonrec)
        (termbind (strict) (vardecl x (con integer)) x)
        [
          unboxedTuple
          [
            [
              [
                { { { UTuple3 (con integer) } (con integer) } (con integer) } x
              ]
              x
            ]
            x
          ]
        ]
      )
    )
  )
)
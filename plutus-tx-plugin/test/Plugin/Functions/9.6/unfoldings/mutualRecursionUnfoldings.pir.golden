program
  1.1.0
  (let
    data Bool | Bool_match where
      True : Bool
      False : Bool
    !equalsInteger : integer -> integer -> bool = equalsInteger
    !ifThenElse : all a. bool -> a -> a -> a = ifThenElse
    !subtractInteger : integer -> integer -> integer = subtractInteger
  in
  letrec
    ~evenDirect : integer -> Bool
      = \(n : integer) ->
          let
            !n : integer = n
            !b : bool = equalsInteger n 0
          in
          Bool_match
            (ifThenElse {Bool} b True False)
            {all dead. Bool}
            (/\dead -> True)
            (/\dead -> oddDirect (subtractInteger n 1))
            {all dead. dead}
    ~oddDirect : integer -> Bool
      = \(n : integer) ->
          let
            !n : integer = n
            !b : bool = equalsInteger n 0
          in
          Bool_match
            (ifThenElse {Bool} b True False)
            {all dead. Bool}
            (/\dead -> False)
            (/\dead -> evenDirect (subtractInteger n 1))
            {all dead. dead}
  in
  evenDirect 4)
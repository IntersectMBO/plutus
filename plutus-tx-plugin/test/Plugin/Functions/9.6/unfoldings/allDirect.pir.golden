let
  data Bool | Bool_match where
    True : Bool
    False : Bool
  ~nandDirect : Bool -> Bool -> Bool
    = \(ds : Bool) ->
        let
          !ds : Bool = ds
        in
        \(ds : Bool) ->
          let
            !ds : Bool = ds
          in
          Bool_match
            ds
            {all dead. Bool}
            (/\dead -> False)
            (/\dead ->
               Bool_match
                 ds
                 {all dead. Bool}
                 (/\dead -> False)
                 (/\dead -> True)
                 {all dead. dead})
            {all dead. dead}
  ~andDirect : Bool -> Bool -> Bool
    = \(ds : Bool) ->
        let
          !ds : Bool = ds
        in
        \(ds : Bool) ->
          let
            !ds : Bool = ds
          in
          nandDirect (nandDirect ds ds) (nandDirect ds ds)
in
letrec
  data (List :: * -> *) a | List_match where
    Nil : List a
    Cons : a -> List a -> List a
in
letrec
  ~allDirect : all a. (a -> Bool) -> List a -> Bool
    = /\a ->
        \(p : a -> Bool) ->
          let
            !p : a -> Bool = p
          in
          \(l : List a) ->
            let
              !l : List a = l
            in
            List_match
              {a}
              l
              {all dead. Bool}
              (/\dead -> True)
              (\(h : a) (t : List a) ->
                 /\dead -> andDirect (p h) (allDirect {a} p t))
              {all dead. dead}
in
let
  ~build : all a. (all b. (a -> b -> b) -> b -> b) -> List a
    = /\a ->
        \(g : all b. (a -> b -> b) -> b -> b) ->
          g {List a} (\(ds : a) (ds : List a) -> Cons {a} ds ds) (Nil {a})
  !ifThenElse : all a. bool -> a -> a -> a = ifThenElse
  !lessThanInteger : integer -> integer -> bool = lessThanInteger
  ~lessThanInteger : integer -> integer -> Bool
    = \(x : integer) ->
        let
          !x : integer = x
        in
        \(y : integer) ->
          let
            !y : integer = y
            !b : bool = lessThanInteger x y
          in
          ifThenElse {Bool} b True False
in
allDirect
  {integer}
  (\(ds : integer) -> let !ds : integer = ds in lessThanInteger ds 5)
  (build {integer} (/\a -> \(c : integer -> a -> a) (n : a) -> c 7 (c 6 n)))
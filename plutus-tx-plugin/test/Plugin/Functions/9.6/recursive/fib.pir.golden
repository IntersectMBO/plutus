(program
  1.1.0
  (let
    (nonrec)
    (termbind
      (strict)
      (vardecl addInteger (fun (con integer) (fun (con integer) (con integer))))
      (builtin addInteger)
    )
    (termbind
      (nonstrict)
      (vardecl addInteger (fun (con integer) (fun (con integer) (con integer))))
      (lam
        x
        (con integer)
        (let
          (nonrec)
          (termbind (strict) (vardecl x (con integer)) x)
          (lam
            y
            (con integer)
            (let
              (nonrec)
              (termbind (strict) (vardecl y (con integer)) y)
              [ [ addInteger x ] y ]
            )
          )
        )
      )
    )
    (datatypebind
      (datatype
        (tyvardecl Bool (type))

        Bool_match
        (vardecl True Bool) (vardecl False Bool)
      )
    )
    (termbind
      (strict)
      (vardecl equalsInteger (fun (con integer) (fun (con integer) (con bool))))
      (builtin equalsInteger)
    )
    (termbind
      (strict)
      (vardecl ifThenElse (all a (type) (fun (con bool) (fun a (fun a a)))))
      (builtin ifThenElse)
    )
    (termbind
      (nonstrict)
      (vardecl equalsInteger (fun (con integer) (fun (con integer) Bool)))
      (lam
        x
        (con integer)
        (let
          (nonrec)
          (termbind (strict) (vardecl x (con integer)) x)
          (lam
            y
            (con integer)
            (let
              (nonrec)
              (termbind (strict) (vardecl y (con integer)) y)
              (termbind
                (strict) (vardecl b (con bool)) [ [ equalsInteger x ] y ]
              )
              [ [ [ { ifThenElse Bool } b ] True ] False ]
            )
          )
        )
      )
    )
    (termbind
      (strict)
      (vardecl
        subtractInteger (fun (con integer) (fun (con integer) (con integer)))
      )
      (builtin subtractInteger)
    )
    (termbind
      (nonstrict)
      (vardecl
        subtractInteger (fun (con integer) (fun (con integer) (con integer)))
      )
      (lam
        x
        (con integer)
        (let
          (nonrec)
          (termbind (strict) (vardecl x (con integer)) x)
          (lam
            y
            (con integer)
            (let
              (nonrec)
              (termbind (strict) (vardecl y (con integer)) y)
              [ [ subtractInteger x ] y ]
            )
          )
        )
      )
    )
    (let
      (rec)
      (termbind
        (nonstrict)
        (vardecl fib (fun (con integer) (con integer)))
        (lam
          n
          (con integer)
          (let
            (nonrec)
            (termbind (strict) (vardecl n (con integer)) n)
            {
              [
                [
                  {
                    [ Bool_match [ [ equalsInteger n ] (con integer 0) ] ]
                    (all dead (type) (con integer))
                  }
                  (abs dead (type) (con integer 0))
                ]
                (abs
                  dead
                  (type)
                  {
                    [
                      [
                        {
                          [ Bool_match [ [ equalsInteger n ] (con integer 1) ] ]
                          (all dead (type) (con integer))
                        }
                        (abs dead (type) (con integer 1))
                      ]
                      (abs
                        dead
                        (type)
                        [
                          [
                            addInteger
                            [ fib [ [ subtractInteger n ] (con integer 1) ] ]
                          ]
                          [ fib [ [ subtractInteger n ] (con integer 2) ] ]
                        ]
                      )
                    ]
                    (all dead (type) dead)
                  }
                )
              ]
              (all dead (type) dead)
            }
          )
        )
      )
      fib
    )
  )
)
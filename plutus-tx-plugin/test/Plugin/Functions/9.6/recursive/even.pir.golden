let
  data Bool | Bool_match where
    True : Bool
    False : Bool
  !equalsInteger : integer -> integer -> bool = equalsInteger
  !ifThenElse : all a. bool -> a -> a -> a = ifThenElse
  ~equalsInteger : integer -> integer -> Bool
    = \(x : integer) ->
        let
          !x : integer = x
        in
        \(y : integer) ->
          let
            !y : integer = y
            !b : bool = equalsInteger x y
          in
          ifThenElse {Bool} b True False
  !subtractInteger : integer -> integer -> integer = subtractInteger
  ~subtractInteger : integer -> integer -> integer
    = \(x : integer) ->
        let
          !x : integer = x
        in
        \(y : integer) -> let !y : integer = y in subtractInteger x y
in
letrec
  ~even : integer -> Bool
    = \(n : integer) ->
        let
          !n : integer = n
        in
        Bool_match
          (equalsInteger n 0)
          {all dead. Bool}
          (/\dead -> True)
          (/\dead ->
             let
               !n : integer = subtractInteger n 1
             in
             Bool_match
               (equalsInteger n 0)
               {all dead. Bool}
               (/\dead -> False)
               (/\dead -> even (subtractInteger n 1))
               {all dead. dead})
          {all dead. dead}
in
even
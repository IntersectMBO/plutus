(program
  1.1.0
  (let
    (rec)
    (datatypebind
      (datatype
        (tyvardecl List (fun (type) (type)))
        (tyvardecl a (type))
        List_match
        (vardecl Nil [ List a ])
        (vardecl Cons (fun a (fun [ List a ] [ List a ])))
      )
    )
    (let
      (nonrec)
      (termbind
        (strict)
        (vardecl
          addInteger (fun (con integer) (fun (con integer) (con integer)))
        )
        (builtin addInteger)
      )
      (termbind
        (nonstrict)
        (vardecl
          addInteger (fun (con integer) (fun (con integer) (con integer)))
        )
        (lam
          x
          (con integer)
          (let
            (nonrec)
            (termbind (strict) (vardecl x (con integer)) x)
            (lam
              y
              (con integer)
              (let
                (nonrec)
                (termbind (strict) (vardecl y (con integer)) y)
                [ [ addInteger x ] y ]
              )
            )
          )
        )
      )
      (let
        (rec)
        (termbind
          (nonstrict)
          (vardecl sum (fun [ List (con integer) ] (con integer)))
          (lam
            ds
            [ List (con integer) ]
            [
              [
                { [ { List_match (con integer) } ds ] (con integer) }
                (con integer 0)
              ]
              (lam
                x
                (con integer)
                (lam xs [ List (con integer) ] [ [ addInteger x ] [ sum xs ] ])
              )
            ]
          )
        )
        sum
      )
    )
  )
)
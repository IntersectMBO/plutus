(program
  (let
    (nonrec)
    (datatypebind
      (datatype
        (tyvardecl Bool (type))

        Bool_match
        (vardecl True Bool) (vardecl False Bool)
      )
    )
    (termbind
      (strict)
      (vardecl equalsInteger (fun (con integer) (fun (con integer) (con bool))))
      (builtin equalsInteger)
    )
    (termbind
      (strict)
      (vardecl ifThenElse (all a (type) (fun (con bool) (fun a (fun a a)))))
      (builtin ifThenElse)
    )
    (termbind
      (strict)
      (vardecl equalsInteger (fun (con integer) (fun (con integer) Bool)))
      (lam
        x
        (con integer)
        (lam
          y
          (con integer)
          [ [ [ { ifThenElse Bool } [ [ equalsInteger x ] y ] ] True ] False ]
        )
      )
    )
    (termbind
      (strict)
      (vardecl
        subtractInteger (fun (con integer) (fun (con integer) (con integer)))
      )
      (builtin subtractInteger)
    )
    (termbind
      (strict)
      (vardecl
        subtractInteger (fun (con integer) (fun (con integer) (con integer)))
      )
      (lam x (con integer) (lam y (con integer) [ [ subtractInteger x ] y ]))
    )
    (let
      (rec)
      (termbind
        (strict)
        (vardecl even (fun (con integer) Bool))
        (lam
          n
          (con integer)
          (let
            (nonrec)
            (termbind
              (nonstrict)
              (vardecl n (con integer))
              [ [ subtractInteger n ] (con integer 1) ]
            )
            {
              [
                [
                  {
                    [ Bool_match [ [ equalsInteger n ] (con integer 0) ] ]
                    (all dead (type) Bool)
                  }
                  (abs dead (type) True)
                ]
                (abs
                  dead
                  (type)
                  {
                    [
                      [
                        {
                          [ Bool_match [ [ equalsInteger n ] (con integer 0) ] ]
                          (all dead (type) Bool)
                        }
                        (abs dead (type) False)
                      ]
                      (abs
                        dead
                        (type)
                        [ even [ [ subtractInteger n ] (con integer 1) ] ]
                      )
                    ]
                    (all dead (type) dead)
                  }
                )
              ]
              (all dead (type) dead)
            }
          )
        )
      )
      even
    )
  )
)
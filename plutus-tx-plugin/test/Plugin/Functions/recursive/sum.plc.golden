(program
  (let
    (rec)
    (datatypebind
      (datatype
        (tyvardecl List (fun (type) (type)))
        (tyvardecl a (type))
        Nil_match
        (vardecl Nil [List a]) (vardecl Cons (fun a (fun [List a] [List a])))
      )
    )
    (let
      (nonrec)
      (termbind
        (strict)
        (vardecl
          addInteger (fun (con integer) (fun (con integer) (con integer)))
        )
        (builtin addInteger)
      )
      (let
        (rec)
        (termbind
          (strict)
          (vardecl sum (fun [List (con integer)] (con integer)))
          (lam
            ds
            [List (con integer)]
            [
              [ { [ { Nil_match (con integer) } ds ] (con integer) } (con 0) ]
              (lam
                x
                (con integer)
                (lam xs [List (con integer)] [ [ addInteger x ] [ sum xs ] ])
              )
            ]
          )
        )
        sum
      )
    )
  )
)
(program
  (let
    (nonrec)
    (datatypebind
      (datatype (tyvardecl Unit (type))  Unit_match (vardecl Unit Unit))
    )
    (datatypebind
      (datatype
        (tyvardecl Bool (type))
        
        Bool_match
        (vardecl True Bool) (vardecl False Bool)
      )
    )
    (termbind
      (strict)
      (vardecl nandDirect (fun Bool (fun Bool Bool)))
      (lam
        ds
        Bool
        (lam
          ds
          Bool
          [
            [
              [ { [ Bool_match ds ] (fun Unit Bool) } (lam thunk Unit False) ]
              (lam
                thunk
                Unit
                [
                  [
                    [
                      { [ Bool_match ds ] (fun Unit Bool) }
                      (lam thunk Unit False)
                    ]
                    (lam thunk Unit True)
                  ]
                  Unit
                ]
              )
            ]
            Unit
          ]
        )
      )
    )
    (termbind
      (strict)
      (vardecl andDirect (fun Bool (fun Bool Bool)))
      (lam
        ds
        Bool
        (lam
          ds
          Bool
          [ [ nandDirect [ [ nandDirect ds ] ds ] ] [ [ nandDirect ds ] ds ] ]
        )
      )
    )
    (let
      (rec)
      (datatypebind
        (datatype
          (tyvardecl List (fun (type) (type)))
          (tyvardecl a (type))
          Nil_match
          (vardecl Nil [List a]) (vardecl Cons (fun a (fun [List a] [List a])))
        )
      )
      (let
        (rec)
        (termbind
          (nonstrict)
          (vardecl
            allDirect (all a (type) (fun (fun a Bool) (fun [List a] Bool)))
          )
          (abs
            a
            (type)
            (lam
              p
              (fun a Bool)
              (lam
                l
                [List a]
                [
                  [
                    [
                      { [ { Nil_match a } l ] (fun Unit Bool) }
                      (lam thunk Unit True)
                    ]
                    (lam
                      h
                      a
                      (lam
                        t
                        [List a]
                        (lam
                          thunk
                          Unit
                          [ [ andDirect [ p h ] ] [ [ { allDirect a } p ] t ] ]
                        )
                      )
                    )
                  ]
                  Unit
                ]
              )
            )
          )
        )
        (let
          (nonrec)
          (termbind
            (strict)
            (vardecl
              build
              (all a (type) (fun (all b (type) (fun (fun a (fun b b)) (fun b b))) [List a]))
            )
            (abs
              a
              (type)
              (lam
                g
                (all b (type) (fun (fun a (fun b b)) (fun b b)))
                [ [ { g [List a] } { Cons a } ] { Nil a } ]
              )
            )
          )
          (termbind
            (strict)
            (vardecl
              greaterThanInteger (fun (con integer) (fun (con integer) Bool))
            )
            (lam
              arg
              (con integer)
              (lam
                arg
                (con integer)
                [
                  (lam
                    b
                    (con bool)
                    [ [ [ { (builtin ifThenElse) Bool } b ] True ] False ]
                  )
                  [ [ (builtin greaterThanInteger) arg ] arg ]
                ]
              )
            )
          )
          [
            [
              { allDirect (con integer) }
              (lam
                ds (con integer) [ [ greaterThanInteger ds ] (con integer 5) ]
              )
            ]
            [
              { build (con integer) }
              (abs
                a
                (type)
                (lam
                  c
                  (fun (con integer) (fun a a))
                  (lam n a [ [ c (con integer 7) ] [ [ c (con integer 6) ] n ] ]
                  )
                )
              )
            ]
          ]
        )
      )
    )
  )
)
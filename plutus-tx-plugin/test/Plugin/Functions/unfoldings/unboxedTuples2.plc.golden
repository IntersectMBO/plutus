(program
  (let
    (nonrec)
    (datatypebind
      (datatype
        (tyvardecl UnboxedTypeTuple2 (fun (type) (fun (type) (type))))
        (tyvardecl a (type)) (tyvardecl b (type))
        UnboxedTermTuple2_match
        (vardecl UnboxedTermTuple2 (fun a (fun b [ [ UnboxedTypeTuple2 a ] b ]))
        )
      )
    )
    (termbind
      (strict)
      (vardecl addInteger (fun (con integer) (fun (con integer) (con integer))))
      (builtin addInteger)
    )
    (termbind
      (strict)
      (vardecl addInteger (fun (con integer) (fun (con integer) (con integer))))
      (lam x (con integer) (lam y (con integer) [ [ addInteger x ] y ]))
    )
    (termbind
      (strict)
      (vardecl
        unboxedTuple
        (fun
          [ [ UnboxedTypeTuple2 (con integer) ] (con integer) ] (con integer))
      )
      (lam
        ds
        [ [ UnboxedTypeTuple2 (con integer) ] (con integer) ]
        [
          {
            [ { { UnboxedTermTuple2_match (con integer) } (con integer) } ds ]
            (con integer)
          }
          (lam i (con integer) (lam j (con integer) [ [ addInteger i ] j ]))
        ]
      )
    )
    (lam
      x
      (con integer)
      [
        unboxedTuple
        [ [ { { UnboxedTermTuple2 (con integer) } (con integer) } x ] x ]
      ]
    )
  )
)
(program
  (let
    (nonrec)
    (termbind
      (strict)
      (vardecl addInteger (fun (con integer) (fun (con integer) (con integer))))
      (builtin addInteger)
    )
    (let
      (rec)
      (datatypebind
        (datatype
          (tyvardecl List (fun (type) (type)))
          (tyvardecl a (type))
          Nil_match
          (vardecl Nil [List a]) (vardecl Cons (fun a (fun [List a] [List a])))
        )
      )
      (let
        (nonrec)
        (termbind
          (strict)
          (vardecl
            build
            (all a (type) (fun (all b (type) (fun (fun a (fun b b)) (fun b b))) [List a]))
          )
          (abs
            a
            (type)
            (lam
              g
              (all b (type) (fun (fun a (fun b b)) (fun b b)))
              [ [ { g [List a] } { Cons a } ] { Nil a } ]
            )
          )
        )
        (datatypebind
          (datatype (tyvardecl Unit (type))  Unit_match (vardecl Unit Unit))
        )
        (let
          (rec)
          (termbind
            (nonstrict)
            (vardecl
              mapDirect
              (all a (type) (all b (type) (fun (fun a b) (fun [List a] [List b]))))
            )
            (abs
              a
              (type)
              (abs
                b
                (type)
                (lam
                  f
                  (fun a b)
                  (lam
                    l
                    [List a]
                    [
                      [
                        [
                          { [ { Nil_match a } l ] (fun Unit [List b]) }
                          (lam thunk Unit { Nil b })
                        ]
                        (lam
                          x
                          a
                          (lam
                            xs
                            [List a]
                            (lam
                              thunk
                              Unit
                              [
                                [ { Cons b } [ f x ] ]
                                [ [ { { mapDirect a } b } f ] xs ]
                              ]
                            )
                          )
                        )
                      ]
                      Unit
                    ]
                  )
                )
              )
            )
          )
          [
            [
              { { mapDirect (con integer) } (con integer) }
              [ addInteger (con 1) ]
            ]
            [
              { build (con integer) }
              (abs
                a
                (type)
                (lam
                  c
                  (fun (con integer) (fun a a))
                  (lam n a [ [ c (con 0) ] [ [ c (con 1) ] n ] ])
                )
              )
            ]
          ]
        )
      )
    )
  )
)
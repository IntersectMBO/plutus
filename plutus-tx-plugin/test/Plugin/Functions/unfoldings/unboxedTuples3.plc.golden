(program
  (let
    (nonrec)
    (datatypebind
      (datatype
        (tyvardecl UnboxedTuple3 (fun (type) (fun (type) (fun (type) (type)))))
        (tyvardecl a (type)) (tyvardecl b (type)) (tyvardecl c (type))
        UnboxedTuple3_match
        (vardecl
          UnboxedTuple3 (fun a (fun b (fun c [ [ [ UnboxedTuple3 a ] b ] c ])))
        )
      )
    )
    (termbind
      (strict)
      (vardecl addInteger (fun (con integer) (fun (con integer) (con integer))))
      (builtin addInteger)
    )
    (termbind
      (strict)
      (vardecl addInteger (fun (con integer) (fun (con integer) (con integer))))
      (lam x (con integer) (lam y (con integer) [ [ addInteger x ] y ]))
    )
    (termbind
      (strict)
      (vardecl
        unboxedTuple
        (fun
          [ [ [ UnboxedTuple3 (con integer) ] (con integer) ] (con integer) ]
          (con integer))
      )
      (lam
        ds
        [ [ [ UnboxedTuple3 (con integer) ] (con integer) ] (con integer) ]
        [
          {
            [
              {
                { { UnboxedTuple3_match (con integer) } (con integer) }
                (con integer)
              }
              ds
            ]
            (con integer)
          }
          (lam
            i
            (con integer)
            (lam
              j
              (con integer)
              (lam k (con integer) [ [ addInteger [ [ addInteger i ] j ] ] k ])
            )
          )
        ]
      )
    )
    (lam
      x
      (con integer)
      [
        unboxedTuple
        [
          [
            [
              {
                { { UnboxedTuple3 (con integer) } (con integer) } (con integer)
              }
              x
            ]
            x
          ]
          x
        ]
      ]
    )
  )
)
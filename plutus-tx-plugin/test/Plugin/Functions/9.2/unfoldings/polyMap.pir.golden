(program
  1.1.0
  (let
    (nonrec)
    (termbind
      (strict)
      (vardecl addInteger (fun (con integer) (fun (con integer) (con integer))))
      (builtin addInteger)
    )
    (termbind
      (nonstrict)
      (vardecl addInteger (fun (con integer) (fun (con integer) (con integer))))
      (lam
        x
        (con integer)
        (let
          (nonrec)
          (termbind (strict) (vardecl x (con integer)) x)
          (lam
            y
            (con integer)
            (let
              (nonrec)
              (termbind (strict) (vardecl y (con integer)) y)
              [ [ addInteger x ] y ]
            )
          )
        )
      )
    )
    (let
      (rec)
      (datatypebind
        (datatype
          (tyvardecl List (fun (type) (type)))
          (tyvardecl a (type))
          List_match
          (vardecl Nil [ List a ])
          (vardecl Cons (fun a (fun [ List a ] [ List a ])))
        )
      )
      (let
        (nonrec)
        (termbind
          (nonstrict)
          (vardecl
            build
            (all
              a
              (type)
              (fun (all b (type) (fun (fun a (fun b b)) (fun b b))) [ List a ])
            )
          )
          (abs
            a
            (type)
            (lam
              g
              (all b (type) (fun (fun a (fun b b)) (fun b b)))
              [
                [
                  { g [ List a ] }
                  (lam ds a (lam ds [ List a ] [ [ { Cons a } ds ] ds ]))
                ]
                { Nil a }
              ]
            )
          )
        )
        (let
          (rec)
          (termbind
            (nonstrict)
            (vardecl
              mapDirect
              (all
                a
                (type)
                (all b (type) (fun (fun a b) (fun [ List a ] [ List b ])))
              )
            )
            (abs
              a
              (type)
              (abs
                b
                (type)
                (lam
                  f
                  (fun a b)
                  (let
                    (nonrec)
                    (termbind (strict) (vardecl f (fun a b)) f)
                    (lam
                      l
                      [ List a ]
                      {
                        [
                          [
                            {
                              [ { List_match a } l ]
                              (all dead (type) [ List b ])
                            }
                            (abs dead (type) { Nil b })
                          ]
                          (lam
                            x
                            a
                            (lam
                              xs
                              [ List a ]
                              (abs
                                dead
                                (type)
                                [
                                  [ { Cons b } [ f x ] ]
                                  [ [ { { mapDirect a } b } f ] xs ]
                                ]
                              )
                            )
                          )
                        ]
                        (all dead (type) dead)
                      }
                    )
                  )
                )
              )
            )
          )
          [
            [
              { { mapDirect (con integer) } (con integer) }
              [ addInteger (con integer 1) ]
            ]
            [
              { build (con integer) }
              (abs
                a
                (type)
                (lam
                  c
                  (fun (con integer) (fun a a))
                  (lam
                    n a [ [ c (con integer 0) ] [ [ c (con integer 1) ] n ] ]
                  )
                )
              )
            ]
          ]
        )
      )
    )
  )
)
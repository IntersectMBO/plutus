(program
  1.1.0
  (let
    (nonrec)
    (datatypebind
      (datatype
        (tyvardecl Bool (type))

        Bool_match
        (vardecl True Bool) (vardecl False Bool)
      )
    )
    (termbind
      (nonstrict)
      (vardecl nandDirect (fun Bool (fun Bool Bool)))
      (lam
        ds
        Bool
        (let
          (nonrec)
          (termbind (strict) (vardecl ds Bool) ds)
          (lam
            ds
            Bool
            (let
              (nonrec)
              (termbind (strict) (vardecl ds Bool) ds)
              {
                [
                  [
                    { [ Bool_match ds ] (all dead (type) Bool) }
                    (abs dead (type) False)
                  ]
                  (abs
                    dead
                    (type)
                    {
                      [
                        [
                          { [ Bool_match ds ] (all dead (type) Bool) }
                          (abs dead (type) False)
                        ]
                        (abs dead (type) True)
                      ]
                      (all dead (type) dead)
                    }
                  )
                ]
                (all dead (type) dead)
              }
            )
          )
        )
      )
    )
    (termbind
      (nonstrict)
      (vardecl andDirect (fun Bool (fun Bool Bool)))
      (lam
        ds
        Bool
        (let
          (nonrec)
          (termbind (strict) (vardecl ds Bool) ds)
          (lam
            ds
            Bool
            (let
              (nonrec)
              (termbind (strict) (vardecl ds Bool) ds)
              [
                [ nandDirect [ [ nandDirect ds ] ds ] ] [ [ nandDirect ds ] ds ]
              ]
            )
          )
        )
      )
    )
    (let
      (rec)
      (datatypebind
        (datatype
          (tyvardecl List (fun (type) (type)))
          (tyvardecl a (type))
          List_match
          (vardecl Nil [ List a ])
          (vardecl Cons (fun a (fun [ List a ] [ List a ])))
        )
      )
      (let
        (rec)
        (termbind
          (nonstrict)
          (vardecl
            allDirect (all a (type) (fun (fun a Bool) (fun [ List a ] Bool)))
          )
          (abs
            a
            (type)
            (lam
              p
              (fun a Bool)
              (let
                (nonrec)
                (termbind (strict) (vardecl p (fun a Bool)) p)
                (lam
                  l
                  [ List a ]
                  {
                    [
                      [
                        { [ { List_match a } l ] (all dead (type) Bool) }
                        (abs dead (type) True)
                      ]
                      (lam
                        h
                        a
                        (lam
                          t
                          [ List a ]
                          (abs
                            dead
                            (type)
                            [
                              [ andDirect [ p h ] ] [ [ { allDirect a } p ] t ]
                            ]
                          )
                        )
                      )
                    ]
                    (all dead (type) dead)
                  }
                )
              )
            )
          )
        )
        (let
          (nonrec)
          (termbind
            (nonstrict)
            (vardecl
              build
              (all
                a
                (type)
                (fun
                  (all b (type) (fun (fun a (fun b b)) (fun b b))) [ List a ]
                )
              )
            )
            (abs
              a
              (type)
              (lam
                g
                (all b (type) (fun (fun a (fun b b)) (fun b b)))
                [
                  [
                    { g [ List a ] }
                    (lam ds a (lam ds [ List a ] [ [ { Cons a } ds ] ds ]))
                  ]
                  { Nil a }
                ]
              )
            )
          )
          (termbind
            (strict)
            (vardecl
              ifThenElse (all a (type) (fun (con bool) (fun a (fun a a))))
            )
            (builtin ifThenElse)
          )
          (termbind
            (strict)
            (vardecl
              lessThanInteger (fun (con integer) (fun (con integer) (con bool)))
            )
            (builtin lessThanInteger)
          )
          (termbind
            (nonstrict)
            (vardecl
              lessThanInteger (fun (con integer) (fun (con integer) Bool))
            )
            (lam
              x
              (con integer)
              (let
                (nonrec)
                (termbind (strict) (vardecl x (con integer)) x)
                (lam
                  y
                  (con integer)
                  (let
                    (nonrec)
                    (termbind (strict) (vardecl y (con integer)) y)
                    (termbind
                      (strict)
                      (vardecl b (con bool))
                      [ [ lessThanInteger x ] y ]
                    )
                    [ [ [ { ifThenElse Bool } b ] True ] False ]
                  )
                )
              )
            )
          )
          [
            [
              { allDirect (con integer) }
              (lam
                ds
                (con integer)
                (let
                  (nonrec)
                  (termbind (strict) (vardecl ds (con integer)) ds)
                  [ [ lessThanInteger ds ] (con integer 5) ]
                )
              )
            ]
            [
              { build (con integer) }
              (abs
                a
                (type)
                (lam
                  c
                  (fun (con integer) (fun a a))
                  (lam
                    n a [ [ c (con integer 7) ] [ [ c (con integer 6) ] n ] ]
                  )
                )
              )
            ]
          ]
        )
      )
    )
  )
)
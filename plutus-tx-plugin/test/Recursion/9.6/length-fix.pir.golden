letrec
  data (List :: * -> *) a | List_match where
    Nil : List a
    Cons : a -> List a -> List a
in
(let
    a = List integer
  in
  /\b ->
    \(f : (a -> b) -> a -> b) ->
      let
        !s : (\a -> ifix (\(self :: * -> *) a -> self a -> a) a) (a -> b)
          = iwrap
              (\(self :: * -> *) a -> self a -> a)
              (a -> b)
              (\(s :
                   (\a -> ifix (\(self :: * -> *) a -> self a -> a) a)
                     (a -> b)) ->
                 f (\(x : a) -> unwrap s s x))
      in
      \(x0 : a) -> unwrap s s x0)
  {integer}
  (\(f : List integer -> integer) (xs : List integer) ->
     List_match
       {integer}
       xs
       {integer}
       0
       (\(ds : integer) (ys : List integer) -> addInteger 1 (f ys)))
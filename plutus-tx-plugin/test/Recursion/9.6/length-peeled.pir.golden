(letrec
    data (List :: * -> *) a | List_match where
      Nil : List a
      Cons : a -> List a -> List a
  in
  \(ds : List integer) ->
    List_match
      {integer}
      ds
      {integer}
      0
      (\(ds : integer) (xs : List integer) ->
         addInteger
           1
           (List_match
              {integer}
              xs
              {integer}
              0
              (\(ds : integer) (xs : List integer) ->
                 addInteger
                   1
                   (List_match
                      {integer}
                      xs
                      {integer}
                      0
                      (\(ds : integer) (xs : List integer) ->
                         addInteger
                           1
                           ((let
                                a = List integer
                              in
                              /\b ->
                                \(f : (a -> b) -> a -> b) ->
                                  let
                                    !s :
                                       (\a ->
                                          ifix
                                            (\(self :: * -> *) a -> self a -> a)
                                            a)
                                         (a -> b)
                                      = iwrap
                                          (\(self :: * -> *) a -> self a -> a)
                                          (a -> b)
                                          (\(s :
                                               (\a ->
                                                  ifix
                                                    (\(self :: * -> *) a ->
                                                       self a -> a)
                                                    a)
                                                 (a -> b)) ->
                                             f (\(x : a) -> unwrap s s x))
                                  in
                                  unwrap s s)
                              {integer}
                              (\(self : List integer -> integer)
                                (ds : List integer) ->
                                 List_match
                                   {integer}
                                   ds
                                   {integer}
                                   0
                                   (\(ds : integer) (xs : List integer) ->
                                      addInteger 1 (self xs)))
                              xs)))))))
  (letrec
    data (`GHC.Types.List` :: * -> *) a | `match_GHC.Types.List` where
      `GHC.Types.Nil` : `GHC.Types.List` a
      `GHC.Types.Cons` : a -> `GHC.Types.List` a -> `GHC.Types.List` a
  in
  `GHC.Types.Cons`
    {integer}
    1
    (`GHC.Types.Cons`
       {integer}
       2
       (`GHC.Types.Cons`
          {integer}
          3
          (`GHC.Types.Cons`
             {integer}
             4
             (`GHC.Types.Cons`
                {integer}
                5
                (`GHC.Types.Cons`
                   {integer}
                   6
                   (`GHC.Types.Cons`
                      {integer}
                      7
                      (`GHC.Types.Cons`
                         {integer}
                         8
                         (`GHC.Types.Cons`
                            {integer}
                            9
                            (`GHC.Types.Cons`
                               {integer}
                               10
                               (`GHC.Types.Nil` {integer})))))))))))
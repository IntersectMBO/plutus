(letrec
    data (List :: * -> *) a | List_match where
      Nil : List a
      Cons : a -> List a -> List a
  in
  letrec
    !lengthDirect : List integer -> integer
      = \(ds : List integer) ->
          List_match
            {integer}
            ds
            {integer}
            0
            (\(ds : integer) (xs : List integer) ->
               addInteger 1 (lengthDirect xs))
  in
  lengthDirect)
  (letrec
    data (`GHC.Types.List` :: * -> *) a | `match_GHC.Types.List` where
      `GHC.Types.Nil` : `GHC.Types.List` a
      `GHC.Types.Cons` : a -> `GHC.Types.List` a -> `GHC.Types.List` a
  in
  `GHC.Types.Cons`
    {integer}
    1
    (`GHC.Types.Cons`
       {integer}
       2
       (`GHC.Types.Cons`
          {integer}
          3
          (`GHC.Types.Cons`
             {integer}
             4
             (`GHC.Types.Cons`
                {integer}
                5
                (`GHC.Types.Cons`
                   {integer}
                   6
                   (`GHC.Types.Cons`
                      {integer}
                      7
                      (`GHC.Types.Cons`
                         {integer}
                         8
                         (`GHC.Types.Cons`
                            {integer}
                            9
                            (`GHC.Types.Cons`
                               {integer}
                               10
                               (`GHC.Types.Nil` {integer})))))))))))
let
  data Unit | Unit_match where
    Unit : Unit
  data Bool | Bool_match where
    True : Bool
    False : Bool
in
\(m : integer) ->
  Bool_match
    (case Bool (lessThanInteger m 0) [False, True])
    {all dead. integer}
    (/\dead ->
       addInteger (error {integer -> integer} m) (error {integer -> integer} m))
    (/\dead -> m)
    {all dead. dead}
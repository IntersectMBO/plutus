{-# LANGUAGE ApplicativeDo     #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE QuasiQuotes       #-}
{-# LANGUAGE RecordWildCards   #-}

module Main (main) where

import PlutusTx.Options qualified as O

import Control.Lens
import Data.Map qualified as Map
import Data.Text (Text)
import Data.Text qualified as Text
import Data.Text.IO qualified as Text
import NeatInterpolation (text)
import Options.Applicative qualified as OA
import Prettyprinter


newtype Params = Params
    {paramOutputFile :: Text}

parseParams :: OA.Parser Params
parseParams = do
    paramOutputFile <-
        OA.argument OA.str $
            mconcat
                [ OA.metavar "OUTPUT_FILE"
                , OA.help "Output file path"
                ]
    pure Params{..}

main :: IO ()
main = do
    params <-
        OA.execParser $
            OA.info
                (parseParams OA.<**> OA.helper)
                (OA.fullDesc <> OA.header "Generate plugin option documentation")
    Text.writeFile (Text.unpack $ paramOutputFile params) optionsTable

optionsTable :: Text
optionsTable =
    [text|
..
   This file is generated by running plutus-tx-plugin:gen-plugin-opts-doc.
   Do not modify by hand.

.. list-table::
   :header-rows: 1
   :widths: 35 15 15 50

   * - Option
     - Value Type
     - Default
     - Description
${Text.unlines $ uncurry genRow <$> Map.toList O.pluginOptions}
|]

genRow :: O.OptionKey -> O.PluginOption -> Text
genRow k (O.PluginOption tr _ field desc) =
    [text|
   * - ``$k``
     - ${show tr}
     - ${show (pretty defaultValue)}
     - $desc
|]
  where
    defaultValue = O.defaultPluginOptions ^. field

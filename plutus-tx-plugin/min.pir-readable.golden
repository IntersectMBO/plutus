let
  data Bool | Bool_match where
    True : Bool
    False : Bool
  data Rational | Rational_match where
    Rational : integer -> integer -> Rational
in
\(x : Rational) (y : Rational) ->
  Bool_match
    (Rational_match
       x
       {Bool}
       (\(n : integer) (d : integer) ->
          Rational_match
            y
            {Bool}
            (\(n' : integer) (d' : integer) ->
               ifThenElse
                 {Bool}
                 (lessThanEqualsInteger
                    (multiplyInteger n d')
                    (multiplyInteger n' d))
                 True
                 False)))
    {all dead. Rational}
    (/\dead -> x)
    (/\dead -> y)
    {all dead. dead}
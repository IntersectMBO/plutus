/\(s :: size) -> \(n : integer s) -> \(m : integer s) -> (/\(a :: *) -> /\(b :: *) -> \(f : (a -> b) -> a -> b) -> (/\(a :: *) -> \(s : (\(a :: *) -> ifix (\(rec :: ((* -> *) -> *) -> *) -> \(spine :: (* -> *) -> *) -> spine ((\(self :: * -> *) -> \(a :: *) -> self a -> a) (\(a :: *) -> rec (\(dat :: * -> *) -> dat a)))) (\(dat :: * -> *) -> dat a)) a) -> unwrap s s) {a -> b} (iwrap (\(rec :: ((* -> *) -> *) -> *) -> \(spine :: (* -> *) -> *) -> spine ((\(self :: * -> *) -> \(a :: *) -> self a -> a) (\(a :: *) -> rec (\(dat :: * -> *) -> dat a)))) (\(dat :: * -> *) -> dat (a -> b)) (\(s : (\(a :: *) -> ifix (\(rec :: ((* -> *) -> *) -> *) -> \(spine :: (* -> *) -> *) -> spine ((\(self :: * -> *) -> \(a :: *) -> self a -> a) (\(a :: *) -> rec (\(dat :: * -> *) -> dat a)))) (\(dat :: * -> *) -> dat a)) (a -> b)) -> \(x : a) -> f ((/\(a :: *) -> \(s : (\(a :: *) -> ifix (\(rec :: ((* -> *) -> *) -> *) -> \(spine :: (* -> *) -> *) -> spine ((\(self :: * -> *) -> \(a :: *) -> self a -> a) (\(a :: *) -> rec (\(dat :: * -> *) -> dat a)))) (\(dat :: * -> *) -> dat a)) a) -> unwrap s s) {a -> b} s) x))) {integer s} {(\(a :: *) -> ifix (\(rec :: ((* -> *) -> *) -> *) -> \(spine :: (* -> *) -> *) -> spine ((\(list :: * -> *) -> \(a :: *) -> all (r :: *). r -> (a -> list a -> r) -> r) (\(a :: *) -> rec (\(dat :: * -> *) -> dat a)))) (\(dat :: * -> *) -> dat a)) (integer s)} (\(rec : integer s -> (\(a :: *) -> ifix (\(rec :: ((* -> *) -> *) -> *) -> \(spine :: (* -> *) -> *) -> spine ((\(list :: * -> *) -> \(a :: *) -> all (r :: *). r -> (a -> list a -> r) -> r) (\(a :: *) -> rec (\(dat :: * -> *) -> dat a)))) (\(dat :: * -> *) -> dat a)) (integer s)) -> \(n' : integer s) -> (/\(a :: *) -> \(b : all (a :: *). a -> a -> a) -> \(x : (all (a :: *). a -> a) -> a) -> \(y : (all (a :: *). a -> a) -> a) -> b {(all (a :: *). a -> a) -> a} x y (/\(a :: *) -> \(x : a) -> x)) {(\(a :: *) -> ifix (\(rec :: ((* -> *) -> *) -> *) -> \(spine :: (* -> *) -> *) -> spine ((\(list :: * -> *) -> \(a :: *) -> all (r :: *). r -> (a -> list a -> r) -> r) (\(a :: *) -> rec (\(dat :: * -> *) -> dat a)))) (\(dat :: * -> *) -> dat a)) (integer s)} (greaterThanInteger {s} n' m) (\(u : all (a :: *). a -> a) -> (/\(a :: *) -> iwrap (\(rec :: ((* -> *) -> *) -> *) -> \(spine :: (* -> *) -> *) -> spine ((\(list :: * -> *) -> \(a :: *) -> all (r :: *). r -> (a -> list a -> r) -> r) (\(a :: *) -> rec (\(dat :: * -> *) -> dat a)))) (\(dat :: * -> *) -> dat a) (/\(r :: *) -> \(z : r) -> \(f : a -> (\(a :: *) -> ifix (\(rec :: ((* -> *) -> *) -> *) -> \(spine :: (* -> *) -> *) -> spine ((\(list :: * -> *) -> \(a :: *) -> all (r :: *). r -> (a -> list a -> r) -> r) (\(a :: *) -> rec (\(dat :: * -> *) -> dat a)))) (\(dat :: * -> *) -> dat a)) a -> r) -> z)) {integer s}) (\(u : all (a :: *). a -> a) -> (/\(a :: *) -> \(x : a) -> \(xs : (\(a :: *) -> ifix (\(rec :: ((* -> *) -> *) -> *) -> \(spine :: (* -> *) -> *) -> spine ((\(list :: * -> *) -> \(a :: *) -> all (r :: *). r -> (a -> list a -> r) -> r) (\(a :: *) -> rec (\(dat :: * -> *) -> dat a)))) (\(dat :: * -> *) -> dat a)) a) -> iwrap (\(rec :: ((* -> *) -> *) -> *) -> \(spine :: (* -> *) -> *) -> spine ((\(list :: * -> *) -> \(a :: *) -> all (r :: *). r -> (a -> list a -> r) -> r) (\(a :: *) -> rec (\(dat :: * -> *) -> dat a)))) (\(dat :: * -> *) -> dat a) (/\(r :: *) -> \(z : r) -> \(f : a -> (\(a :: *) -> ifix (\(rec :: ((* -> *) -> *) -> *) -> \(spine :: (* -> *) -> *) -> spine ((\(list :: * -> *) -> \(a :: *) -> all (r :: *). r -> (a -> list a -> r) -> r) (\(a :: *) -> rec (\(dat :: * -> *) -> dat a)))) (\(dat :: * -> *) -> dat a)) a -> r) -> f x xs)) {integer s} n' (rec ((/\(s :: size) -> \(i : integer s) -> addInteger {s} i (resizeInteger {1} {s} (sizeOfInteger {s} i) 1!1)) {s} n')))) n
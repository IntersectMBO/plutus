/\(a :: *) -> \(xs : (\(a :: *) -> ifix (\(rec :: ((* -> *) -> *) -> *) -> \(spine :: (* -> *) -> *) -> spine ((\(list :: * -> *) -> \(a :: *) -> all (r :: *). r -> (a -> list a -> r) -> r) (\(a :: *) -> rec (\(dat :: * -> *) -> dat a)))) (\(dat :: * -> *) -> dat a)) a) -> (/\(a :: *) -> /\(r :: *) -> \(f : r -> a -> r) -> (/\(a :: *) -> /\(b :: *) -> \(f : (a -> b) -> a -> b) -> (/\(a :: *) -> \(s : (\(a :: *) -> ifix (\(rec :: ((* -> *) -> *) -> *) -> \(spine :: (* -> *) -> *) -> spine ((\(self :: * -> *) -> \(a :: *) -> self a -> a) (\(a :: *) -> rec (\(dat :: * -> *) -> dat a)))) (\(dat :: * -> *) -> dat a)) a) -> unwrap s s) {a -> b} (iwrap (\(rec :: ((* -> *) -> *) -> *) -> \(spine :: (* -> *) -> *) -> spine ((\(self :: * -> *) -> \(a :: *) -> self a -> a) (\(a :: *) -> rec (\(dat :: * -> *) -> dat a)))) (\(dat :: * -> *) -> dat (a -> b)) (\(s : (\(a :: *) -> ifix (\(rec :: ((* -> *) -> *) -> *) -> \(spine :: (* -> *) -> *) -> spine ((\(self :: * -> *) -> \(a :: *) -> self a -> a) (\(a :: *) -> rec (\(dat :: * -> *) -> dat a)))) (\(dat :: * -> *) -> dat a)) (a -> b)) -> \(x : a) -> f ((/\(a :: *) -> \(s : (\(a :: *) -> ifix (\(rec :: ((* -> *) -> *) -> *) -> \(spine :: (* -> *) -> *) -> spine ((\(self :: * -> *) -> \(a :: *) -> self a -> a) (\(a :: *) -> rec (\(dat :: * -> *) -> dat a)))) (\(dat :: * -> *) -> dat a)) a) -> unwrap s s) {a -> b} s) x))) {r} {(\(a :: *) -> ifix (\(rec :: ((* -> *) -> *) -> *) -> \(spine :: (* -> *) -> *) -> spine ((\(list :: * -> *) -> \(a :: *) -> all (r :: *). r -> (a -> list a -> r) -> r) (\(a :: *) -> rec (\(dat :: * -> *) -> dat a)))) (\(dat :: * -> *) -> dat a)) a -> r} (\(rec : r -> (\(a :: *) -> ifix (\(rec :: ((* -> *) -> *) -> *) -> \(spine :: (* -> *) -> *) -> spine ((\(list :: * -> *) -> \(a :: *) -> all (r :: *). r -> (a -> list a -> r) -> r) (\(a :: *) -> rec (\(dat :: * -> *) -> dat a)))) (\(dat :: * -> *) -> dat a)) a -> r) -> \(z : r) -> \(xs : (\(a :: *) -> ifix (\(rec :: ((* -> *) -> *) -> *) -> \(spine :: (* -> *) -> *) -> spine ((\(list :: * -> *) -> \(a :: *) -> all (r :: *). r -> (a -> list a -> r) -> r) (\(a :: *) -> rec (\(dat :: * -> *) -> dat a)))) (\(dat :: * -> *) -> dat a)) a) -> unwrap xs {r} z (\(x : a) -> \(xs' : (\(a :: *) -> ifix (\(rec :: ((* -> *) -> *) -> *) -> \(spine :: (* -> *) -> *) -> spine ((\(list :: * -> *) -> \(a :: *) -> all (r :: *). r -> (a -> list a -> r) -> r) (\(a :: *) -> rec (\(dat :: * -> *) -> dat a)))) (\(dat :: * -> *) -> dat a)) a) -> rec (f z x) xs'))) {a} {(\(a :: *) -> ifix (\(rec :: ((* -> *) -> *) -> *) -> \(spine :: (* -> *) -> *) -> spine ((\(list :: * -> *) -> \(a :: *) -> all (r :: *). r -> (a -> list a -> r) -> r) (\(a :: *) -> rec (\(dat :: * -> *) -> dat a)))) (\(dat :: * -> *) -> dat a)) a} (\(r : (\(a :: *) -> ifix (\(rec :: ((* -> *) -> *) -> *) -> \(spine :: (* -> *) -> *) -> spine ((\(list :: * -> *) -> \(a :: *) -> all (r :: *). r -> (a -> list a -> r) -> r) (\(a :: *) -> rec (\(dat :: * -> *) -> dat a)))) (\(dat :: * -> *) -> dat a)) a) -> \(x : a) -> (/\(a :: *) -> \(x : a) -> \(xs : (\(a :: *) -> ifix (\(rec :: ((* -> *) -> *) -> *) -> \(spine :: (* -> *) -> *) -> spine ((\(list :: * -> *) -> \(a :: *) -> all (r :: *). r -> (a -> list a -> r) -> r) (\(a :: *) -> rec (\(dat :: * -> *) -> dat a)))) (\(dat :: * -> *) -> dat a)) a) -> iwrap (\(rec :: ((* -> *) -> *) -> *) -> \(spine :: (* -> *) -> *) -> spine ((\(list :: * -> *) -> \(a :: *) -> all (r :: *). r -> (a -> list a -> r) -> r) (\(a :: *) -> rec (\(dat :: * -> *) -> dat a)))) (\(dat :: * -> *) -> dat a) (/\(r :: *) -> \(z : r) -> \(f : a -> (\(a :: *) -> ifix (\(rec :: ((* -> *) -> *) -> *) -> \(spine :: (* -> *) -> *) -> spine ((\(list :: * -> *) -> \(a :: *) -> all (r :: *). r -> (a -> list a -> r) -> r) (\(a :: *) -> rec (\(dat :: * -> *) -> dat a)))) (\(dat :: * -> *) -> dat a)) a -> r) -> f x xs)) {a} x r) ((/\(a :: *) -> iwrap (\(rec :: ((* -> *) -> *) -> *) -> \(spine :: (* -> *) -> *) -> spine ((\(list :: * -> *) -> \(a :: *) -> all (r :: *). r -> (a -> list a -> r) -> r) (\(a :: *) -> rec (\(dat :: * -> *) -> dat a)))) (\(dat :: * -> *) -> dat a) (/\(r :: *) -> \(z : r) -> \(f : a -> (\(a :: *) -> ifix (\(rec :: ((* -> *) -> *) -> *) -> \(spine :: (* -> *) -> *) -> spine ((\(list :: * -> *) -> \(a :: *) -> all (r :: *). r -> (a -> list a -> r) -> r) (\(a :: *) -> rec (\(dat :: * -> *) -> dat a)))) (\(dat :: * -> *) -> dat a)) a -> r) -> z)) {a}) xs
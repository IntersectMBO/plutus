(letrec
    ~go : list data -> integer -> integer
      = (let
            r = integer -> integer
          in
          \(z : r) (f : data -> list data -> r) (xs : list data) ->
            chooseList
              {data}
              {all dead. r}
              xs
              (/\dead -> z)
              (/\dead -> f (headList {data} xs) (tailList {data} xs))
              {r})
          (\(x : integer) -> x)
          (\(ds : data) (t : list data) (eta : integer) ->
             addInteger 1 (go t eta))
  in
  let
    data GovernanceActionId | GovernanceActionId_match where
      GovernanceActionId : bytestring -> integer -> GovernanceActionId
    data Bool | Bool_match where
      True : Bool
      False : Bool
    data Unit | Unit_match where
      Unit : Unit
    !traceError : all a. string -> a
      = /\a ->
          \(str : string) -> let !x : Unit = trace {Unit} str Unit in error {a}
    !`$fUnsafeFromDataGovernanceAction_$cunsafeFromBuiltinData` :
       data -> GovernanceActionId
      = \(d : data) ->
          let
            !tup : pair integer (list data) = unConstrData d
            !index : integer = fstPair {integer} {list data} tup
            !args : list data = sndPair {integer} {list data} tup
          in
          Bool_match
            (ifThenElse {Bool} (equalsInteger 0 index) True False)
            {all dead. GovernanceActionId}
            (/\dead ->
               GovernanceActionId
                 (unBData (headList {data} args))
                 (unIData (headList {data} (tailList {data} args))))
            (/\dead -> traceError {GovernanceActionId} "PT1")
            {all dead. dead}
    data (Tuple2 :: * -> * -> *) a b | Tuple2_match where
      Tuple2 : a -> b -> Tuple2 a b
    data Credential | Credential_match where
      PubKeyCredential : bytestring -> Credential
      ScriptCredential : bytestring -> Credential
    !`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData` : data -> Credential
      = \(d : data) ->
          let
            !tup : pair integer (list data) = unConstrData d
            !index : integer = fstPair {integer} {list data} tup
            !args : list data = sndPair {integer} {list data} tup
          in
          Bool_match
            (ifThenElse {Bool} (equalsInteger 0 index) True False)
            {all dead. Credential}
            (/\dead -> PubKeyCredential (unBData (headList {data} args)))
            (/\dead ->
               Bool_match
                 (ifThenElse {Bool} (equalsInteger 1 index) True False)
                 {all dead. Credential}
                 (/\dead -> ScriptCredential (unBData (headList {data} args)))
                 (/\dead -> traceError {Credential} "PT1")
                 {all dead. dead})
            {all dead. dead}
    data DRep | DRep_match where
      DRep : Credential -> DRep
      DRepAlwaysAbstain : DRep
      DRepAlwaysNoConfidence : DRep
    !`$fUnsafeFromDataDRep_$cunsafeFromBuiltinData` : data -> DRep
      = \(d : data) ->
          let
            !tup : pair integer (list data) = unConstrData d
            !index : integer = fstPair {integer} {list data} tup
            !args : list data = sndPair {integer} {list data} tup
          in
          Bool_match
            (ifThenElse {Bool} (equalsInteger 0 index) True False)
            {all dead. DRep}
            (/\dead ->
               DRep
                 (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                    (headList {data} args)))
            (/\dead ->
               Bool_match
                 (ifThenElse {Bool} (equalsInteger 1 index) True False)
                 {all dead. DRep}
                 (/\dead -> DRepAlwaysAbstain)
                 (/\dead ->
                    Bool_match
                      (ifThenElse {Bool} (equalsInteger 2 index) True False)
                      {all dead. DRep}
                      (/\dead -> DRepAlwaysNoConfidence)
                      (/\dead -> traceError {DRep} "PT1")
                      {all dead. dead})
                 {all dead. dead})
            {all dead. dead}
    data Delegatee | Delegatee_match where
      DelegStake : bytestring -> Delegatee
      DelegStakeVote : bytestring -> DRep -> Delegatee
      DelegVote : DRep -> Delegatee
    !`$fUnsafeFromDataDelegatee_$cunsafeFromBuiltinData` : data -> Delegatee
      = \(d : data) ->
          let
            !tup : pair integer (list data) = unConstrData d
            !index : integer = fstPair {integer} {list data} tup
            !args : list data = sndPair {integer} {list data} tup
          in
          Bool_match
            (ifThenElse {Bool} (equalsInteger 0 index) True False)
            {all dead. Delegatee}
            (/\dead -> DelegStake (unBData (headList {data} args)))
            (/\dead ->
               Bool_match
                 (ifThenElse {Bool} (equalsInteger 1 index) True False)
                 {all dead. Delegatee}
                 (/\dead ->
                    DelegVote
                      (`$fUnsafeFromDataDRep_$cunsafeFromBuiltinData`
                         (headList {data} args)))
                 (/\dead ->
                    Bool_match
                      (ifThenElse {Bool} (equalsInteger 2 index) True False)
                      {all dead. Delegatee}
                      (/\dead ->
                         DelegStakeVote
                           (unBData (headList {data} args))
                           (`$fUnsafeFromDataDRep_$cunsafeFromBuiltinData`
                              (headList {data} (tailList {data} args))))
                      (/\dead -> traceError {Delegatee} "PT1")
                      {all dead. dead})
                 {all dead. dead})
            {all dead. dead}
    !`$fUnsafeFromDataBool_$cunsafeFromBuiltinData` : data -> Bool
      = \(d : data) ->
          let
            !tup : pair integer (list data) = unConstrData d
            !index : integer = fstPair {integer} {list data} tup
            !args : list data = sndPair {integer} {list data} tup
          in
          Bool_match
            (ifThenElse {Bool} (equalsInteger 0 index) True False)
            {all dead. Bool}
            (/\dead -> False)
            (/\dead ->
               Bool_match
                 (ifThenElse {Bool} (equalsInteger 1 index) True False)
                 {all dead. Bool}
                 (/\dead -> True)
                 (/\dead -> traceError {Bool} "PT1")
                 {all dead. dead})
            {all dead. dead}
    data (Extended :: * -> *) a | Extended_match where
      Finite : a -> Extended a
      NegInf : Extended a
      PosInf : Extended a
    !`$fUnsafeFromDataExtended_$cunsafeFromBuiltinData` :
       all a. (\a -> data -> a) a -> data -> Extended a
      = /\a ->
          \(`$dUnsafeFromData` : (\a -> data -> a) a) (d : data) ->
            let
              !tup : pair integer (list data) = unConstrData d
              !index : integer = fstPair {integer} {list data} tup
              !args : list data = sndPair {integer} {list data} tup
            in
            Bool_match
              (ifThenElse {Bool} (equalsInteger 0 index) True False)
              {all dead. Extended a}
              (/\dead -> NegInf {a})
              (/\dead ->
                 Bool_match
                   (ifThenElse {Bool} (equalsInteger 1 index) True False)
                   {all dead. Extended a}
                   (/\dead ->
                      Finite {a} (`$dUnsafeFromData` (headList {data} args)))
                   (/\dead ->
                      Bool_match
                        (ifThenElse {Bool} (equalsInteger 2 index) True False)
                        {all dead. Extended a}
                        (/\dead -> PosInf {a})
                        (/\dead -> traceError {Extended a} "PT1")
                        {all dead. dead})
                   {all dead. dead})
              {all dead. dead}
    data (Maybe :: * -> *) a | Maybe_match where
      Just : a -> Maybe a
      Nothing : Maybe a
    !`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData` :
       all a. (\a -> data -> a) a -> data -> Maybe a
      = /\a ->
          \(`$dUnsafeFromData` : (\a -> data -> a) a) (d : data) ->
            let
              !tup : pair integer (list data) = unConstrData d
              !index : integer = fstPair {integer} {list data} tup
              !args : list data = sndPair {integer} {list data} tup
            in
            Bool_match
              (ifThenElse {Bool} (equalsInteger 1 index) True False)
              {all dead. Maybe a}
              (/\dead -> Nothing {a})
              (/\dead ->
                 Bool_match
                   (ifThenElse {Bool} (equalsInteger 0 index) True False)
                   {all dead. Maybe a}
                   (/\dead ->
                      Just {a} (`$dUnsafeFromData` (headList {data} args)))
                   (/\dead -> traceError {Maybe a} "PT1")
                   {all dead. dead})
              {all dead. dead}
    data ProtocolVersion | ProtocolVersion_match where
      ProtocolVersion : integer -> integer -> ProtocolVersion
    data Rational | Rational_match where
      Rational : integer -> integer -> Rational
    data GovernanceAction | GovernanceAction_match where
      HardForkInitiation :
        Maybe GovernanceActionId -> ProtocolVersion -> GovernanceAction
      InfoAction : GovernanceAction
      NewConstitution :
        Maybe GovernanceActionId -> Maybe bytestring -> GovernanceAction
      NoConfidence : Maybe GovernanceActionId -> GovernanceAction
      ParameterChange :
        Maybe GovernanceActionId -> data -> Maybe bytestring -> GovernanceAction
      TreasuryWithdrawals :
        (\k a -> list (pair data data)) Credential integer ->
        Maybe bytestring ->
        GovernanceAction
      UpdateCommittee :
        Maybe GovernanceActionId ->
        (\a -> list data) Credential ->
        (\k a -> list (pair data data)) Credential integer ->
        Rational ->
        GovernanceAction
    data ProposalProcedure | ProposalProcedure_match where
      ProposalProcedure :
        integer -> Credential -> GovernanceAction -> ProposalProcedure
    data TxCert | TxCert_match where
      TxCertAuthHotCommittee : Credential -> Credential -> TxCert
      TxCertDelegStaking : Credential -> Delegatee -> TxCert
      TxCertPoolRegister : bytestring -> bytestring -> TxCert
      TxCertPoolRetire : bytestring -> integer -> TxCert
      TxCertRegDRep : Credential -> integer -> TxCert
      TxCertRegDeleg : Credential -> Delegatee -> integer -> TxCert
      TxCertRegStaking : Credential -> Maybe integer -> TxCert
      TxCertResignColdCommittee : Credential -> TxCert
      TxCertUnRegDRep : Credential -> integer -> TxCert
      TxCertUnRegStaking : Credential -> Maybe integer -> TxCert
      TxCertUpdateDRep : Credential -> TxCert
    data TxOutRef | TxOutRef_match where
      TxOutRef : bytestring -> integer -> TxOutRef
    data Voter | Voter_match where
      CommitteeVoter : Credential -> Voter
      DRepVoter : Credential -> Voter
      StakePoolVoter : bytestring -> Voter
    data ScriptInfo | ScriptInfo_match where
      CertifyingScript : integer -> TxCert -> ScriptInfo
      MintingScript : bytestring -> ScriptInfo
      ProposingScript : integer -> ProposalProcedure -> ScriptInfo
      RewardingScript : Credential -> ScriptInfo
      SpendingScript : TxOutRef -> Maybe data -> ScriptInfo
      VotingScript : Voter -> ScriptInfo
    data (LowerBound :: * -> *) a | LowerBound_match where
      LowerBound : Extended a -> Bool -> LowerBound a
    data (UpperBound :: * -> *) a | UpperBound_match where
      UpperBound : Extended a -> Bool -> UpperBound a
    data (Interval :: * -> *) a | Interval_match where
      Interval : LowerBound a -> UpperBound a -> Interval a
  in
  letrec
    !euclid : integer -> integer -> integer
      = \(x : integer) (y : integer) ->
          Bool_match
            (ifThenElse {Bool} (equalsInteger 0 y) True False)
            {all dead. integer}
            (/\dead -> x)
            (/\dead -> euclid y (modInteger x y))
            {all dead. dead}
  in
  letrec
    !unsafeRatio : integer -> integer -> Rational
      = \(n : integer) (d : integer) ->
          Bool_match
            (ifThenElse {Bool} (equalsInteger 0 d) True False)
            {all dead. Rational}
            (/\dead -> traceError {Rational} "PT3")
            (/\dead ->
               Bool_match
                 (ifThenElse {Bool} (lessThanInteger d 0) True False)
                 {all dead. Rational}
                 (/\dead ->
                    unsafeRatio (subtractInteger 0 n) (subtractInteger 0 d))
                 (/\dead ->
                    let
                      !gcd' : integer = euclid n d
                    in
                    Rational (quotientInteger n gcd') (quotientInteger d gcd'))
                 {all dead. dead})
            {all dead. dead}
  in
  let
    Vote = all a. a -> a
    TxOut = all a. a -> a
    TxInInfo = all a. a -> a
    ScriptPurpose = all a. a -> a
    data TxInfo | TxInfo_match where
      TxInfo :
        (\a -> list data) TxInInfo ->
        (\a -> list data) TxInInfo ->
        (\a -> list data) TxOut ->
        integer ->
        (\k a -> list (pair data data))
          bytestring
          ((\k a -> list (pair data data)) bytestring integer) ->
        (\a -> list data) TxCert ->
        (\k a -> list (pair data data)) Credential integer ->
        Interval integer ->
        (\a -> list data) bytestring ->
        (\k a -> list (pair data data)) ScriptPurpose data ->
        (\k a -> list (pair data data)) bytestring data ->
        bytestring ->
        (\k a -> list (pair data data))
          Voter
          ((\k a -> list (pair data data)) GovernanceActionId Vote) ->
        (\a -> list data) ProposalProcedure ->
        Maybe integer ->
        Maybe integer ->
        TxInfo
    data ScriptContext | ScriptContext_match where
      ScriptContext : TxInfo -> data -> ScriptInfo -> ScriptContext
  in
  \(d : data) ->
    ScriptContext_match
      (let
        !tup : pair integer (list data) = unConstrData d
        !index : integer = fstPair {integer} {list data} tup
        !args : list data = sndPair {integer} {list data} tup
      in
      Bool_match
        (ifThenElse {Bool} (equalsInteger 0 index) True False)
        {all dead. ScriptContext}
        (/\dead ->
           let
             !l : list data = tailList {data} args
           in
           ScriptContext
             (let
               !tup : pair integer (list data)
                 = unConstrData (headList {data} args)
               !index : integer = fstPair {integer} {list data} tup
               !args : list data = sndPair {integer} {list data} tup
             in
             Bool_match
               (ifThenElse {Bool} (equalsInteger 0 index) True False)
               {all dead. TxInfo}
               (/\dead ->
                  let
                    !l : list data = tailList {data} args
                    !l : list data = tailList {data} l
                    !l : list data = tailList {data} l
                    !l : list data = tailList {data} l
                    !l : list data = tailList {data} l
                    !l : list data = tailList {data} l
                    !l : list data = tailList {data} l
                    !l : list data = tailList {data} l
                    !l : list data = tailList {data} l
                    !l : list data = tailList {data} l
                    !l : list data = tailList {data} l
                    !l : list data = tailList {data} l
                    !l : list data = tailList {data} l
                    !l : list data = tailList {data} l
                  in
                  TxInfo
                    (unListData (headList {data} args))
                    (unListData (headList {data} l))
                    (unListData (headList {data} l))
                    (unIData (headList {data} l))
                    (unMapData (headList {data} l))
                    (unListData (headList {data} l))
                    (unMapData (headList {data} l))
                    (let
                      !tup : pair integer (list data)
                        = unConstrData (headList {data} l)
                      !index : integer = fstPair {integer} {list data} tup
                      !args : list data = sndPair {integer} {list data} tup
                    in
                    Bool_match
                      (ifThenElse {Bool} (equalsInteger 0 index) True False)
                      {all dead. Interval integer}
                      (/\dead ->
                         Interval
                           {integer}
                           (let
                             !tup : pair integer (list data)
                               = unConstrData (headList {data} args)
                             !index : integer
                               = fstPair {integer} {list data} tup
                             !args : list data
                               = sndPair {integer} {list data} tup
                           in
                           Bool_match
                             (ifThenElse
                                {Bool}
                                (equalsInteger 0 index)
                                True
                                False)
                             {all dead. LowerBound integer}
                             (/\dead ->
                                LowerBound
                                  {integer}
                                  (`$fUnsafeFromDataExtended_$cunsafeFromBuiltinData`
                                     {integer}
                                     unIData
                                     (headList {data} args))
                                  (`$fUnsafeFromDataBool_$cunsafeFromBuiltinData`
                                     (headList {data} (tailList {data} args))))
                             (/\dead -> traceError {LowerBound integer} "PT1")
                             {all dead. dead})
                           (let
                             !tup : pair integer (list data)
                               = unConstrData
                                   (headList {data} (tailList {data} args))
                             !index : integer
                               = fstPair {integer} {list data} tup
                             !args : list data
                               = sndPair {integer} {list data} tup
                           in
                           Bool_match
                             (ifThenElse
                                {Bool}
                                (equalsInteger 0 index)
                                True
                                False)
                             {all dead. UpperBound integer}
                             (/\dead ->
                                UpperBound
                                  {integer}
                                  (`$fUnsafeFromDataExtended_$cunsafeFromBuiltinData`
                                     {integer}
                                     unIData
                                     (headList {data} args))
                                  (`$fUnsafeFromDataBool_$cunsafeFromBuiltinData`
                                     (headList {data} (tailList {data} args))))
                             (/\dead -> traceError {UpperBound integer} "PT1")
                             {all dead. dead}))
                      (/\dead -> traceError {Interval integer} "PT1")
                      {all dead. dead})
                    (unListData (headList {data} l))
                    (unMapData (headList {data} l))
                    (unMapData (headList {data} l))
                    (unBData (headList {data} l))
                    (unMapData (headList {data} l))
                    (unListData (headList {data} l))
                    (`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                       {integer}
                       unIData
                       (headList {data} l))
                    (`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                       {integer}
                       unIData
                       (headList {data} (tailList {data} l))))
               (/\dead -> traceError {TxInfo} "PT1")
               {all dead. dead})
             (headList {data} l)
             (let
               !tup : pair integer (list data)
                 = unConstrData (headList {data} (tailList {data} l))
               !index : integer = fstPair {integer} {list data} tup
               !args : list data = sndPair {integer} {list data} tup
             in
             Bool_match
               (ifThenElse {Bool} (equalsInteger 0 index) True False)
               {all dead. ScriptInfo}
               (/\dead -> MintingScript (unBData (headList {data} args)))
               (/\dead ->
                  Bool_match
                    (ifThenElse {Bool} (equalsInteger 1 index) True False)
                    {all dead. ScriptInfo}
                    (/\dead ->
                       SpendingScript
                         (let
                           !tup : pair integer (list data)
                             = unConstrData (headList {data} args)
                           !index : integer = fstPair {integer} {list data} tup
                           !args : list data = sndPair {integer} {list data} tup
                         in
                         Bool_match
                           (ifThenElse
                              {Bool}
                              (equalsInteger 0 index)
                              True
                              False)
                           {all dead. TxOutRef}
                           (/\dead ->
                              TxOutRef
                                (unBData (headList {data} args))
                                (unIData
                                   (headList {data} (tailList {data} args))))
                           (/\dead -> traceError {TxOutRef} "PT1")
                           {all dead. dead})
                         (`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                            {data}
                            (\(d : data) -> d)
                            (headList {data} (tailList {data} args))))
                    (/\dead ->
                       Bool_match
                         (ifThenElse {Bool} (equalsInteger 2 index) True False)
                         {all dead. ScriptInfo}
                         (/\dead ->
                            RewardingScript
                              (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                                 (headList {data} args)))
                         (/\dead ->
                            Bool_match
                              (ifThenElse
                                 {Bool}
                                 (equalsInteger 3 index)
                                 True
                                 False)
                              {all dead. ScriptInfo}
                              (/\dead ->
                                 CertifyingScript
                                   (unIData (headList {data} args))
                                   (let
                                     !tup : pair integer (list data)
                                       = unConstrData
                                           (headList
                                              {data}
                                              (tailList {data} args))
                                     !index : integer
                                       = fstPair {integer} {list data} tup
                                     !args : list data
                                       = sndPair {integer} {list data} tup
                                   in
                                   Bool_match
                                     (ifThenElse
                                        {Bool}
                                        (equalsInteger 0 index)
                                        True
                                        False)
                                     {all dead. TxCert}
                                     (/\dead ->
                                        TxCertRegStaking
                                          (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                                             (headList {data} args))
                                          (`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                                             {integer}
                                             unIData
                                             (headList
                                                {data}
                                                (tailList {data} args))))
                                     (/\dead ->
                                        Bool_match
                                          (ifThenElse
                                             {Bool}
                                             (equalsInteger 1 index)
                                             True
                                             False)
                                          {all dead. TxCert}
                                          (/\dead ->
                                             TxCertUnRegStaking
                                               (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                                                  (headList {data} args))
                                               (`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                                                  {integer}
                                                  unIData
                                                  (headList
                                                     {data}
                                                     (tailList {data} args))))
                                          (/\dead ->
                                             Bool_match
                                               (ifThenElse
                                                  {Bool}
                                                  (equalsInteger 2 index)
                                                  True
                                                  False)
                                               {all dead. TxCert}
                                               (/\dead ->
                                                  TxCertDelegStaking
                                                    (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                                                       (headList {data} args))
                                                    (`$fUnsafeFromDataDelegatee_$cunsafeFromBuiltinData`
                                                       (headList
                                                          {data}
                                                          (tailList
                                                             {data}
                                                             args))))
                                               (/\dead ->
                                                  Bool_match
                                                    (ifThenElse
                                                       {Bool}
                                                       (equalsInteger 3 index)
                                                       True
                                                       False)
                                                    {all dead. TxCert}
                                                    (/\dead ->
                                                       let
                                                         !l : list data
                                                           = tailList
                                                               {data}
                                                               args
                                                       in
                                                       TxCertRegDeleg
                                                         (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                                                            (headList
                                                               {data}
                                                               args))
                                                         (`$fUnsafeFromDataDelegatee_$cunsafeFromBuiltinData`
                                                            (headList {data} l))
                                                         (unIData
                                                            (headList
                                                               {data}
                                                               (tailList
                                                                  {data}
                                                                  l))))
                                                    (/\dead ->
                                                       Bool_match
                                                         (ifThenElse
                                                            {Bool}
                                                            (equalsInteger
                                                               4
                                                               index)
                                                            True
                                                            False)
                                                         {all dead. TxCert}
                                                         (/\dead ->
                                                            TxCertRegDRep
                                                              (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                                                                 (headList
                                                                    {data}
                                                                    args))
                                                              (unIData
                                                                 (headList
                                                                    {data}
                                                                    (tailList
                                                                       {data}
                                                                       args))))
                                                         (/\dead ->
                                                            Bool_match
                                                              (ifThenElse
                                                                 {Bool}
                                                                 (equalsInteger
                                                                    5
                                                                    index)
                                                                 True
                                                                 False)
                                                              {all dead. TxCert}
                                                              (/\dead ->
                                                                 TxCertUpdateDRep
                                                                   (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                                                                      (headList
                                                                         {data}
                                                                         args)))
                                                              (/\dead ->
                                                                 Bool_match
                                                                   (ifThenElse
                                                                      {Bool}
                                                                      (equalsInteger
                                                                         6
                                                                         index)
                                                                      True
                                                                      False)
                                                                   {all dead.
                                                                      TxCert}
                                                                   (/\dead ->
                                                                      TxCertUnRegDRep
                                                                        (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                                                                           (headList
                                                                              {data}
                                                                              args))
                                                                        (unIData
                                                                           (headList
                                                                              {data}
                                                                              (tailList
                                                                                 {data}
                                                                                 args))))
                                                                   (/\dead ->
                                                                      Bool_match
                                                                        (ifThenElse
                                                                           {Bool}
                                                                           (equalsInteger
                                                                              7
                                                                              index)
                                                                           True
                                                                           False)
                                                                        {all dead.
                                                                           TxCert}
                                                                        (/\dead ->
                                                                           TxCertPoolRegister
                                                                             (unBData
                                                                                (headList
                                                                                   {data}
                                                                                   args))
                                                                             (unBData
                                                                                (headList
                                                                                   {data}
                                                                                   (tailList
                                                                                      {data}
                                                                                      args))))
                                                                        (/\dead ->
                                                                           Bool_match
                                                                             (ifThenElse
                                                                                {Bool}
                                                                                (equalsInteger
                                                                                   8
                                                                                   index)
                                                                                True
                                                                                False)
                                                                             {all dead.
                                                                                TxCert}
                                                                             (/\dead ->
                                                                                TxCertPoolRetire
                                                                                  (unBData
                                                                                     (headList
                                                                                        {data}
                                                                                        args))
                                                                                  (unIData
                                                                                     (headList
                                                                                        {data}
                                                                                        (tailList
                                                                                           {data}
                                                                                           args))))
                                                                             (/\dead ->
                                                                                Bool_match
                                                                                  (ifThenElse
                                                                                     {Bool}
                                                                                     (equalsInteger
                                                                                        9
                                                                                        index)
                                                                                     True
                                                                                     False)
                                                                                  {all dead.
                                                                                     TxCert}
                                                                                  (/\dead ->
                                                                                     TxCertAuthHotCommittee
                                                                                       (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                                                                                          (headList
                                                                                             {data}
                                                                                             args))
                                                                                       (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                                                                                          (headList
                                                                                             {data}
                                                                                             (tailList
                                                                                                {data}
                                                                                                args))))
                                                                                  (/\dead ->
                                                                                     Bool_match
                                                                                       (ifThenElse
                                                                                          {Bool}
                                                                                          (equalsInteger
                                                                                             10
                                                                                             index)
                                                                                          True
                                                                                          False)
                                                                                       {all dead.
                                                                                          TxCert}
                                                                                       (/\dead ->
                                                                                          TxCertResignColdCommittee
                                                                                            (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                                                                                               (headList
                                                                                                  {data}
                                                                                                  args)))
                                                                                       (/\dead ->
                                                                                          traceError
                                                                                            {TxCert}
                                                                                            "PT1")
                                                                                       {all dead.
                                                                                          dead})
                                                                                  {all dead.
                                                                                     dead})
                                                                             {all dead.
                                                                                dead})
                                                                        {all dead.
                                                                           dead})
                                                                   {all dead.
                                                                      dead})
                                                              {all dead. dead})
                                                         {all dead. dead})
                                                    {all dead. dead})
                                               {all dead. dead})
                                          {all dead. dead})
                                     {all dead. dead}))
                              (/\dead ->
                                 Bool_match
                                   (ifThenElse
                                      {Bool}
                                      (equalsInteger 4 index)
                                      True
                                      False)
                                   {all dead. ScriptInfo}
                                   (/\dead ->
                                      VotingScript
                                        (let
                                          !tup : pair integer (list data)
                                            = unConstrData
                                                (headList {data} args)
                                          !index : integer
                                            = fstPair {integer} {list data} tup
                                          !args : list data
                                            = sndPair {integer} {list data} tup
                                        in
                                        Bool_match
                                          (ifThenElse
                                             {Bool}
                                             (equalsInteger 0 index)
                                             True
                                             False)
                                          {all dead. Voter}
                                          (/\dead ->
                                             CommitteeVoter
                                               (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                                                  (headList {data} args)))
                                          (/\dead ->
                                             Bool_match
                                               (ifThenElse
                                                  {Bool}
                                                  (equalsInteger 1 index)
                                                  True
                                                  False)
                                               {all dead. Voter}
                                               (/\dead ->
                                                  DRepVoter
                                                    (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                                                       (headList {data} args)))
                                               (/\dead ->
                                                  Bool_match
                                                    (ifThenElse
                                                       {Bool}
                                                       (equalsInteger 2 index)
                                                       True
                                                       False)
                                                    {all dead. Voter}
                                                    (/\dead ->
                                                       StakePoolVoter
                                                         (unBData
                                                            (headList
                                                               {data}
                                                               args)))
                                                    (/\dead ->
                                                       traceError {Voter} "PT1")
                                                    {all dead. dead})
                                               {all dead. dead})
                                          {all dead. dead}))
                                   (/\dead ->
                                      Bool_match
                                        (ifThenElse
                                           {Bool}
                                           (equalsInteger 5 index)
                                           True
                                           False)
                                        {all dead. ScriptInfo}
                                        (/\dead ->
                                           ProposingScript
                                             (unIData (headList {data} args))
                                             (let
                                               !tup : pair integer (list data)
                                                 = unConstrData
                                                     (headList
                                                        {data}
                                                        (tailList {data} args))
                                               !index : integer
                                                 = fstPair
                                                     {integer}
                                                     {list data}
                                                     tup
                                               !args : list data
                                                 = sndPair
                                                     {integer}
                                                     {list data}
                                                     tup
                                             in
                                             Bool_match
                                               (ifThenElse
                                                  {Bool}
                                                  (equalsInteger 0 index)
                                                  True
                                                  False)
                                               {all dead. ProposalProcedure}
                                               (/\dead ->
                                                  let
                                                    !l : list data
                                                      = tailList {data} args
                                                  in
                                                  ProposalProcedure
                                                    (unIData
                                                       (headList {data} args))
                                                    (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                                                       (headList {data} l))
                                                    (let
                                                      !tup :
                                                         pair
                                                           integer
                                                           (list data)
                                                        = unConstrData
                                                            (headList
                                                               {data}
                                                               (tailList
                                                                  {data}
                                                                  l))
                                                      !index : integer
                                                        = fstPair
                                                            {integer}
                                                            {list data}
                                                            tup
                                                      !args : list data
                                                        = sndPair
                                                            {integer}
                                                            {list data}
                                                            tup
                                                    in
                                                    Bool_match
                                                      (ifThenElse
                                                         {Bool}
                                                         (equalsInteger 0 index)
                                                         True
                                                         False)
                                                      {all dead.
                                                         GovernanceAction}
                                                      (/\dead ->
                                                         let
                                                           !l : list data
                                                             = tailList
                                                                 {data}
                                                                 args
                                                         in
                                                         ParameterChange
                                                           (`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                                                              {GovernanceActionId}
                                                              `$fUnsafeFromDataGovernanceAction_$cunsafeFromBuiltinData`
                                                              (headList
                                                                 {data}
                                                                 args))
                                                           (headList {data} l)
                                                           (`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                                                              {bytestring}
                                                              unBData
                                                              (headList
                                                                 {data}
                                                                 (tailList
                                                                    {data}
                                                                    l))))
                                                      (/\dead ->
                                                         Bool_match
                                                           (ifThenElse
                                                              {Bool}
                                                              (equalsInteger
                                                                 1
                                                                 index)
                                                              True
                                                              False)
                                                           {all dead.
                                                              GovernanceAction}
                                                           (/\dead ->
                                                              HardForkInitiation
                                                                (`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                                                                   {GovernanceActionId}
                                                                   `$fUnsafeFromDataGovernanceAction_$cunsafeFromBuiltinData`
                                                                   (headList
                                                                      {data}
                                                                      args))
                                                                (let
                                                                  !tup :
                                                                     pair
                                                                       integer
                                                                       (list
                                                                          data)
                                                                    = unConstrData
                                                                        (headList
                                                                           {data}
                                                                           (tailList
                                                                              {data}
                                                                              args))
                                                                  !index :
                                                                     integer
                                                                    = fstPair
                                                                        {integer}
                                                                        {list
                                                                           data}
                                                                        tup
                                                                  !args :
                                                                     list data
                                                                    = sndPair
                                                                        {integer}
                                                                        {list
                                                                           data}
                                                                        tup
                                                                in
                                                                Bool_match
                                                                  (ifThenElse
                                                                     {Bool}
                                                                     (equalsInteger
                                                                        0
                                                                        index)
                                                                     True
                                                                     False)
                                                                  {all dead.
                                                                     ProtocolVersion}
                                                                  (/\dead ->
                                                                     ProtocolVersion
                                                                       (unIData
                                                                          (headList
                                                                             {data}
                                                                             args))
                                                                       (unIData
                                                                          (headList
                                                                             {data}
                                                                             (tailList
                                                                                {data}
                                                                                args))))
                                                                  (/\dead ->
                                                                     traceError
                                                                       {ProtocolVersion}
                                                                       "PT1")
                                                                  {all dead.
                                                                     dead}))
                                                           (/\dead ->
                                                              Bool_match
                                                                (ifThenElse
                                                                   {Bool}
                                                                   (equalsInteger
                                                                      2
                                                                      index)
                                                                   True
                                                                   False)
                                                                {all dead.
                                                                   GovernanceAction}
                                                                (/\dead ->
                                                                   TreasuryWithdrawals
                                                                     (unMapData
                                                                        (headList
                                                                           {data}
                                                                           args))
                                                                     (`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                                                                        {bytestring}
                                                                        unBData
                                                                        (headList
                                                                           {data}
                                                                           (tailList
                                                                              {data}
                                                                              args))))
                                                                (/\dead ->
                                                                   Bool_match
                                                                     (ifThenElse
                                                                        {Bool}
                                                                        (equalsInteger
                                                                           3
                                                                           index)
                                                                        True
                                                                        False)
                                                                     {all dead.
                                                                        GovernanceAction}
                                                                     (/\dead ->
                                                                        NoConfidence
                                                                          (`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                                                                             {GovernanceActionId}
                                                                             `$fUnsafeFromDataGovernanceAction_$cunsafeFromBuiltinData`
                                                                             (headList
                                                                                {data}
                                                                                args)))
                                                                     (/\dead ->
                                                                        Bool_match
                                                                          (ifThenElse
                                                                             {Bool}
                                                                             (equalsInteger
                                                                                4
                                                                                index)
                                                                             True
                                                                             False)
                                                                          {all dead.
                                                                             GovernanceAction}
                                                                          (/\dead ->
                                                                             let
                                                                               !l :
                                                                                  list
                                                                                    data
                                                                                 = tailList
                                                                                     {data}
                                                                                     args
                                                                               !l :
                                                                                  list
                                                                                    data
                                                                                 = tailList
                                                                                     {data}
                                                                                     l
                                                                             in
                                                                             UpdateCommittee
                                                                               (`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                                                                                  {GovernanceActionId}
                                                                                  `$fUnsafeFromDataGovernanceAction_$cunsafeFromBuiltinData`
                                                                                  (headList
                                                                                     {data}
                                                                                     args))
                                                                               (unListData
                                                                                  (headList
                                                                                     {data}
                                                                                     l))
                                                                               (unMapData
                                                                                  (headList
                                                                                     {data}
                                                                                     l))
                                                                               (let
                                                                                 !x :
                                                                                    data
                                                                                   = headList
                                                                                       {data}
                                                                                       (tailList
                                                                                          {data}
                                                                                          l)
                                                                               in
                                                                               Tuple2_match
                                                                                 {integer}
                                                                                 {integer}
                                                                                 (let
                                                                                   !tup :
                                                                                      pair
                                                                                        integer
                                                                                        (list
                                                                                           data)
                                                                                     = unConstrData
                                                                                         x
                                                                                   !index :
                                                                                      integer
                                                                                     = fstPair
                                                                                         {integer}
                                                                                         {list
                                                                                            data}
                                                                                         tup
                                                                                   !args :
                                                                                      list
                                                                                        data
                                                                                     = sndPair
                                                                                         {integer}
                                                                                         {list
                                                                                            data}
                                                                                         tup
                                                                                 in
                                                                                 Bool_match
                                                                                   (ifThenElse
                                                                                      {Bool}
                                                                                      (equalsInteger
                                                                                         0
                                                                                         index)
                                                                                      True
                                                                                      False)
                                                                                   {all dead.
                                                                                      Tuple2
                                                                                        integer
                                                                                        integer}
                                                                                   (/\dead ->
                                                                                      Tuple2
                                                                                        {integer}
                                                                                        {integer}
                                                                                        (unIData
                                                                                           (headList
                                                                                              {data}
                                                                                              args))
                                                                                        (unIData
                                                                                           (headList
                                                                                              {data}
                                                                                              (tailList
                                                                                                 {data}
                                                                                                 args))))
                                                                                   (/\dead ->
                                                                                      traceError
                                                                                        {Tuple2
                                                                                           integer
                                                                                           integer}
                                                                                        "PT1")
                                                                                   {all dead.
                                                                                      dead})
                                                                                 {Rational}
                                                                                 (\(a :
                                                                                      integer)
                                                                                   (b :
                                                                                      integer) ->
                                                                                    unsafeRatio
                                                                                      a
                                                                                      b)))
                                                                          (/\dead ->
                                                                             Bool_match
                                                                               (ifThenElse
                                                                                  {Bool}
                                                                                  (equalsInteger
                                                                                     5
                                                                                     index)
                                                                                  True
                                                                                  False)
                                                                               {all dead.
                                                                                  GovernanceAction}
                                                                               (/\dead ->
                                                                                  NewConstitution
                                                                                    (`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                                                                                       {GovernanceActionId}
                                                                                       `$fUnsafeFromDataGovernanceAction_$cunsafeFromBuiltinData`
                                                                                       (headList
                                                                                          {data}
                                                                                          args))
                                                                                    (let
                                                                                      !tup :
                                                                                         pair
                                                                                           integer
                                                                                           (list
                                                                                              data)
                                                                                        = unConstrData
                                                                                            (headList
                                                                                               {data}
                                                                                               (tailList
                                                                                                  {data}
                                                                                                  args))
                                                                                      !index :
                                                                                         integer
                                                                                        = fstPair
                                                                                            {integer}
                                                                                            {list
                                                                                               data}
                                                                                            tup
                                                                                      !args :
                                                                                         list
                                                                                           data
                                                                                        = sndPair
                                                                                            {integer}
                                                                                            {list
                                                                                               data}
                                                                                            tup
                                                                                    in
                                                                                    Bool_match
                                                                                      (ifThenElse
                                                                                         {Bool}
                                                                                         (equalsInteger
                                                                                            0
                                                                                            index)
                                                                                         True
                                                                                         False)
                                                                                      {all dead.
                                                                                         Maybe
                                                                                           bytestring}
                                                                                      (/\dead ->
                                                                                         `$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                                                                                           {bytestring}
                                                                                           unBData
                                                                                           (headList
                                                                                              {data}
                                                                                              args))
                                                                                      (/\dead ->
                                                                                         traceError
                                                                                           {Maybe
                                                                                              bytestring}
                                                                                           "PT1")
                                                                                      {all dead.
                                                                                         dead}))
                                                                               (/\dead ->
                                                                                  Bool_match
                                                                                    (ifThenElse
                                                                                       {Bool}
                                                                                       (equalsInteger
                                                                                          6
                                                                                          index)
                                                                                       True
                                                                                       False)
                                                                                    {all dead.
                                                                                       GovernanceAction}
                                                                                    (/\dead ->
                                                                                       InfoAction)
                                                                                    (/\dead ->
                                                                                       traceError
                                                                                         {GovernanceAction}
                                                                                         "PT1")
                                                                                    {all dead.
                                                                                       dead})
                                                                               {all dead.
                                                                                  dead})
                                                                          {all dead.
                                                                             dead})
                                                                     {all dead.
                                                                        dead})
                                                                {all dead.
                                                                   dead})
                                                           {all dead. dead})
                                                      {all dead. dead}))
                                               (/\dead ->
                                                  traceError
                                                    {ProposalProcedure}
                                                    "PT1")
                                               {all dead. dead}))
                                        (/\dead ->
                                           traceError {ScriptInfo} "PT1")
                                        {all dead. dead})
                                   {all dead. dead})
                              {all dead. dead})
                         {all dead. dead})
                    {all dead. dead})
               {all dead. dead}))
        (/\dead -> traceError {ScriptContext} "PT1")
        {all dead. dead})
      {Unit}
      (\(ipv : TxInfo) (ipv : data) (ipv : ScriptInfo) ->
         Bool_match
           (ifThenElse
              {Bool}
              (equalsInteger
                 0
                 (modInteger
                    (let
                      !ds : (\a -> list data) TxOut
                        = TxInfo_match
                            ipv
                            {(\a -> list data) TxOut}
                            (\(ds : (\a -> list data) TxInInfo)
                              (ds : (\a -> list data) TxInInfo)
                              (ds : (\a -> list data) TxOut)
                              (ds : integer)
                              (ds :
                                 (\k a -> list (pair data data))
                                   bytestring
                                   ((\k a -> list (pair data data))
                                      bytestring
                                      integer))
                              (ds : (\a -> list data) TxCert)
                              (ds :
                                 (\k a -> list (pair data data))
                                   Credential
                                   integer)
                              (ds : Interval integer)
                              (ds : (\a -> list data) bytestring)
                              (ds :
                                 (\k a -> list (pair data data))
                                   ScriptPurpose
                                   data)
                              (ds :
                                 (\k a -> list (pair data data))
                                   bytestring
                                   data)
                              (ds : bytestring)
                              (ds :
                                 (\k a -> list (pair data data))
                                   Voter
                                   ((\k a -> list (pair data data))
                                      GovernanceActionId
                                      Vote))
                              (ds : (\a -> list data) ProposalProcedure)
                              (ds : Maybe integer)
                              (ds : Maybe integer) ->
                               ds)
                    in
                    go ds 0)
                    2))
              True
              False)
           {all dead. Unit}
           (/\dead -> Unit)
           (/\dead -> error {Unit})
           {all dead. dead}))
  (Constr 0
     [ Constr 0
         [ List []
         , List []
         , List
             [ Constr 0
                 [ Constr 0 [Constr 0 [B #], Constr 1 []]
                 , Map [(B #, Map [(B #, I 1)])]
                 , Constr 0 []
                 , Constr 1 [] ] ]
         , I 10000
         , Map []
         , List []
         , Map []
         , Constr 0
             [ Constr 0 [Constr 0 [], Constr 1 []]
             , Constr 0 [Constr 2 [], Constr 1 []] ]
         , List []
         , Map []
         , Map []
         , B #
         , Map []
         , List []
         , Constr 1 []
         , Constr 1 [] ]
     , I 1
     , Constr 1 [Constr 0 [B #, I 0], Constr 1 []] ])
(letrec
    data (List :: * -> *) a | List_match where
      Nil : List a
      Cons : a -> List a -> List a
  in
  let
    data Credential | Credential_match where
      PubKeyCredential : bytestring -> Credential
      ScriptCredential : bytestring -> Credential
    data StakingCredential | StakingCredential_match where
      StakingHash : Credential -> StakingCredential
      StakingPtr : integer -> integer -> integer -> StakingCredential
    data (Maybe :: * -> *) a | Maybe_match where
      Just : a -> Maybe a
      Nothing : Maybe a
    data Address | Address_match where
      Address : Credential -> Maybe StakingCredential -> Address
    data OutputDatum | OutputDatum_match where
      NoOutputDatum : OutputDatum
      OutputDatum : data -> OutputDatum
      OutputDatumHash : bytestring -> OutputDatum
    data TxOut | TxOut_match where
      TxOut :
        Address ->
        (\k a -> list (pair data data))
          bytestring
          ((\k a -> list (pair data data)) bytestring integer) ->
        OutputDatum ->
        Maybe bytestring ->
        TxOut
  in
  letrec
    !go : List TxOut -> integer
      = \(ds : List TxOut) ->
          List_match
            {TxOut}
            ds
            {all dead. integer}
            (/\dead -> 0)
            (\(x : TxOut) (xs : List TxOut) -> /\dead -> addInteger 1 (go xs))
            {all dead. dead}
  in
  let
    data Bool | Bool_match where
      True : Bool
      False : Bool
    data Unit | Unit_match where
      Unit : Unit
    !traceError : all a. string -> a
      = /\a ->
          \(str : string) -> let !x : Unit = trace {Unit} str Unit in error {a}
    !`$fUnsafeFromDataBool_$cunsafeFromBuiltinData` : data -> Bool
      = \(d : data) ->
          let
            !tup : pair integer (list data) = unConstrData d
            !index : integer = fstPair {integer} {list data} tup
            !args : list data = sndPair {integer} {list data} tup
          in
          Bool_match
            (ifThenElse {Bool} (equalsInteger 0 index) True False)
            {all dead. Bool}
            (/\dead -> False)
            (/\dead ->
               Bool_match
                 (ifThenElse {Bool} (equalsInteger 1 index) True False)
                 {all dead. Bool}
                 (/\dead -> True)
                 (/\dead -> traceError {Bool} "PT1")
                 {all dead. dead})
            {all dead. dead}
    data (Extended :: * -> *) a | Extended_match where
      Finite : a -> Extended a
      NegInf : Extended a
      PosInf : Extended a
    !`$fUnsafeFromDataExtended_$cunsafeFromBuiltinData` :
       all a. (\a -> data -> a) a -> data -> Extended a
      = /\a ->
          \(`$dUnsafeFromData` : (\a -> data -> a) a) (d : data) ->
            let
              !tup : pair integer (list data) = unConstrData d
              !index : integer = fstPair {integer} {list data} tup
              !args : list data = sndPair {integer} {list data} tup
            in
            Bool_match
              (ifThenElse {Bool} (equalsInteger 0 index) True False)
              {all dead. Extended a}
              (/\dead -> NegInf {a})
              (/\dead ->
                 Bool_match
                   (ifThenElse {Bool} (equalsInteger 1 index) True False)
                   {all dead. Extended a}
                   (/\dead ->
                      Finite {a} (`$dUnsafeFromData` (headList {data} args)))
                   (/\dead ->
                      Bool_match
                        (ifThenElse {Bool} (equalsInteger 2 index) True False)
                        {all dead. Extended a}
                        (/\dead -> PosInf {a})
                        (/\dead -> traceError {Extended a} "PT1")
                        {all dead. dead})
                   {all dead. dead})
              {all dead. dead}
    data GovernanceActionId | GovernanceActionId_match where
      GovernanceActionId : bytestring -> integer -> GovernanceActionId
    !`$fUnsafeFromDataGovernanceAction_$cunsafeFromBuiltinData` :
       data -> GovernanceActionId
      = \(d : data) ->
          let
            !tup : pair integer (list data) = unConstrData d
            !index : integer = fstPair {integer} {list data} tup
            !args : list data = sndPair {integer} {list data} tup
          in
          Bool_match
            (ifThenElse {Bool} (equalsInteger 0 index) True False)
            {all dead. GovernanceActionId}
            (/\dead ->
               GovernanceActionId
                 (unBData (headList {data} args))
                 (unIData (headList {data} (tailList {data} args))))
            (/\dead -> traceError {GovernanceActionId} "PT1")
            {all dead. dead}
    !`$fUnsafeFromDataList_$cunsafeFromBuiltinData` :
       all a. (\a -> data -> a) a -> data -> List a
      = /\a ->
          \(`$dUnsafeFromData` : (\a -> data -> a) a) ->
            letrec
              !go : list data -> List a
                = \(l : list data) ->
                    chooseList
                      {data}
                      {Unit -> List a}
                      l
                      (\(ds : Unit) -> Nil {a})
                      (\(ds : Unit) ->
                         Cons
                           {a}
                           (`$dUnsafeFromData` (headList {data} l))
                           (go (tailList {data} l)))
                      Unit
            in
            \(d : data) -> go (unListData d)
    data (Tuple2 :: * -> * -> *) a b | Tuple2_match where
      Tuple2 : a -> b -> Tuple2 a b
    !`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData` : data -> Credential
      = \(d : data) ->
          let
            !tup : pair integer (list data) = unConstrData d
            !index : integer = fstPair {integer} {list data} tup
            !args : list data = sndPair {integer} {list data} tup
          in
          Bool_match
            (ifThenElse {Bool} (equalsInteger 0 index) True False)
            {all dead. Credential}
            (/\dead -> PubKeyCredential (unBData (headList {data} args)))
            (/\dead ->
               Bool_match
                 (ifThenElse {Bool} (equalsInteger 1 index) True False)
                 {all dead. Credential}
                 (/\dead -> ScriptCredential (unBData (headList {data} args)))
                 (/\dead -> traceError {Credential} "PT1")
                 {all dead. dead})
            {all dead. dead}
    !`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData` :
       all a. (\a -> data -> a) a -> data -> Maybe a
      = /\a ->
          \(`$dUnsafeFromData` : (\a -> data -> a) a) (d : data) ->
            let
              !tup : pair integer (list data) = unConstrData d
              !index : integer = fstPair {integer} {list data} tup
              !args : list data = sndPair {integer} {list data} tup
            in
            Bool_match
              (ifThenElse {Bool} (equalsInteger 1 index) True False)
              {all dead. Maybe a}
              (/\dead -> Nothing {a})
              (/\dead ->
                 Bool_match
                   (ifThenElse {Bool} (equalsInteger 0 index) True False)
                   {all dead. Maybe a}
                   (/\dead ->
                      Just {a} (`$dUnsafeFromData` (headList {data} args)))
                   (/\dead -> traceError {Maybe a} "PT1")
                   {all dead. dead})
              {all dead. dead}
    data ProtocolVersion | ProtocolVersion_match where
      ProtocolVersion : integer -> integer -> ProtocolVersion
    data Rational | Rational_match where
      Rational : integer -> integer -> Rational
    data GovernanceAction | GovernanceAction_match where
      HardForkInitiation :
        Maybe GovernanceActionId -> ProtocolVersion -> GovernanceAction
      InfoAction : GovernanceAction
      NewConstitution :
        Maybe GovernanceActionId -> Maybe bytestring -> GovernanceAction
      NoConfidence : Maybe GovernanceActionId -> GovernanceAction
      ParameterChange :
        Maybe GovernanceActionId -> data -> Maybe bytestring -> GovernanceAction
      TreasuryWithdrawals :
        (\k a -> list (pair data data)) Credential integer ->
        Maybe bytestring ->
        GovernanceAction
      UpdateCommittee :
        Maybe GovernanceActionId ->
        List Credential ->
        (\k a -> list (pair data data)) Credential integer ->
        Rational ->
        GovernanceAction
    data ProposalProcedure | ProposalProcedure_match where
      ProposalProcedure :
        integer -> Credential -> GovernanceAction -> ProposalProcedure
  in
  letrec
    !euclid : integer -> integer -> integer
      = \(x : integer) (y : integer) ->
          Bool_match
            (ifThenElse {Bool} (equalsInteger 0 y) True False)
            {all dead. integer}
            (/\dead -> x)
            (/\dead -> euclid y (modInteger x y))
            {all dead. dead}
  in
  letrec
    !unsafeRatio : integer -> integer -> Rational
      = \(n : integer) (d : integer) ->
          Bool_match
            (ifThenElse {Bool} (equalsInteger 0 d) True False)
            {all dead. Rational}
            (/\dead -> traceError {Rational} "PT3")
            (/\dead ->
               Bool_match
                 (ifThenElse {Bool} (lessThanInteger d 0) True False)
                 {all dead. Rational}
                 (/\dead ->
                    unsafeRatio (subtractInteger 0 n) (subtractInteger 0 d))
                 (/\dead ->
                    let
                      !gcd' : integer = euclid n d
                    in
                    Rational (quotientInteger n gcd') (quotientInteger d gcd'))
                 {all dead. dead})
            {all dead. dead}
  in
  let
    !`$fUnsafeFromDataProposalProcedure_$cunsafeFromBuiltinData` :
       data -> ProposalProcedure
      = \(d : data) ->
          let
            !tup : pair integer (list data) = unConstrData d
            !index : integer = fstPair {integer} {list data} tup
            !args : list data = sndPair {integer} {list data} tup
          in
          Bool_match
            (ifThenElse {Bool} (equalsInteger 0 index) True False)
            {all dead. ProposalProcedure}
            (/\dead ->
               let
                 !l : list data = tailList {data} args
               in
               ProposalProcedure
                 (unIData (headList {data} args))
                 (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                    (headList {data} l))
                 (let
                   !tup : pair integer (list data)
                     = unConstrData (headList {data} (tailList {data} l))
                   !index : integer = fstPair {integer} {list data} tup
                   !args : list data = sndPair {integer} {list data} tup
                 in
                 Bool_match
                   (ifThenElse {Bool} (equalsInteger 0 index) True False)
                   {all dead. GovernanceAction}
                   (/\dead ->
                      let
                        !l : list data = tailList {data} args
                      in
                      ParameterChange
                        (`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                           {GovernanceActionId}
                           `$fUnsafeFromDataGovernanceAction_$cunsafeFromBuiltinData`
                           (headList {data} args))
                        (headList {data} l)
                        (`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                           {bytestring}
                           unBData
                           (headList {data} (tailList {data} l))))
                   (/\dead ->
                      Bool_match
                        (ifThenElse {Bool} (equalsInteger 1 index) True False)
                        {all dead. GovernanceAction}
                        (/\dead ->
                           HardForkInitiation
                             (`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                                {GovernanceActionId}
                                `$fUnsafeFromDataGovernanceAction_$cunsafeFromBuiltinData`
                                (headList {data} args))
                             (let
                               !tup : pair integer (list data)
                                 = unConstrData
                                     (headList {data} (tailList {data} args))
                               !index : integer
                                 = fstPair {integer} {list data} tup
                               !args : list data
                                 = sndPair {integer} {list data} tup
                             in
                             Bool_match
                               (ifThenElse
                                  {Bool}
                                  (equalsInteger 0 index)
                                  True
                                  False)
                               {all dead. ProtocolVersion}
                               (/\dead ->
                                  ProtocolVersion
                                    (unIData (headList {data} args))
                                    (unIData
                                       (headList
                                          {data}
                                          (tailList {data} args))))
                               (/\dead -> traceError {ProtocolVersion} "PT1")
                               {all dead. dead}))
                        (/\dead ->
                           Bool_match
                             (ifThenElse
                                {Bool}
                                (equalsInteger 2 index)
                                True
                                False)
                             {all dead. GovernanceAction}
                             (/\dead ->
                                TreasuryWithdrawals
                                  (unMapData (headList {data} args))
                                  (`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                                     {bytestring}
                                     unBData
                                     (headList {data} (tailList {data} args))))
                             (/\dead ->
                                Bool_match
                                  (ifThenElse
                                     {Bool}
                                     (equalsInteger 3 index)
                                     True
                                     False)
                                  {all dead. GovernanceAction}
                                  (/\dead ->
                                     NoConfidence
                                       (`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                                          {GovernanceActionId}
                                          `$fUnsafeFromDataGovernanceAction_$cunsafeFromBuiltinData`
                                          (headList {data} args)))
                                  (/\dead ->
                                     Bool_match
                                       (ifThenElse
                                          {Bool}
                                          (equalsInteger 4 index)
                                          True
                                          False)
                                       {all dead. GovernanceAction}
                                       (/\dead ->
                                          let
                                            !l : list data
                                              = tailList {data} args
                                            !l : list data = tailList {data} l
                                          in
                                          UpdateCommittee
                                            (`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                                               {GovernanceActionId}
                                               `$fUnsafeFromDataGovernanceAction_$cunsafeFromBuiltinData`
                                               (headList {data} args))
                                            (`$fUnsafeFromDataList_$cunsafeFromBuiltinData`
                                               {Credential}
                                               `$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                                               (headList {data} l))
                                            (unMapData (headList {data} l))
                                            (let
                                              !x : data
                                                = headList
                                                    {data}
                                                    (tailList {data} l)
                                            in
                                            Tuple2_match
                                              {integer}
                                              {integer}
                                              (let
                                                !tup : pair integer (list data)
                                                  = unConstrData x
                                                !index : integer
                                                  = fstPair
                                                      {integer}
                                                      {list data}
                                                      tup
                                                !args : list data
                                                  = sndPair
                                                      {integer}
                                                      {list data}
                                                      tup
                                              in
                                              Bool_match
                                                (ifThenElse
                                                   {Bool}
                                                   (equalsInteger 0 index)
                                                   True
                                                   False)
                                                {all dead.
                                                   Tuple2 integer integer}
                                                (/\dead ->
                                                   Tuple2
                                                     {integer}
                                                     {integer}
                                                     (unIData
                                                        (headList {data} args))
                                                     (unIData
                                                        (headList
                                                           {data}
                                                           (tailList
                                                              {data}
                                                              args))))
                                                (/\dead ->
                                                   traceError
                                                     {Tuple2 integer integer}
                                                     "PT1")
                                                {all dead. dead})
                                              {Rational}
                                              (\(a : integer) (b : integer) ->
                                                 unsafeRatio a b)))
                                       (/\dead ->
                                          Bool_match
                                            (ifThenElse
                                               {Bool}
                                               (equalsInteger 5 index)
                                               True
                                               False)
                                            {all dead. GovernanceAction}
                                            (/\dead ->
                                               NewConstitution
                                                 (`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                                                    {GovernanceActionId}
                                                    `$fUnsafeFromDataGovernanceAction_$cunsafeFromBuiltinData`
                                                    (headList {data} args))
                                                 (let
                                                   !tup :
                                                      pair integer (list data)
                                                     = unConstrData
                                                         (headList
                                                            {data}
                                                            (tailList
                                                               {data}
                                                               args))
                                                   !index : integer
                                                     = fstPair
                                                         {integer}
                                                         {list data}
                                                         tup
                                                   !args : list data
                                                     = sndPair
                                                         {integer}
                                                         {list data}
                                                         tup
                                                 in
                                                 Bool_match
                                                   (ifThenElse
                                                      {Bool}
                                                      (equalsInteger 0 index)
                                                      True
                                                      False)
                                                   {all dead. Maybe bytestring}
                                                   (/\dead ->
                                                      `$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                                                        {bytestring}
                                                        unBData
                                                        (headList {data} args))
                                                   (/\dead ->
                                                      traceError
                                                        {Maybe bytestring}
                                                        "PT1")
                                                   {all dead. dead}))
                                            (/\dead ->
                                               Bool_match
                                                 (ifThenElse
                                                    {Bool}
                                                    (equalsInteger 6 index)
                                                    True
                                                    False)
                                                 {all dead. GovernanceAction}
                                                 (/\dead -> InfoAction)
                                                 (/\dead ->
                                                    traceError
                                                      {GovernanceAction}
                                                      "PT1")
                                                 {all dead. dead})
                                            {all dead. dead})
                                       {all dead. dead})
                                  {all dead. dead})
                             {all dead. dead})
                        {all dead. dead})
                   {all dead. dead}))
            (/\dead -> traceError {ProposalProcedure} "PT1")
            {all dead. dead}
    data DRep | DRep_match where
      DRep : Credential -> DRep
      DRepAlwaysAbstain : DRep
      DRepAlwaysNoConfidence : DRep
    !`$fUnsafeFromDataDRep_$cunsafeFromBuiltinData` : data -> DRep
      = \(d : data) ->
          let
            !tup : pair integer (list data) = unConstrData d
            !index : integer = fstPair {integer} {list data} tup
            !args : list data = sndPair {integer} {list data} tup
          in
          Bool_match
            (ifThenElse {Bool} (equalsInteger 0 index) True False)
            {all dead. DRep}
            (/\dead ->
               DRep
                 (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                    (headList {data} args)))
            (/\dead ->
               Bool_match
                 (ifThenElse {Bool} (equalsInteger 1 index) True False)
                 {all dead. DRep}
                 (/\dead -> DRepAlwaysAbstain)
                 (/\dead ->
                    Bool_match
                      (ifThenElse {Bool} (equalsInteger 2 index) True False)
                      {all dead. DRep}
                      (/\dead -> DRepAlwaysNoConfidence)
                      (/\dead -> traceError {DRep} "PT1")
                      {all dead. dead})
                 {all dead. dead})
            {all dead. dead}
    data Delegatee | Delegatee_match where
      DelegStake : bytestring -> Delegatee
      DelegStakeVote : bytestring -> DRep -> Delegatee
      DelegVote : DRep -> Delegatee
    !`$fUnsafeFromDataDelegatee_$cunsafeFromBuiltinData` : data -> Delegatee
      = \(d : data) ->
          let
            !tup : pair integer (list data) = unConstrData d
            !index : integer = fstPair {integer} {list data} tup
            !args : list data = sndPair {integer} {list data} tup
          in
          Bool_match
            (ifThenElse {Bool} (equalsInteger 0 index) True False)
            {all dead. Delegatee}
            (/\dead -> DelegStake (unBData (headList {data} args)))
            (/\dead ->
               Bool_match
                 (ifThenElse {Bool} (equalsInteger 1 index) True False)
                 {all dead. Delegatee}
                 (/\dead ->
                    DelegVote
                      (`$fUnsafeFromDataDRep_$cunsafeFromBuiltinData`
                         (headList {data} args)))
                 (/\dead ->
                    Bool_match
                      (ifThenElse {Bool} (equalsInteger 2 index) True False)
                      {all dead. Delegatee}
                      (/\dead ->
                         DelegStakeVote
                           (unBData (headList {data} args))
                           (`$fUnsafeFromDataDRep_$cunsafeFromBuiltinData`
                              (headList {data} (tailList {data} args))))
                      (/\dead -> traceError {Delegatee} "PT1")
                      {all dead. dead})
                 {all dead. dead})
            {all dead. dead}
    data TxCert | TxCert_match where
      TxCertAuthHotCommittee : Credential -> Credential -> TxCert
      TxCertDelegStaking : Credential -> Delegatee -> TxCert
      TxCertPoolRegister : bytestring -> bytestring -> TxCert
      TxCertPoolRetire : bytestring -> integer -> TxCert
      TxCertRegDRep : Credential -> integer -> TxCert
      TxCertRegDeleg : Credential -> Delegatee -> integer -> TxCert
      TxCertRegStaking : Credential -> Maybe integer -> TxCert
      TxCertResignColdCommittee : Credential -> TxCert
      TxCertUnRegDRep : Credential -> integer -> TxCert
      TxCertUnRegStaking : Credential -> Maybe integer -> TxCert
      TxCertUpdateDRep : Credential -> TxCert
    !`$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData` :
       data -> TxCert
      = \(eta : data) ->
          let
            !tup : pair integer (list data) = unConstrData eta
            !index : integer = fstPair {integer} {list data} tup
            !args : list data = sndPair {integer} {list data} tup
          in
          Bool_match
            (ifThenElse {Bool} (equalsInteger 0 index) True False)
            {all dead. TxCert}
            (/\dead ->
               TxCertRegStaking
                 (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                    (headList {data} args))
                 (`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                    {integer}
                    unIData
                    (headList {data} (tailList {data} args))))
            (/\dead ->
               Bool_match
                 (ifThenElse {Bool} (equalsInteger 1 index) True False)
                 {all dead. TxCert}
                 (/\dead ->
                    TxCertUnRegStaking
                      (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                         (headList {data} args))
                      (`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                         {integer}
                         unIData
                         (headList {data} (tailList {data} args))))
                 (/\dead ->
                    Bool_match
                      (ifThenElse {Bool} (equalsInteger 2 index) True False)
                      {all dead. TxCert}
                      (/\dead ->
                         TxCertDelegStaking
                           (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                              (headList {data} args))
                           (`$fUnsafeFromDataDelegatee_$cunsafeFromBuiltinData`
                              (headList {data} (tailList {data} args))))
                      (/\dead ->
                         Bool_match
                           (ifThenElse
                              {Bool}
                              (equalsInteger 3 index)
                              True
                              False)
                           {all dead. TxCert}
                           (/\dead ->
                              let
                                !l : list data = tailList {data} args
                              in
                              TxCertRegDeleg
                                (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                                   (headList {data} args))
                                (`$fUnsafeFromDataDelegatee_$cunsafeFromBuiltinData`
                                   (headList {data} l))
                                (unIData (headList {data} (tailList {data} l))))
                           (/\dead ->
                              Bool_match
                                (ifThenElse
                                   {Bool}
                                   (equalsInteger 4 index)
                                   True
                                   False)
                                {all dead. TxCert}
                                (/\dead ->
                                   TxCertRegDRep
                                     (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                                        (headList {data} args))
                                     (unIData
                                        (headList
                                           {data}
                                           (tailList {data} args))))
                                (/\dead ->
                                   Bool_match
                                     (ifThenElse
                                        {Bool}
                                        (equalsInteger 5 index)
                                        True
                                        False)
                                     {all dead. TxCert}
                                     (/\dead ->
                                        TxCertUpdateDRep
                                          (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                                             (headList {data} args)))
                                     (/\dead ->
                                        Bool_match
                                          (ifThenElse
                                             {Bool}
                                             (equalsInteger 6 index)
                                             True
                                             False)
                                          {all dead. TxCert}
                                          (/\dead ->
                                             TxCertUnRegDRep
                                               (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                                                  (headList {data} args))
                                               (unIData
                                                  (headList
                                                     {data}
                                                     (tailList {data} args))))
                                          (/\dead ->
                                             Bool_match
                                               (ifThenElse
                                                  {Bool}
                                                  (equalsInteger 7 index)
                                                  True
                                                  False)
                                               {all dead. TxCert}
                                               (/\dead ->
                                                  TxCertPoolRegister
                                                    (unBData
                                                       (headList {data} args))
                                                    (unBData
                                                       (headList
                                                          {data}
                                                          (tailList
                                                             {data}
                                                             args))))
                                               (/\dead ->
                                                  Bool_match
                                                    (ifThenElse
                                                       {Bool}
                                                       (equalsInteger 8 index)
                                                       True
                                                       False)
                                                    {all dead. TxCert}
                                                    (/\dead ->
                                                       TxCertPoolRetire
                                                         (unBData
                                                            (headList
                                                               {data}
                                                               args))
                                                         (unIData
                                                            (headList
                                                               {data}
                                                               (tailList
                                                                  {data}
                                                                  args))))
                                                    (/\dead ->
                                                       Bool_match
                                                         (ifThenElse
                                                            {Bool}
                                                            (equalsInteger
                                                               9
                                                               index)
                                                            True
                                                            False)
                                                         {all dead. TxCert}
                                                         (/\dead ->
                                                            TxCertAuthHotCommittee
                                                              (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                                                                 (headList
                                                                    {data}
                                                                    args))
                                                              (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                                                                 (headList
                                                                    {data}
                                                                    (tailList
                                                                       {data}
                                                                       args))))
                                                         (/\dead ->
                                                            Bool_match
                                                              (ifThenElse
                                                                 {Bool}
                                                                 (equalsInteger
                                                                    10
                                                                    index)
                                                                 True
                                                                 False)
                                                              {all dead. TxCert}
                                                              (/\dead ->
                                                                 TxCertResignColdCommittee
                                                                   (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                                                                      (headList
                                                                         {data}
                                                                         args)))
                                                              (/\dead ->
                                                                 traceError
                                                                   {TxCert}
                                                                   "PT1")
                                                              {all dead. dead})
                                                         {all dead. dead})
                                                    {all dead. dead})
                                               {all dead. dead})
                                          {all dead. dead})
                                     {all dead. dead})
                                {all dead. dead})
                           {all dead. dead})
                      {all dead. dead})
                 {all dead. dead})
            {all dead. dead}
    data TxOutRef | TxOutRef_match where
      TxOutRef : bytestring -> integer -> TxOutRef
    !`$fUnsafeFromDataTxOutRef_$cunsafeFromBuiltinData` : data -> TxOutRef
      = \(d : data) ->
          let
            !tup : pair integer (list data) = unConstrData d
            !index : integer = fstPair {integer} {list data} tup
            !args : list data = sndPair {integer} {list data} tup
          in
          Bool_match
            (ifThenElse {Bool} (equalsInteger 0 index) True False)
            {all dead. TxOutRef}
            (/\dead ->
               TxOutRef
                 (unBData (headList {data} args))
                 (unIData (headList {data} (tailList {data} args))))
            (/\dead -> traceError {TxOutRef} "PT1")
            {all dead. dead}
    !`$fUnsafeFromDataTxOut_$cunsafeFromBuiltinData` :
       data -> TxOut
      = \(eta : data) ->
          let
            !tup : pair integer (list data) = unConstrData eta
            !index : integer = fstPair {integer} {list data} tup
            !args : list data = sndPair {integer} {list data} tup
          in
          Bool_match
            (ifThenElse {Bool} (equalsInteger 0 index) True False)
            {all dead. TxOut}
            (/\dead ->
               let
                 !l : list data = tailList {data} args
                 !l : list data = tailList {data} l
               in
               TxOut
                 (let
                   !tup : pair integer (list data)
                     = unConstrData (headList {data} args)
                   !index : integer = fstPair {integer} {list data} tup
                   !args : list data = sndPair {integer} {list data} tup
                 in
                 Bool_match
                   (ifThenElse {Bool} (equalsInteger 0 index) True False)
                   {all dead. Address}
                   (/\dead ->
                      Address
                        (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                           (headList {data} args))
                        (`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                           {StakingCredential}
                           (\(d : data) ->
                              let
                                !tup : pair integer (list data) = unConstrData d
                                !index : integer
                                  = fstPair {integer} {list data} tup
                                !args : list data
                                  = sndPair {integer} {list data} tup
                              in
                              Bool_match
                                (ifThenElse
                                   {Bool}
                                   (equalsInteger 0 index)
                                   True
                                   False)
                                {all dead. StakingCredential}
                                (/\dead ->
                                   StakingHash
                                     (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                                        (headList {data} args)))
                                (/\dead ->
                                   Bool_match
                                     (ifThenElse
                                        {Bool}
                                        (equalsInteger 1 index)
                                        True
                                        False)
                                     {all dead. StakingCredential}
                                     (/\dead ->
                                        let
                                          !l : list data = tailList {data} args
                                        in
                                        StakingPtr
                                          (unIData (headList {data} args))
                                          (unIData (headList {data} l))
                                          (unIData
                                             (headList
                                                {data}
                                                (tailList {data} l))))
                                     (/\dead ->
                                        traceError {StakingCredential} "PT1")
                                     {all dead. dead})
                                {all dead. dead})
                           (headList {data} (tailList {data} args))))
                   (/\dead -> traceError {Address} "PT1")
                   {all dead. dead})
                 (unMapData (headList {data} l))
                 (let
                   !tup : pair integer (list data)
                     = unConstrData (headList {data} l)
                   !index : integer = fstPair {integer} {list data} tup
                   !args : list data = sndPair {integer} {list data} tup
                 in
                 Bool_match
                   (ifThenElse {Bool} (equalsInteger 0 index) True False)
                   {all dead. OutputDatum}
                   (/\dead -> NoOutputDatum)
                   (/\dead ->
                      Bool_match
                        (ifThenElse {Bool} (equalsInteger 1 index) True False)
                        {all dead. OutputDatum}
                        (/\dead ->
                           OutputDatumHash (unBData (headList {data} args)))
                        (/\dead ->
                           Bool_match
                             (ifThenElse
                                {Bool}
                                (equalsInteger 2 index)
                                True
                                False)
                             {all dead. OutputDatum}
                             (/\dead -> OutputDatum (headList {data} args))
                             (/\dead -> traceError {OutputDatum} "PT1")
                             {all dead. dead})
                        {all dead. dead})
                   {all dead. dead})
                 (`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                    {bytestring}
                    unBData
                    (headList {data} (tailList {data} l))))
            (/\dead -> traceError {TxOut} "PT1")
            {all dead. dead}
    data TxInInfo | TxInInfo_match where
      TxInInfo : TxOutRef -> TxOut -> TxInInfo
    !`$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData` : data -> TxInInfo
      = \(d : data) ->
          let
            !tup : pair integer (list data) = unConstrData d
            !index : integer = fstPair {integer} {list data} tup
            !args : list data = sndPair {integer} {list data} tup
          in
          Bool_match
            (ifThenElse {Bool} (equalsInteger 0 index) True False)
            {all dead. TxInInfo}
            (/\dead ->
               TxInInfo
                 (`$fUnsafeFromDataTxOutRef_$cunsafeFromBuiltinData`
                    (headList {data} args))
                 (`$fUnsafeFromDataTxOut_$cunsafeFromBuiltinData`
                    (headList {data} (tailList {data} args))))
            (/\dead -> traceError {TxInInfo} "PT1")
            {all dead. dead}
    data Voter | Voter_match where
      CommitteeVoter : Credential -> Voter
      DRepVoter : Credential -> Voter
      StakePoolVoter : bytestring -> Voter
    data ScriptInfo | ScriptInfo_match where
      CertifyingScript : integer -> TxCert -> ScriptInfo
      MintingScript : bytestring -> ScriptInfo
      ProposingScript : integer -> ProposalProcedure -> ScriptInfo
      RewardingScript : Credential -> ScriptInfo
      SpendingScript : TxOutRef -> Maybe data -> ScriptInfo
      VotingScript : Voter -> ScriptInfo
    data (LowerBound :: * -> *) a | LowerBound_match where
      LowerBound : Extended a -> Bool -> LowerBound a
    data (UpperBound :: * -> *) a | UpperBound_match where
      UpperBound : Extended a -> Bool -> UpperBound a
    data (Interval :: * -> *) a | Interval_match where
      Interval : LowerBound a -> UpperBound a -> Interval a
    Vote = all a. a -> a
    ScriptPurpose = all a. a -> a
    data TxInfo | TxInfo_match where
      TxInfo :
        List TxInInfo ->
        List TxInInfo ->
        List TxOut ->
        integer ->
        (\k a -> list (pair data data))
          bytestring
          ((\k a -> list (pair data data)) bytestring integer) ->
        List TxCert ->
        (\k a -> list (pair data data)) Credential integer ->
        Interval integer ->
        List bytestring ->
        (\k a -> list (pair data data)) ScriptPurpose data ->
        (\k a -> list (pair data data)) bytestring data ->
        bytestring ->
        (\k a -> list (pair data data))
          Voter
          ((\k a -> list (pair data data)) GovernanceActionId Vote) ->
        List ProposalProcedure ->
        Maybe integer ->
        Maybe integer ->
        TxInfo
    data ScriptContext | ScriptContext_match where
      ScriptContext : TxInfo -> data -> ScriptInfo -> ScriptContext
  in
  \(d : data) ->
    ScriptContext_match
      (let
        !tup : pair integer (list data) = unConstrData d
        !index : integer = fstPair {integer} {list data} tup
        !args : list data = sndPair {integer} {list data} tup
      in
      Bool_match
        (ifThenElse {Bool} (equalsInteger 0 index) True False)
        {all dead. ScriptContext}
        (/\dead ->
           let
             !l : list data = tailList {data} args
           in
           ScriptContext
             (let
               !tup : pair integer (list data)
                 = unConstrData (headList {data} args)
               !index : integer = fstPair {integer} {list data} tup
               !args : list data = sndPair {integer} {list data} tup
             in
             Bool_match
               (ifThenElse {Bool} (equalsInteger 0 index) True False)
               {all dead. TxInfo}
               (/\dead ->
                  let
                    !l : list data = tailList {data} args
                    !l : list data = tailList {data} l
                    !l : list data = tailList {data} l
                    !l : list data = tailList {data} l
                    !l : list data = tailList {data} l
                    !l : list data = tailList {data} l
                    !l : list data = tailList {data} l
                    !l : list data = tailList {data} l
                    !l : list data = tailList {data} l
                    !l : list data = tailList {data} l
                    !l : list data = tailList {data} l
                    !l : list data = tailList {data} l
                    !l : list data = tailList {data} l
                    !l : list data = tailList {data} l
                  in
                  TxInfo
                    (`$fUnsafeFromDataList_$cunsafeFromBuiltinData`
                       {TxInInfo}
                       `$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData`
                       (headList {data} args))
                    (`$fUnsafeFromDataList_$cunsafeFromBuiltinData`
                       {TxInInfo}
                       `$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData`
                       (headList {data} l))
                    (`$fUnsafeFromDataList_$cunsafeFromBuiltinData`
                       {TxOut}
                       `$fUnsafeFromDataTxOut_$cunsafeFromBuiltinData`
                       (headList {data} l))
                    (unIData (headList {data} l))
                    (unMapData (headList {data} l))
                    (`$fUnsafeFromDataList_$cunsafeFromBuiltinData`
                       {TxCert}
                       `$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData`
                       (headList {data} l))
                    (unMapData (headList {data} l))
                    (let
                      !tup : pair integer (list data)
                        = unConstrData (headList {data} l)
                      !index : integer = fstPair {integer} {list data} tup
                      !args : list data = sndPair {integer} {list data} tup
                    in
                    Bool_match
                      (ifThenElse {Bool} (equalsInteger 0 index) True False)
                      {all dead. Interval integer}
                      (/\dead ->
                         Interval
                           {integer}
                           (let
                             !tup : pair integer (list data)
                               = unConstrData (headList {data} args)
                             !index : integer
                               = fstPair {integer} {list data} tup
                             !args : list data
                               = sndPair {integer} {list data} tup
                           in
                           Bool_match
                             (ifThenElse
                                {Bool}
                                (equalsInteger 0 index)
                                True
                                False)
                             {all dead. LowerBound integer}
                             (/\dead ->
                                LowerBound
                                  {integer}
                                  (`$fUnsafeFromDataExtended_$cunsafeFromBuiltinData`
                                     {integer}
                                     unIData
                                     (headList {data} args))
                                  (`$fUnsafeFromDataBool_$cunsafeFromBuiltinData`
                                     (headList {data} (tailList {data} args))))
                             (/\dead -> traceError {LowerBound integer} "PT1")
                             {all dead. dead})
                           (let
                             !tup : pair integer (list data)
                               = unConstrData
                                   (headList {data} (tailList {data} args))
                             !index : integer
                               = fstPair {integer} {list data} tup
                             !args : list data
                               = sndPair {integer} {list data} tup
                           in
                           Bool_match
                             (ifThenElse
                                {Bool}
                                (equalsInteger 0 index)
                                True
                                False)
                             {all dead. UpperBound integer}
                             (/\dead ->
                                UpperBound
                                  {integer}
                                  (`$fUnsafeFromDataExtended_$cunsafeFromBuiltinData`
                                     {integer}
                                     unIData
                                     (headList {data} args))
                                  (`$fUnsafeFromDataBool_$cunsafeFromBuiltinData`
                                     (headList {data} (tailList {data} args))))
                             (/\dead -> traceError {UpperBound integer} "PT1")
                             {all dead. dead}))
                      (/\dead -> traceError {Interval integer} "PT1")
                      {all dead. dead})
                    (`$fUnsafeFromDataList_$cunsafeFromBuiltinData`
                       {bytestring}
                       unBData
                       (headList {data} l))
                    (unMapData (headList {data} l))
                    (unMapData (headList {data} l))
                    (unBData (headList {data} l))
                    (unMapData (headList {data} l))
                    (`$fUnsafeFromDataList_$cunsafeFromBuiltinData`
                       {ProposalProcedure}
                       `$fUnsafeFromDataProposalProcedure_$cunsafeFromBuiltinData`
                       (headList {data} l))
                    (`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                       {integer}
                       unIData
                       (headList {data} l))
                    (`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                       {integer}
                       unIData
                       (headList {data} (tailList {data} l))))
               (/\dead -> traceError {TxInfo} "PT1")
               {all dead. dead})
             (headList {data} l)
             (let
               !tup : pair integer (list data)
                 = unConstrData (headList {data} (tailList {data} l))
               !index : integer = fstPair {integer} {list data} tup
               !args : list data = sndPair {integer} {list data} tup
             in
             Bool_match
               (ifThenElse {Bool} (equalsInteger 0 index) True False)
               {all dead. ScriptInfo}
               (/\dead -> MintingScript (unBData (headList {data} args)))
               (/\dead ->
                  Bool_match
                    (ifThenElse {Bool} (equalsInteger 1 index) True False)
                    {all dead. ScriptInfo}
                    (/\dead ->
                       SpendingScript
                         (`$fUnsafeFromDataTxOutRef_$cunsafeFromBuiltinData`
                            (headList {data} args))
                         (`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                            {data}
                            (\(d : data) -> d)
                            (headList {data} (tailList {data} args))))
                    (/\dead ->
                       Bool_match
                         (ifThenElse {Bool} (equalsInteger 2 index) True False)
                         {all dead. ScriptInfo}
                         (/\dead ->
                            RewardingScript
                              (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                                 (headList {data} args)))
                         (/\dead ->
                            Bool_match
                              (ifThenElse
                                 {Bool}
                                 (equalsInteger 3 index)
                                 True
                                 False)
                              {all dead. ScriptInfo}
                              (/\dead ->
                                 CertifyingScript
                                   (unIData (headList {data} args))
                                   (`$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData`
                                      (headList {data} (tailList {data} args))))
                              (/\dead ->
                                 Bool_match
                                   (ifThenElse
                                      {Bool}
                                      (equalsInteger 4 index)
                                      True
                                      False)
                                   {all dead. ScriptInfo}
                                   (/\dead ->
                                      VotingScript
                                        (let
                                          !tup : pair integer (list data)
                                            = unConstrData
                                                (headList {data} args)
                                          !index : integer
                                            = fstPair {integer} {list data} tup
                                          !args : list data
                                            = sndPair {integer} {list data} tup
                                        in
                                        Bool_match
                                          (ifThenElse
                                             {Bool}
                                             (equalsInteger 0 index)
                                             True
                                             False)
                                          {all dead. Voter}
                                          (/\dead ->
                                             CommitteeVoter
                                               (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                                                  (headList {data} args)))
                                          (/\dead ->
                                             Bool_match
                                               (ifThenElse
                                                  {Bool}
                                                  (equalsInteger 1 index)
                                                  True
                                                  False)
                                               {all dead. Voter}
                                               (/\dead ->
                                                  DRepVoter
                                                    (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                                                       (headList {data} args)))
                                               (/\dead ->
                                                  Bool_match
                                                    (ifThenElse
                                                       {Bool}
                                                       (equalsInteger 2 index)
                                                       True
                                                       False)
                                                    {all dead. Voter}
                                                    (/\dead ->
                                                       StakePoolVoter
                                                         (unBData
                                                            (headList
                                                               {data}
                                                               args)))
                                                    (/\dead ->
                                                       traceError {Voter} "PT1")
                                                    {all dead. dead})
                                               {all dead. dead})
                                          {all dead. dead}))
                                   (/\dead ->
                                      Bool_match
                                        (ifThenElse
                                           {Bool}
                                           (equalsInteger 5 index)
                                           True
                                           False)
                                        {all dead. ScriptInfo}
                                        (/\dead ->
                                           ProposingScript
                                             (unIData (headList {data} args))
                                             (`$fUnsafeFromDataProposalProcedure_$cunsafeFromBuiltinData`
                                                (headList
                                                   {data}
                                                   (tailList {data} args))))
                                        (/\dead ->
                                           traceError {ScriptInfo} "PT1")
                                        {all dead. dead})
                                   {all dead. dead})
                              {all dead. dead})
                         {all dead. dead})
                    {all dead. dead})
               {all dead. dead}))
        (/\dead -> traceError {ScriptContext} "PT1")
        {all dead. dead})
      {Unit}
      (\(ipv : TxInfo) (ipv : data) (ipv : ScriptInfo) ->
         Bool_match
           (ifThenElse
              {Bool}
              (equalsInteger
                 0
                 (modInteger
                    (go
                       (TxInfo_match
                          ipv
                          {List TxOut}
                          (\(ds : List TxInInfo)
                            (ds : List TxInInfo)
                            (ds : List TxOut)
                            (ds : integer)
                            (ds :
                               (\k a -> list (pair data data))
                                 bytestring
                                 ((\k a -> list (pair data data))
                                    bytestring
                                    integer))
                            (ds : List TxCert)
                            (ds :
                               (\k a -> list (pair data data))
                                 Credential
                                 integer)
                            (ds : Interval integer)
                            (ds : List bytestring)
                            (ds :
                               (\k a -> list (pair data data))
                                 ScriptPurpose
                                 data)
                            (ds :
                               (\k a -> list (pair data data)) bytestring data)
                            (ds : bytestring)
                            (ds :
                               (\k a -> list (pair data data))
                                 Voter
                                 ((\k a -> list (pair data data))
                                    GovernanceActionId
                                    Vote))
                            (ds : List ProposalProcedure)
                            (ds : Maybe integer)
                            (ds : Maybe integer) ->
                             ds)))
                    2))
              True
              False)
           {all dead. Unit}
           (/\dead -> Unit)
           (/\dead -> error {Unit})
           {all dead. dead}))
  (Constr 0
     [ Constr 0
         [ List []
         , List []
         , List
             [ Constr 0
                 [ Constr 0 [Constr 0 [B #], Constr 1 []]
                 , Map [(B #, Map [(B #, I 1)])]
                 , Constr 0 []
                 , Constr 1 [] ] ]
         , I 10000
         , Map []
         , List []
         , Map []
         , Constr 0
             [ Constr 0 [Constr 0 [], Constr 1 []]
             , Constr 0 [Constr 2 [], Constr 1 []] ]
         , List []
         , Map []
         , Map []
         , B #
         , Map []
         , List []
         , Constr 1 []
         , Constr 1 [] ]
     , I 1
     , Constr 1 [Constr 0 [B #, I 0], Constr 1 []] ])
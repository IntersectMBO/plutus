let
  data Bool | Bool_match where
    True : Bool
    False : Bool
  data Unit | Unit_match where
    Unit : Unit
in
\(r_stake_cred : data) ->
  letrec
    !lookForCred : pair data data -> list (pair data data) -> Unit
      = \(p : pair data data) (tl : list (pair data data)) ->
          Bool_match
            (ifThenElse
               {Bool}
               (equalsData r_stake_cred (fstPair {data} {data} p))
               True
               False)
            {all dead. Unit}
            (/\dead -> Unit)
            (/\dead -> lookForCred tl)
            {all dead. dead}
    ~lookForCred : list (pair data data) -> Unit
      = (let
            a = pair data data
          in
          /\r ->
            \(nilCase : Unit -> r) (consCase : a -> list a -> r) (l : list a) ->
              (let
                  r = Unit -> r
                in
                \(z : r) (f : a -> list a -> r) (xs : list a) ->
                  chooseList
                    {a}
                    {all dead. r}
                    xs
                    (/\dead -> z)
                    (/\dead -> f (headList {a} xs) (tailList {a} xs))
                    {r})
                nilCase
                (\(x : a) (xs : list a) (ds : Unit) -> consCase x xs)
                l
                Unit)
          {Unit}
          (\(ds : Unit) ->
             let
               !x : Unit = trace {Unit} "not found" Unit
             in
             error {Unit})
          lookForCred
  in
  \(r_ctx : data) ->
    let
      !wdrl : list (pair data data)
        = unMapData
            (headList
               {data}
               (tailList
                  {data}
                  (tailList
                     {data}
                     (tailList
                        {data}
                        (tailList
                           {data}
                           (tailList
                              {data}
                              (tailList
                                 {data}
                                 (sndPair
                                    {integer}
                                    {list data}
                                    (unConstrData
                                       (headList
                                          {data}
                                          (sndPair
                                             {integer}
                                             {list data}
                                             (unConstrData r_ctx))))))))))))
      !wdrlAtZero : data
        = fstPair {data} {data} (headList {pair data data} wdrl)
      !rest : list (pair data data) = tailList {pair data data} wdrl
      !wdrlAtOne : data = fstPair {data} {data} (headList {pair data data} rest)
    in
    Bool_match
      (ifThenElse {Bool} (equalsData r_stake_cred wdrlAtZero) True False)
      {all dead. Unit}
      (/\dead -> Unit)
      (/\dead ->
         Bool_match
           (ifThenElse {Bool} (equalsData r_stake_cred wdrlAtOne) True False)
           {all dead. Unit}
           (/\dead -> Unit)
           (/\dead -> lookForCred rest)
           {all dead. dead})
      {all dead. dead}
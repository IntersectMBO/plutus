let
  data Unit | Unit_match where
    Unit : Unit
  data Bool | Bool_match where
    True : Bool
    False : Bool
in
\(r_stake_cred : data) ->
  letrec
    !lookForCred : list (pair data data) -> Unit
      = \(l : list (pair data data)) ->
          (let
              a = pair data data
            in
            /\r ->
              \(z : r) (f : a -> list a -> r) (xs : list a) -> case r xs [z, f])
            {Unit -> Unit}
            (\(ds : Unit) ->
               let
                 !x : Unit = trace {Unit} "not found" Unit
               in
               error {Unit})
            (\(x : pair data data) (xs : list (pair data data)) (ds : Unit) ->
               Bool_match
                 (case
                    Bool
                    (equalsData r_stake_cred (fstPair {data} {data} x))
                    [False, True])
                 {all dead. Unit}
                 (/\dead -> Unit)
                 (/\dead -> lookForCred xs)
                 {all dead. dead})
            l
            Unit
  in
  \(r_ctx : data) ->
    let
      !wdrl : list (pair data data)
        = unMapData
            (headList
               {data}
               (tailList
                  {data}
                  (tailList
                     {data}
                     (tailList
                        {data}
                        (tailList
                           {data}
                           (tailList
                              {data}
                              (tailList
                                 {data}
                                 (sndPair
                                    {integer}
                                    {list data}
                                    (unConstrData
                                       (headList
                                          {data}
                                          (sndPair
                                             {integer}
                                             {list data}
                                             (unConstrData r_ctx))))))))))))
      !wdrlAtZero : data
        = fstPair {data} {data} (headList {pair data data} wdrl)
      !rest : list (pair data data) = tailList {pair data data} wdrl
      !wdrlAtOne : data = fstPair {data} {data} (headList {pair data data} rest)
    in
    Bool_match
      (case Bool (equalsData r_stake_cred wdrlAtZero) [False, True])
      {all dead. Unit}
      (/\dead -> Unit)
      (/\dead ->
         Bool_match
           (case Bool (equalsData r_stake_cred wdrlAtOne) [False, True])
           {all dead. Unit}
           (/\dead -> Unit)
           (/\dead -> lookForCred rest)
           {all dead. dead})
      {all dead. dead}
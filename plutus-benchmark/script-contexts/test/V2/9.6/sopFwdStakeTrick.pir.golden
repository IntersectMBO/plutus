letrec
  data (List :: * -> *) a | List_match where
    Nil : List a
    Cons : a -> List a -> List a
in
letrec
  !go : list data -> List bytestring
    = \(xs : list data) ->
        case
          (List bytestring)
          xs
          [ (Nil {bytestring})
          , (\(x : data) (xs : list data) ->
               Cons {bytestring} (unBData x) (go xs)) ]
in
let
  data Bool | Bool_match where
    True : Bool
    False : Bool
  data Credential | Credential_match where
    PubKeyCredential : bytestring -> Credential
    ScriptCredential : bytestring -> Credential
  data Unit | Unit_match where
    Unit : Unit
  !traceError : all a. string -> a
    = /\a ->
        \(str : string) -> let !x : Unit = trace {Unit} str Unit in error {a}
  !`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData` : data -> Credential
    = \(d : data) ->
        let
          !tup : pair integer (list data) = unConstrData d
          !index : integer = fstPair {integer} {list data} tup
          !args : list data = sndPair {integer} {list data} tup
        in
        Bool_match
          (case Bool (equalsInteger 0 index) [False, True])
          {all dead. Credential}
          (/\dead -> PubKeyCredential (unBData (headList {data} args)))
          (/\dead ->
             Bool_match
               (case Bool (equalsInteger 1 index) [False, True])
               {all dead. Credential}
               (/\dead -> ScriptCredential (unBData (headList {data} args)))
               (/\dead -> traceError {Credential} "PT1")
               {all dead. dead})
          {all dead. dead}
  data StakingCredential | StakingCredential_match where
    StakingHash : Credential -> StakingCredential
    StakingPtr : integer -> integer -> integer -> StakingCredential
  !`$fUnsafeFromDataStakingCredential_$cunsafeFromBuiltinData` :
     data -> StakingCredential
    = \(d : data) ->
        let
          !tup : pair integer (list data) = unConstrData d
          !index : integer = fstPair {integer} {list data} tup
          !args : list data = sndPair {integer} {list data} tup
        in
        Bool_match
          (case Bool (equalsInteger 0 index) [False, True])
          {all dead. StakingCredential}
          (/\dead ->
             StakingHash
               (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                  (headList {data} args)))
          (/\dead ->
             Bool_match
               (case Bool (equalsInteger 1 index) [False, True])
               {all dead. StakingCredential}
               (/\dead ->
                  let
                    !l : list data = tailList {data} args
                  in
                  StakingPtr
                    (unIData (headList {data} args))
                    (unIData (headList {data} l))
                    (unIData (headList {data} (tailList {data} l))))
               (/\dead -> traceError {StakingCredential} "PT1")
               {all dead. dead})
          {all dead. dead}
  data DCert | DCert_match where
    DCertDelegDeRegKey : StakingCredential -> DCert
    DCertDelegDelegate : StakingCredential -> bytestring -> DCert
    DCertDelegRegKey : StakingCredential -> DCert
    DCertGenesis : DCert
    DCertMir : DCert
    DCertPoolRegister : bytestring -> bytestring -> DCert
    DCertPoolRetire : bytestring -> integer -> DCert
  !`$fUnsafeFromDataDCert_$cunsafeFromBuiltinData` :
     data -> DCert
    = \(d : data) ->
        let
          !tup : pair integer (list data) = unConstrData d
          !index : integer = fstPair {integer} {list data} tup
          !args : list data = sndPair {integer} {list data} tup
        in
        Bool_match
          (case Bool (equalsInteger 0 index) [False, True])
          {all dead. DCert}
          (/\dead ->
             DCertDelegRegKey
               (`$fUnsafeFromDataStakingCredential_$cunsafeFromBuiltinData`
                  (headList {data} args)))
          (/\dead ->
             Bool_match
               (case Bool (equalsInteger 1 index) [False, True])
               {all dead. DCert}
               (/\dead ->
                  DCertDelegDeRegKey
                    (`$fUnsafeFromDataStakingCredential_$cunsafeFromBuiltinData`
                       (headList {data} args)))
               (/\dead ->
                  Bool_match
                    (case Bool (equalsInteger 2 index) [False, True])
                    {all dead. DCert}
                    (/\dead ->
                       DCertDelegDelegate
                         (`$fUnsafeFromDataStakingCredential_$cunsafeFromBuiltinData`
                            (headList {data} args))
                         (unBData (headList {data} (tailList {data} args))))
                    (/\dead ->
                       Bool_match
                         (case Bool (equalsInteger 3 index) [False, True])
                         {all dead. DCert}
                         (/\dead ->
                            DCertPoolRegister
                              (unBData (headList {data} args))
                              (unBData
                                 (headList {data} (tailList {data} args))))
                         (/\dead ->
                            Bool_match
                              (case Bool (equalsInteger 4 index) [False, True])
                              {all dead. DCert}
                              (/\dead ->
                                 DCertPoolRetire
                                   (unBData (headList {data} args))
                                   (unIData
                                      (headList {data} (tailList {data} args))))
                              (/\dead ->
                                 Bool_match
                                   (case
                                      Bool
                                      (equalsInteger 5 index)
                                      [False, True])
                                   {all dead. DCert}
                                   (/\dead -> DCertGenesis)
                                   (/\dead ->
                                      Bool_match
                                        (case
                                           Bool
                                           (equalsInteger 6 index)
                                           [False, True])
                                        {all dead. DCert}
                                        (/\dead -> DCertMir)
                                        (/\dead -> traceError {DCert} "PT1")
                                        {all dead. dead})
                                   {all dead. dead})
                              {all dead. dead})
                         {all dead. dead})
                    {all dead. dead})
               {all dead. dead})
          {all dead. dead}
in
letrec
  !go : list data -> List DCert
    = \(xs : list data) ->
        case
          (List DCert)
          xs
          [ (Nil {DCert})
          , (\(x : data) (xs : list data) ->
               Cons
                 {DCert}
                 (`$fUnsafeFromDataDCert_$cunsafeFromBuiltinData` x)
                 (go xs)) ]
in
let
  data (Maybe :: * -> *) a | Maybe_match where
    Just : a -> Maybe a
    Nothing : Maybe a
  !`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData` :
     all a. (\a -> data -> a) a -> data -> Maybe a
    = /\a ->
        \(`$dUnsafeFromData` : (\a -> data -> a) a) (d : data) ->
          let
            !tup : pair integer (list data) = unConstrData d
            !index : integer = fstPair {integer} {list data} tup
            !args : list data = sndPair {integer} {list data} tup
          in
          Bool_match
            (case Bool (equalsInteger 1 index) [False, True])
            {all dead. Maybe a}
            (/\dead -> Nothing {a})
            (/\dead ->
               Bool_match
                 (case Bool (equalsInteger 0 index) [False, True])
                 {all dead. Maybe a}
                 (/\dead ->
                    Just {a} (`$dUnsafeFromData` (headList {data} args)))
                 (/\dead -> traceError {Maybe a} "PT1")
                 {all dead. dead})
            {all dead. dead}
  data (Tuple2 :: * -> * -> *) a b | Tuple2_match where
    Tuple2 : a -> b -> Tuple2 a b
  !`$fUnsafeFromDataMap_$cunsafeFromBuiltinData` :
     all k v.
       (\a -> data -> a) k ->
       (\a -> data -> a) v ->
       data ->
       (\k v -> List (Tuple2 k v)) k v
    = /\k v ->
        \(`$dUnsafeFromData` : (\a -> data -> a) k)
         (`$dUnsafeFromData` : (\a -> data -> a) v) ->
          letrec
            !go : list (pair data data) -> List (Tuple2 k v)
              = \(xs : list (pair data data)) ->
                  case
                    (List (Tuple2 k v))
                    xs
                    [ (Nil {Tuple2 k v})
                    , (\(tup : pair data data) (tups : list (pair data data)) ->
                         Cons
                           {Tuple2 k v}
                           (Tuple2
                              {k}
                              {v}
                              (`$dUnsafeFromData` (fstPair {data} {data} tup))
                              (`$dUnsafeFromData` (sndPair {data} {data} tup)))
                           (go tups)) ]
          in
          \(d : data) -> go (unMapData d)
  ~`$fUnsafeFromDataValue` :
     data -> (\k v -> List (Tuple2 k v)) bytestring integer
    = `$fUnsafeFromDataMap_$cunsafeFromBuiltinData`
        {bytestring}
        {integer}
        unBData
        unIData
  data Address | Address_match where
    Address : Credential -> Maybe StakingCredential -> Address
  data OutputDatum | OutputDatum_match where
    NoOutputDatum : OutputDatum
    OutputDatum : data -> OutputDatum
    OutputDatumHash : bytestring -> OutputDatum
  data TxOut | TxOut_match where
    TxOut :
      Address ->
      (\k v -> List (Tuple2 k v))
        bytestring
        ((\k v -> List (Tuple2 k v)) bytestring integer) ->
      OutputDatum ->
      Maybe bytestring ->
      TxOut
  !`$fUnsafeFromDataTxOut_$cunsafeFromBuiltinData` :
     data -> TxOut
    = \(eta : data) ->
        let
          !tup : pair integer (list data) = unConstrData eta
          !index : integer = fstPair {integer} {list data} tup
          !args : list data = sndPair {integer} {list data} tup
        in
        Bool_match
          (case Bool (equalsInteger 0 index) [False, True])
          {all dead. TxOut}
          (/\dead ->
             let
               !l : list data = tailList {data} args
               !l : list data = tailList {data} l
             in
             TxOut
               (let
                 !tup : pair integer (list data)
                   = unConstrData (headList {data} args)
                 !index : integer = fstPair {integer} {list data} tup
                 !args : list data = sndPair {integer} {list data} tup
               in
               Bool_match
                 (case Bool (equalsInteger 0 index) [False, True])
                 {all dead. Address}
                 (/\dead ->
                    Address
                      (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                         (headList {data} args))
                      (`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                         {StakingCredential}
                         `$fUnsafeFromDataStakingCredential_$cunsafeFromBuiltinData`
                         (headList {data} (tailList {data} args))))
                 (/\dead -> traceError {Address} "PT1")
                 {all dead. dead})
               (`$fUnsafeFromDataMap_$cunsafeFromBuiltinData`
                  {bytestring}
                  {(\k v -> List (Tuple2 k v)) bytestring integer}
                  unBData
                  `$fUnsafeFromDataValue`
                  (headList {data} l))
               (let
                 !tup : pair integer (list data)
                   = unConstrData (headList {data} l)
                 !index : integer = fstPair {integer} {list data} tup
                 !args : list data = sndPair {integer} {list data} tup
               in
               Bool_match
                 (case Bool (equalsInteger 0 index) [False, True])
                 {all dead. OutputDatum}
                 (/\dead -> NoOutputDatum)
                 (/\dead ->
                    Bool_match
                      (case Bool (equalsInteger 1 index) [False, True])
                      {all dead. OutputDatum}
                      (/\dead ->
                         OutputDatumHash (unBData (headList {data} args)))
                      (/\dead ->
                         Bool_match
                           (case Bool (equalsInteger 2 index) [False, True])
                           {all dead. OutputDatum}
                           (/\dead -> OutputDatum (headList {data} args))
                           (/\dead -> traceError {OutputDatum} "PT1")
                           {all dead. dead})
                      {all dead. dead})
                 {all dead. dead})
               (`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                  {bytestring}
                  unBData
                  (headList {data} (tailList {data} l))))
          (/\dead -> traceError {TxOut} "PT1")
          {all dead. dead}
in
letrec
  !go : list data -> List TxOut
    = \(xs : list data) ->
        case
          (List TxOut)
          xs
          [ (Nil {TxOut})
          , (\(x : data) (xs : list data) ->
               Cons
                 {TxOut}
                 (`$fUnsafeFromDataTxOut_$cunsafeFromBuiltinData` x)
                 (go xs)) ]
in
let
  !`$fUnsafeFromDataTxId_$cunsafeFromBuiltinData` : data -> bytestring
    = \(d : data) ->
        let
          !tup : pair integer (list data) = unConstrData d
          !index : integer = fstPair {integer} {list data} tup
          !args : list data = sndPair {integer} {list data} tup
        in
        Bool_match
          (case Bool (equalsInteger 0 index) [False, True])
          {all dead. bytestring}
          (/\dead -> unBData (headList {data} args))
          (/\dead -> traceError {bytestring} "PT1")
          {all dead. dead}
  data TxOutRef | TxOutRef_match where
    TxOutRef : bytestring -> integer -> TxOutRef
  !`$fUnsafeFromDataTxOutRef_$cunsafeFromBuiltinData` : data -> TxOutRef
    = \(d : data) ->
        let
          !tup : pair integer (list data) = unConstrData d
          !index : integer = fstPair {integer} {list data} tup
          !args : list data = sndPair {integer} {list data} tup
        in
        Bool_match
          (case Bool (equalsInteger 0 index) [False, True])
          {all dead. TxOutRef}
          (/\dead ->
             TxOutRef
               (`$fUnsafeFromDataTxId_$cunsafeFromBuiltinData`
                  (headList {data} args))
               (unIData (headList {data} (tailList {data} args))))
          (/\dead -> traceError {TxOutRef} "PT1")
          {all dead. dead}
  data TxInInfo | TxInInfo_match where
    TxInInfo : TxOutRef -> TxOut -> TxInInfo
  !`$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData` : data -> TxInInfo
    = \(d : data) ->
        let
          !tup : pair integer (list data) = unConstrData d
          !index : integer = fstPair {integer} {list data} tup
          !args : list data = sndPair {integer} {list data} tup
        in
        Bool_match
          (case Bool (equalsInteger 0 index) [False, True])
          {all dead. TxInInfo}
          (/\dead ->
             TxInInfo
               (`$fUnsafeFromDataTxOutRef_$cunsafeFromBuiltinData`
                  (headList {data} args))
               (`$fUnsafeFromDataTxOut_$cunsafeFromBuiltinData`
                  (headList {data} (tailList {data} args))))
          (/\dead -> traceError {TxInInfo} "PT1")
          {all dead. dead}
in
letrec
  !go : list data -> List TxInInfo
    = \(xs : list data) ->
        case
          (List TxInInfo)
          xs
          [ (Nil {TxInInfo})
          , (\(x : data) (xs : list data) ->
               Cons
                 {TxInInfo}
                 (`$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData` x)
                 (go xs)) ]
in
letrec
  !go : list data -> List TxInInfo
    = \(xs : list data) ->
        case
          (List TxInInfo)
          xs
          [ (Nil {TxInInfo})
          , (\(x : data) (xs : list data) ->
               Cons
                 {TxInInfo}
                 (`$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData` x)
                 (go xs)) ]
in
let
  !`$fEqStakingCredential_$c==` : StakingCredential -> StakingCredential -> Bool
    = \(ds : StakingCredential) (ds : StakingCredential) ->
        StakingCredential_match
          ds
          {Bool}
          (\(l : Credential) ->
             StakingCredential_match
               ds
               {Bool}
               (\(r : Credential) ->
                  Credential_match
                    l
                    {Bool}
                    (\(l : bytestring) ->
                       Credential_match
                         r
                         {Bool}
                         (\(r : bytestring) ->
                            case Bool (equalsByteString l r) [False, True])
                         (\(ipv : bytestring) -> False))
                    (\(a : bytestring) ->
                       Credential_match
                         r
                         {Bool}
                         (\(ipv : bytestring) -> False)
                         (\(a' : bytestring) ->
                            case Bool (equalsByteString a a') [False, True])))
               (\(ipv : integer) (ipv : integer) (ipv : integer) -> False))
          (\(a : integer) (b : integer) (c : integer) ->
             StakingCredential_match
               ds
               {Bool}
               (\(ipv : Credential) -> False)
               (\(a' : integer) (b' : integer) (c' : integer) ->
                  Bool_match
                    (case Bool (equalsInteger a a') [False, True])
                    {all dead. Bool}
                    (/\dead ->
                       Bool_match
                         (case Bool (equalsInteger b b') [False, True])
                         {all dead. Bool}
                         (/\dead ->
                            case Bool (equalsInteger c c') [False, True])
                         (/\dead -> False)
                         {all dead. dead})
                    (/\dead -> False)
                    {all dead. dead}))
  !`$fUnsafeFromDataBuiltinData_$cunsafeFromBuiltinData` : data -> data
    = \(d : data) -> d
  !`$fUnsafeFromDataBool_$cunsafeFromBuiltinData` : data -> Bool
    = \(d : data) ->
        let
          !tup : pair integer (list data) = unConstrData d
          !index : integer = fstPair {integer} {list data} tup
          !args : list data = sndPair {integer} {list data} tup
        in
        Bool_match
          (case Bool (equalsInteger 0 index) [False, True])
          {all dead. Bool}
          (/\dead -> False)
          (/\dead ->
             Bool_match
               (case Bool (equalsInteger 1 index) [False, True])
               {all dead. Bool}
               (/\dead -> True)
               (/\dead -> traceError {Bool} "PT1")
               {all dead. dead})
          {all dead. dead}
  data (Extended :: * -> *) a | Extended_match where
    Finite : a -> Extended a
    NegInf : Extended a
    PosInf : Extended a
  !`$fUnsafeFromDataExtended_$cunsafeFromBuiltinData` :
     all a. (\a -> data -> a) a -> data -> Extended a
    = /\a ->
        \(`$dUnsafeFromData` : (\a -> data -> a) a) (d : data) ->
          let
            !tup : pair integer (list data) = unConstrData d
            !index : integer = fstPair {integer} {list data} tup
            !args : list data = sndPair {integer} {list data} tup
          in
          Bool_match
            (case Bool (equalsInteger 0 index) [False, True])
            {all dead. Extended a}
            (/\dead -> NegInf {a})
            (/\dead ->
               Bool_match
                 (case Bool (equalsInteger 1 index) [False, True])
                 {all dead. Extended a}
                 (/\dead ->
                    Finite {a} (`$dUnsafeFromData` (headList {data} args)))
                 (/\dead ->
                    Bool_match
                      (case Bool (equalsInteger 2 index) [False, True])
                      {all dead. Extended a}
                      (/\dead -> PosInf {a})
                      (/\dead -> traceError {Extended a} "PT1")
                      {all dead. dead})
                 {all dead. dead})
            {all dead. dead}
  data ScriptPurpose | ScriptPurpose_match where
    Certifying : DCert -> ScriptPurpose
    Minting : bytestring -> ScriptPurpose
    Rewarding : StakingCredential -> ScriptPurpose
    Spending : TxOutRef -> ScriptPurpose
  !`$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData` :
     data -> ScriptPurpose
    = \(d : data) ->
        let
          !tup : pair integer (list data) = unConstrData d
          !index : integer = fstPair {integer} {list data} tup
          !args : list data = sndPair {integer} {list data} tup
        in
        Bool_match
          (case Bool (equalsInteger 0 index) [False, True])
          {all dead. ScriptPurpose}
          (/\dead -> Minting (unBData (headList {data} args)))
          (/\dead ->
             Bool_match
               (case Bool (equalsInteger 1 index) [False, True])
               {all dead. ScriptPurpose}
               (/\dead ->
                  Spending
                    (`$fUnsafeFromDataTxOutRef_$cunsafeFromBuiltinData`
                       (headList {data} args)))
               (/\dead ->
                  Bool_match
                    (case Bool (equalsInteger 2 index) [False, True])
                    {all dead. ScriptPurpose}
                    (/\dead ->
                       Rewarding
                         (`$fUnsafeFromDataStakingCredential_$cunsafeFromBuiltinData`
                            (headList {data} args)))
                    (/\dead ->
                       Bool_match
                         (case Bool (equalsInteger 3 index) [False, True])
                         {all dead. ScriptPurpose}
                         (/\dead ->
                            Certifying
                              (`$fUnsafeFromDataDCert_$cunsafeFromBuiltinData`
                                 (headList {data} args)))
                         (/\dead -> traceError {ScriptPurpose} "PT1")
                         {all dead. dead})
                    {all dead. dead})
               {all dead. dead})
          {all dead. dead}
  data (LowerBound :: * -> *) a | LowerBound_match where
    LowerBound : Extended a -> Bool -> LowerBound a
  data (UpperBound :: * -> *) a | UpperBound_match where
    UpperBound : Extended a -> Bool -> UpperBound a
  data (Interval :: * -> *) a | Interval_match where
    Interval : LowerBound a -> UpperBound a -> Interval a
  data TxInfo | TxInfo_match where
    TxInfo :
      List TxInInfo ->
      List TxInInfo ->
      List TxOut ->
      (\k v -> List (Tuple2 k v))
        bytestring
        ((\k v -> List (Tuple2 k v)) bytestring integer) ->
      (\k v -> List (Tuple2 k v))
        bytestring
        ((\k v -> List (Tuple2 k v)) bytestring integer) ->
      List DCert ->
      (\k v -> List (Tuple2 k v)) StakingCredential integer ->
      Interval integer ->
      List bytestring ->
      (\k v -> List (Tuple2 k v)) ScriptPurpose data ->
      (\k v -> List (Tuple2 k v)) bytestring data ->
      bytestring ->
      TxInfo
  data ScriptContext | ScriptContext_match where
    ScriptContext : TxInfo -> ScriptPurpose -> ScriptContext
in
\(obsScriptCred : data)
 (ctx : data) ->
  ScriptContext_match
    (let
      !tup : pair integer (list data) = unConstrData ctx
      !index : integer = fstPair {integer} {list data} tup
      !args : list data = sndPair {integer} {list data} tup
    in
    Bool_match
      (case Bool (equalsInteger 0 index) [False, True])
      {all dead. ScriptContext}
      (/\dead ->
         ScriptContext
           (let
             !tup : pair integer (list data)
               = unConstrData (headList {data} args)
             !index : integer = fstPair {integer} {list data} tup
             !args : list data = sndPair {integer} {list data} tup
           in
           Bool_match
             (case Bool (equalsInteger 0 index) [False, True])
             {all dead. TxInfo}
             (/\dead ->
                let
                  !l : list data = tailList {data} args
                  !l : list data = tailList {data} l
                  !l : list data = tailList {data} l
                  !l : list data = tailList {data} l
                  !l : list data = tailList {data} l
                  !l : list data = tailList {data} l
                  !l : list data = tailList {data} l
                  !l : list data = tailList {data} l
                  !l : list data = tailList {data} l
                  !l : list data = tailList {data} l
                in
                TxInfo
                  (let
                    !d : data = headList {data} args
                  in
                  go (unListData d))
                  (let
                    !d : data = headList {data} l
                  in
                  go (unListData d))
                  (let
                    !d : data = headList {data} l
                  in
                  go (unListData d))
                  (`$fUnsafeFromDataMap_$cunsafeFromBuiltinData`
                     {bytestring}
                     {(\k v -> List (Tuple2 k v)) bytestring integer}
                     unBData
                     `$fUnsafeFromDataValue`
                     (headList {data} l))
                  (`$fUnsafeFromDataMap_$cunsafeFromBuiltinData`
                     {bytestring}
                     {(\k v -> List (Tuple2 k v)) bytestring integer}
                     unBData
                     `$fUnsafeFromDataValue`
                     (headList {data} l))
                  (let
                    !d : data = headList {data} l
                  in
                  go (unListData d))
                  (`$fUnsafeFromDataMap_$cunsafeFromBuiltinData`
                     {StakingCredential}
                     {integer}
                     `$fUnsafeFromDataStakingCredential_$cunsafeFromBuiltinData`
                     unIData
                     (headList {data} l))
                  (let
                    !tup : pair integer (list data)
                      = unConstrData (headList {data} l)
                    !index : integer = fstPair {integer} {list data} tup
                    !args : list data = sndPair {integer} {list data} tup
                  in
                  Bool_match
                    (case Bool (equalsInteger 0 index) [False, True])
                    {all dead. Interval integer}
                    (/\dead ->
                       Interval
                         {integer}
                         (let
                           !tup : pair integer (list data)
                             = unConstrData (headList {data} args)
                           !index : integer = fstPair {integer} {list data} tup
                           !args : list data = sndPair {integer} {list data} tup
                         in
                         Bool_match
                           (case Bool (equalsInteger 0 index) [False, True])
                           {all dead. LowerBound integer}
                           (/\dead ->
                              LowerBound
                                {integer}
                                (`$fUnsafeFromDataExtended_$cunsafeFromBuiltinData`
                                   {integer}
                                   unIData
                                   (headList {data} args))
                                (`$fUnsafeFromDataBool_$cunsafeFromBuiltinData`
                                   (headList {data} (tailList {data} args))))
                           (/\dead -> traceError {LowerBound integer} "PT1")
                           {all dead. dead})
                         (let
                           !tup : pair integer (list data)
                             = unConstrData
                                 (headList {data} (tailList {data} args))
                           !index : integer = fstPair {integer} {list data} tup
                           !args : list data = sndPair {integer} {list data} tup
                         in
                         Bool_match
                           (case Bool (equalsInteger 0 index) [False, True])
                           {all dead. UpperBound integer}
                           (/\dead ->
                              UpperBound
                                {integer}
                                (`$fUnsafeFromDataExtended_$cunsafeFromBuiltinData`
                                   {integer}
                                   unIData
                                   (headList {data} args))
                                (`$fUnsafeFromDataBool_$cunsafeFromBuiltinData`
                                   (headList {data} (tailList {data} args))))
                           (/\dead -> traceError {UpperBound integer} "PT1")
                           {all dead. dead}))
                    (/\dead -> traceError {Interval integer} "PT1")
                    {all dead. dead})
                  (let
                    !d : data = headList {data} l
                  in
                  go (unListData d))
                  (`$fUnsafeFromDataMap_$cunsafeFromBuiltinData`
                     {ScriptPurpose}
                     {data}
                     `$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData`
                     `$fUnsafeFromDataBuiltinData_$cunsafeFromBuiltinData`
                     (headList {data} l))
                  (`$fUnsafeFromDataMap_$cunsafeFromBuiltinData`
                     {bytestring}
                     {data}
                     unBData
                     `$fUnsafeFromDataBuiltinData_$cunsafeFromBuiltinData`
                     (headList {data} l))
                  (`$fUnsafeFromDataTxId_$cunsafeFromBuiltinData`
                     (headList {data} (tailList {data} l))))
             (/\dead -> traceError {TxInfo} "PT1")
             {all dead. dead})
           (`$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData`
              (headList {data} (tailList {data} args))))
      (/\dead -> traceError {ScriptContext} "PT1")
      {all dead. dead})
    {Unit}
    (\(ds : TxInfo)
      (ds : ScriptPurpose) ->
       TxInfo_match
         ds
         {Unit}
         (\(ds : List TxInInfo)
           (ds : List TxInInfo)
           (ds : List TxOut)
           (ds :
              (\k v -> List (Tuple2 k v))
                bytestring
                ((\k v -> List (Tuple2 k v)) bytestring integer))
           (ds :
              (\k v -> List (Tuple2 k v))
                bytestring
                ((\k v -> List (Tuple2 k v)) bytestring integer))
           (ds : List DCert)
           (ds : (\k v -> List (Tuple2 k v)) StakingCredential integer) ->
            let
              !`$j` :
                 StakingCredential -> integer -> Unit
                = \(a : StakingCredential) ->
                    let
                      !`$j` :
                         StakingCredential -> integer -> Unit
                        = \(a : StakingCredential)
                           (ds : integer) ->
                            let
                              !obsScriptCred' :
                                 StakingCredential
                                = `$fUnsafeFromDataStakingCredential_$cunsafeFromBuiltinData`
                                    obsScriptCred
                            in
                            letrec
                              !go :
                                 List (Tuple2 StakingCredential integer) -> Unit
                                = \(ds :
                                      List
                                        (Tuple2 StakingCredential integer)) ->
                                    List_match
                                      {Tuple2 StakingCredential integer}
                                      ds
                                      {all dead. Unit}
                                      (/\dead ->
                                         let
                                           !x : Unit
                                             = trace {Unit} "not found" Unit
                                         in
                                         error {Unit})
                                      (\(ds : Tuple2 StakingCredential integer)
                                        (xs' :
                                           List
                                             (Tuple2
                                                StakingCredential
                                                integer)) ->
                                         /\dead ->
                                           Tuple2_match
                                             {StakingCredential}
                                             {integer}
                                             ds
                                             {Unit}
                                             (\(c' : StakingCredential)
                                               (i : integer) ->
                                                Bool_match
                                                  (`$fEqStakingCredential_$c==`
                                                     c'
                                                     obsScriptCred')
                                                  {all dead. Unit}
                                                  (/\dead -> Unit)
                                                  (/\dead -> go xs')
                                                  {all dead. dead}))
                                      {all dead. dead}
                            in
                            Bool_match
                              (`$fEqStakingCredential_$c==` obsScriptCred' a)
                              {all dead. Unit}
                              (/\dead -> Unit)
                              (/\dead ->
                                 Bool_match
                                   (`$fEqStakingCredential_$c==`
                                      obsScriptCred'
                                      a)
                                   {all dead. Unit}
                                   (/\dead -> Unit)
                                   (/\dead -> go ds)
                                   {all dead. dead})
                              {all dead. dead}
                      !`$j` : List (Tuple2 StakingCredential integer) -> Unit
                        = \(rest : List (Tuple2 StakingCredential integer)) ->
                            List_match
                              {Tuple2 StakingCredential integer}
                              rest
                              {all dead. Unit}
                              (/\dead ->
                                 let
                                   !x : Unit = trace {Unit} "PT8" Unit
                                 in
                                 Tuple2_match
                                   {StakingCredential}
                                   {integer}
                                   (error {Tuple2 StakingCredential integer})
                                   {Unit}
                                   (\(a : StakingCredential) (ds : integer) ->
                                      `$j` a ds))
                              (\(x : Tuple2 StakingCredential integer)
                                (ds :
                                   List (Tuple2 StakingCredential integer)) ->
                                 /\dead ->
                                   Tuple2_match
                                     {StakingCredential}
                                     {integer}
                                     x
                                     {Unit}
                                     (\(a : StakingCredential) (ds : integer) ->
                                        `$j` a ds))
                              {all dead. dead}
                    in
                    \(ds : integer) ->
                      List_match
                        {Tuple2 StakingCredential integer}
                        ds
                        {all dead. Unit}
                        (/\dead ->
                           `$j`
                             (traceError
                                {List (Tuple2 StakingCredential integer)}
                                "PT9"))
                        (\(ds : Tuple2 StakingCredential integer)
                          (as : List (Tuple2 StakingCredential integer)) ->
                           /\dead -> `$j` as)
                        {all dead. dead}
            in
            \(ds : Interval integer)
             (ds : List bytestring)
             (ds : (\k v -> List (Tuple2 k v)) ScriptPurpose data)
             (ds : (\k v -> List (Tuple2 k v)) bytestring data)
             (ds : bytestring) ->
              List_match
                {Tuple2 StakingCredential integer}
                ds
                {all dead. Unit}
                (/\dead ->
                   let
                     !x : Unit = trace {Unit} "PT8" Unit
                   in
                   Tuple2_match
                     {StakingCredential}
                     {integer}
                     (error {Tuple2 StakingCredential integer})
                     {Unit}
                     (\(a : StakingCredential) (ds : integer) -> `$j` a ds))
                (\(x : Tuple2 StakingCredential integer)
                  (ds : List (Tuple2 StakingCredential integer)) ->
                   /\dead ->
                     Tuple2_match
                       {StakingCredential}
                       {integer}
                       x
                       {Unit}
                       (\(a : StakingCredential) (ds : integer) -> `$j` a ds))
                {all dead. dead}))
(let
    !`$fUnsafeFromDataBuiltinData_$cunsafeFromBuiltinData` : data -> data
      = \(d : data) -> d
    data (Extended :: * -> *) a | Extended_match where
      Finite : a -> Extended a
      NegInf : Extended a
      PosInf : Extended a
    !`$fUnsafeFromDataExtended_$cunsafeFromBuiltinData` :
       all a. (\a -> data -> a) a -> data -> Extended a
      = /\a ->
          \(`$dUnsafeFromData` : (\a -> data -> a) a) (d : data) ->
            case
              (Extended a)
              d
              [ (NegInf {a})
              , (\(ds : data) -> Finite {a} (`$dUnsafeFromData` ds))
              , (PosInf {a}) ]
  in
  letrec
    data (List :: * -> *) a | List_match where
      Nil : List a
      Cons : a -> List a -> List a
  in
  let
    !`$fUnsafeFromDataList_$cunsafeFromBuiltinData` :
       all a. (\a -> data -> a) a -> data -> List a
      = /\a ->
          \(`$dUnsafeFromData` : (\a -> data -> a) a) ->
            letrec
              !go : list data -> List a
                = \(xs : list data) ->
                    case
                      (List a)
                      xs
                      [ (\(x : data) (xs : list data) ->
                           Cons {a} (`$dUnsafeFromData` x) (go xs))
                      , (Nil {a}) ]
            in
            \(d : data) -> go (unListData d)
    data Credential | Credential_match where
      PubKeyCredential : bytestring -> Credential
      ScriptCredential : bytestring -> Credential
    !`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData` : data -> Credential
      = \(d : data) ->
          case
            Credential
            d
            [ (\(ds : data) -> PubKeyCredential (unBData ds))
            , (\(ds : data) -> ScriptCredential (unBData ds)) ]
    data StakingCredential | StakingCredential_match where
      StakingHash : Credential -> StakingCredential
      StakingPtr : integer -> integer -> integer -> StakingCredential
    !`$fUnsafeFromDataStakingCredential_$cunsafeFromBuiltinData` :
       data -> StakingCredential
      = \(d : data) ->
          case
            StakingCredential
            d
            [ (\(ds : data) ->
                 StakingHash
                   (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData` ds))
            , (\(ds : data) (ds : data) (ds : data) ->
                 StakingPtr (unIData ds) (unIData ds) (unIData ds)) ]
    data DCert | DCert_match where
      DCertDelegDeRegKey : StakingCredential -> DCert
      DCertDelegDelegate : StakingCredential -> bytestring -> DCert
      DCertDelegRegKey : StakingCredential -> DCert
      DCertGenesis : DCert
      DCertMir : DCert
      DCertPoolRegister : bytestring -> bytestring -> DCert
      DCertPoolRetire : bytestring -> integer -> DCert
    !`$fUnsafeFromDataDCert_$cunsafeFromBuiltinData` : data -> DCert
      = \(d : data) ->
          case
            DCert
            d
            [ (\(ds : data) ->
                 DCertDelegRegKey
                   (`$fUnsafeFromDataStakingCredential_$cunsafeFromBuiltinData`
                      ds))
            , (\(ds : data) ->
                 DCertDelegDeRegKey
                   (`$fUnsafeFromDataStakingCredential_$cunsafeFromBuiltinData`
                      ds))
            , (\(ds : data) (ds : data) ->
                 DCertDelegDelegate
                   (`$fUnsafeFromDataStakingCredential_$cunsafeFromBuiltinData`
                      ds)
                   (unBData ds))
            , (\(ds : data) (ds : data) ->
                 DCertPoolRegister (unBData ds) (unBData ds))
            , (\(ds : data) (ds : data) ->
                 DCertPoolRetire (unBData ds) (unIData ds))
            , DCertGenesis
            , DCertMir ]
    data TxOutRef | TxOutRef_match where
      TxOutRef : bytestring -> integer -> TxOutRef
    !`$fUnsafeFromDataTxOutRef_$cunsafeFromBuiltinData` : data -> TxOutRef
      = \(d : data) ->
          case
            TxOutRef
            d
            [ (\(ds : data) (ds : data) ->
                 TxOutRef
                   (case bytestring ds [(\(ds : data) -> unBData ds)])
                   (unIData ds)) ]
    data ScriptPurpose | ScriptPurpose_match where
      Certifying : DCert -> ScriptPurpose
      Minting : bytestring -> ScriptPurpose
      Rewarding : StakingCredential -> ScriptPurpose
      Spending : TxOutRef -> ScriptPurpose
    !`$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData` :
       data -> ScriptPurpose
      = \(d : data) ->
          case
            ScriptPurpose
            d
            [ (\(ds : data) -> Minting (unBData ds))
            , (\(ds : data) ->
                 Spending
                   (`$fUnsafeFromDataTxOutRef_$cunsafeFromBuiltinData` ds))
            , (\(ds : data) ->
                 Rewarding
                   (`$fUnsafeFromDataStakingCredential_$cunsafeFromBuiltinData`
                      ds))
            , (\(ds : data) ->
                 Certifying
                   (`$fUnsafeFromDataDCert_$cunsafeFromBuiltinData` ds)) ]
    data (Maybe :: * -> *) a | Maybe_match where
      Just : a -> Maybe a
      Nothing : Maybe a
    !`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData` :
       all a. (\a -> data -> a) a -> data -> Maybe a
      = /\a ->
          \(`$dUnsafeFromData` : (\a -> data -> a) a) (d : data) ->
            case
              (Maybe a)
              d
              [ (\(ds : data) -> Just {a} (`$dUnsafeFromData` ds))
              , (Nothing {a}) ]
    data (Tuple2 :: * -> * -> *) a b | Tuple2_match where
      Tuple2 : a -> b -> Tuple2 a b
    !`$fUnsafeFromDataMap_$cunsafeFromBuiltinData` :
       all k v.
         (\a -> data -> a) k ->
         (\a -> data -> a) v ->
         data ->
         (\k v -> List (Tuple2 k v)) k v
      = /\k v ->
          \(`$dUnsafeFromData` : (\a -> data -> a) k)
           (`$dUnsafeFromData` : (\a -> data -> a) v) ->
            letrec
              !go : list (pair data data) -> List (Tuple2 k v)
                = \(xs : list (pair data data)) ->
                    case
                      (List (Tuple2 k v))
                      xs
                      [ (\(tup : pair data data)
                          (tups : list (pair data data)) ->
                           Cons
                             {Tuple2 k v}
                             (Tuple2
                                {k}
                                {v}
                                (`$dUnsafeFromData`
                                   (case
                                      data
                                      tup
                                      [(\(l : data) (r : data) -> l)]))
                                (`$dUnsafeFromData`
                                   (case
                                      data
                                      tup
                                      [(\(l : data) (r : data) -> r)])))
                             (go tups))
                      , (Nil {Tuple2 k v}) ]
            in
            \(d : data) -> go (unMapData d)
    ~`$fUnsafeFromDataValue` :
       data -> (\k v -> List (Tuple2 k v)) bytestring integer
      = `$fUnsafeFromDataMap_$cunsafeFromBuiltinData`
          {bytestring}
          {integer}
          unBData
          unIData
    data Address | Address_match where
      Address : Credential -> Maybe StakingCredential -> Address
    data OutputDatum | OutputDatum_match where
      NoOutputDatum : OutputDatum
      OutputDatum : data -> OutputDatum
      OutputDatumHash : bytestring -> OutputDatum
    data TxOut | TxOut_match where
      TxOut :
        Address ->
        (\k v -> List (Tuple2 k v))
          bytestring
          ((\k v -> List (Tuple2 k v)) bytestring integer) ->
        OutputDatum ->
        Maybe bytestring ->
        TxOut
    !`$fUnsafeFromDataTxOut_$cunsafeFromBuiltinData` :
       data -> TxOut
      = \(eta : data) ->
          case
            TxOut
            eta
            [ (\(ds : data)
                (ds : data)
                (ds : data)
                (ds : data) ->
                 TxOut
                   (case
                      Address
                      ds
                      [ (\(ds : data)
                          (ds : data) ->
                           Address
                             (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                                ds)
                             (`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                                {StakingCredential}
                                `$fUnsafeFromDataStakingCredential_$cunsafeFromBuiltinData`
                                ds)) ])
                   (`$fUnsafeFromDataMap_$cunsafeFromBuiltinData`
                      {bytestring}
                      {(\k v -> List (Tuple2 k v)) bytestring integer}
                      unBData
                      `$fUnsafeFromDataValue`
                      ds)
                   (case
                      OutputDatum
                      ds
                      [ NoOutputDatum
                      , (\(ds : data) -> OutputDatumHash (unBData ds))
                      , (\(ds : data) -> OutputDatum ds) ])
                   (`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                      {bytestring}
                      unBData
                      ds)) ]
    data TxInInfo | TxInInfo_match where
      TxInInfo : TxOutRef -> TxOut -> TxInInfo
    !`$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData` : data -> TxInInfo
      = \(d : data) ->
          case
            TxInInfo
            d
            [ (\(ds : data) (ds : data) ->
                 TxInInfo
                   (`$fUnsafeFromDataTxOutRef_$cunsafeFromBuiltinData` ds)
                   (`$fUnsafeFromDataTxOut_$cunsafeFromBuiltinData` ds)) ]
    data Unit | Unit_match where
      Unit : Unit
    data (LowerBound :: * -> *) a | LowerBound_match where
      LowerBound : Extended a -> bool -> LowerBound a
    data (UpperBound :: * -> *) a | UpperBound_match where
      UpperBound : Extended a -> bool -> UpperBound a
    data (Interval :: * -> *) a | Interval_match where
      Interval : LowerBound a -> UpperBound a -> Interval a
    data TxInfo | TxInfo_match where
      TxInfo :
        List TxInInfo ->
        List TxInInfo ->
        List TxOut ->
        (\k v -> List (Tuple2 k v))
          bytestring
          ((\k v -> List (Tuple2 k v)) bytestring integer) ->
        (\k v -> List (Tuple2 k v))
          bytestring
          ((\k v -> List (Tuple2 k v)) bytestring integer) ->
        List DCert ->
        (\k v -> List (Tuple2 k v)) StakingCredential integer ->
        Interval integer ->
        List bytestring ->
        (\k v -> List (Tuple2 k v)) ScriptPurpose data ->
        (\k v -> List (Tuple2 k v)) bytestring data ->
        bytestring ->
        TxInfo
    data ScriptContext | ScriptContext_match where
      ScriptContext : TxInfo -> ScriptPurpose -> ScriptContext
  in
  \(d : data) ->
    let
      !ds :
         ScriptContext
        = case
            ScriptContext
            d
            [ (\(ds : data)
                (ds : data) ->
                 ScriptContext
                   (case
                      TxInfo
                      ds
                      [ (\(ds : data)
                          (ds : data)
                          (ds : data)
                          (ds : data)
                          (ds : data)
                          (ds : data)
                          (ds : data)
                          (ds : data)
                          (ds : data)
                          (ds : data)
                          (ds : data)
                          (ds : data) ->
                           TxInfo
                             (`$fUnsafeFromDataList_$cunsafeFromBuiltinData`
                                {TxInInfo}
                                `$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData`
                                ds)
                             (`$fUnsafeFromDataList_$cunsafeFromBuiltinData`
                                {TxInInfo}
                                `$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData`
                                ds)
                             (`$fUnsafeFromDataList_$cunsafeFromBuiltinData`
                                {TxOut}
                                `$fUnsafeFromDataTxOut_$cunsafeFromBuiltinData`
                                ds)
                             (`$fUnsafeFromDataMap_$cunsafeFromBuiltinData`
                                {bytestring}
                                {(\k v -> List (Tuple2 k v)) bytestring integer}
                                unBData
                                `$fUnsafeFromDataValue`
                                ds)
                             (`$fUnsafeFromDataMap_$cunsafeFromBuiltinData`
                                {bytestring}
                                {(\k v -> List (Tuple2 k v)) bytestring integer}
                                unBData
                                `$fUnsafeFromDataValue`
                                ds)
                             (`$fUnsafeFromDataList_$cunsafeFromBuiltinData`
                                {DCert}
                                `$fUnsafeFromDataDCert_$cunsafeFromBuiltinData`
                                ds)
                             (`$fUnsafeFromDataMap_$cunsafeFromBuiltinData`
                                {StakingCredential}
                                {integer}
                                `$fUnsafeFromDataStakingCredential_$cunsafeFromBuiltinData`
                                unIData
                                ds)
                             (case
                                (Interval integer)
                                ds
                                [ (\(ds : data)
                                    (ds : data) ->
                                     Interval
                                       {integer}
                                       (case
                                          (LowerBound integer)
                                          ds
                                          [ (\(ds : data)
                                              (ds : data) ->
                                               LowerBound
                                                 {integer}
                                                 (`$fUnsafeFromDataExtended_$cunsafeFromBuiltinData`
                                                    {integer}
                                                    unIData
                                                    ds)
                                                 (case
                                                    bool
                                                    ds
                                                    [False, True])) ])
                                       (case
                                          (UpperBound integer)
                                          ds
                                          [ (\(ds : data)
                                              (ds : data) ->
                                               UpperBound
                                                 {integer}
                                                 (`$fUnsafeFromDataExtended_$cunsafeFromBuiltinData`
                                                    {integer}
                                                    unIData
                                                    ds)
                                                 (case
                                                    bool
                                                    ds
                                                    [False, True])) ])) ])
                             (`$fUnsafeFromDataList_$cunsafeFromBuiltinData`
                                {bytestring}
                                unBData
                                ds)
                             (`$fUnsafeFromDataMap_$cunsafeFromBuiltinData`
                                {ScriptPurpose}
                                {data}
                                `$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData`
                                `$fUnsafeFromDataBuiltinData_$cunsafeFromBuiltinData`
                                ds)
                             (`$fUnsafeFromDataMap_$cunsafeFromBuiltinData`
                                {bytestring}
                                {data}
                                unBData
                                `$fUnsafeFromDataBuiltinData_$cunsafeFromBuiltinData`
                                ds)
                             (case
                                bytestring
                                ds
                                [(\(ds : data) -> unBData ds)])) ])
                   (`$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData`
                      ds)) ]
    in
    Unit)
  (Constr 0
     [ Constr 0
         [ List []
         , List []
         , List
             [ Constr 0
                 [ Constr 0 [Constr 0 [B #], Constr 1 []]
                 , Map [(B #, Map [(B #, I 1)])]
                 , Constr 0 []
                 , Constr 1 [] ] ]
         , Map []
         , Map []
         , List []
         , Map []
         , Constr 0
             [ Constr 0 [Constr 0 [], Constr 1 []]
             , Constr 0 [Constr 2 [], Constr 1 []] ]
         , List []
         , Map []
         , Map []
         , Constr 0 [B #] ]
     , Constr 1 [Constr 0 [Constr 0 [B #], I 0]] ])
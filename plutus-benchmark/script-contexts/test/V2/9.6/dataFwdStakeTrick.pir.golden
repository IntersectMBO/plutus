let
  data Bool | Bool_match where
    True : Bool
    False : Bool
  data Unit | Unit_match where
    Unit : Unit
in
\(obsScriptCred : data) (ctx : data) ->
  let
    !ds : (\k a -> list (pair data data)) data integer
      = unMapData
          (headList
             {data}
             (tailList
                {data}
                (tailList
                   {data}
                   (tailList
                      {data}
                      (tailList
                         {data}
                         (tailList
                            {data}
                            (tailList
                               {data}
                               (case
                                  (list data)
                                  (unConstrData
                                     (headList
                                        {data}
                                        (case
                                           (list data)
                                           (unConstrData ctx)
                                           [ (\(l : integer) (r : list data) ->
                                                r) ])))
                                  [ (\(l : integer) (r : list data) ->
                                       r) ]))))))))
    !wdrlAtZero : data
      = case data (headList {pair data data} ds) [(\(l : data) (r : data) -> l)]
    !rest : list (pair data data) = tailList {pair data data} ds
    !wdrlAtOne : data
      = case
          data
          (headList {pair data data} rest)
          [(\(l : data) (r : data) -> l)]
  in
  Bool_match
    (case Bool (equalsData obsScriptCred wdrlAtZero) [False, True])
    {all dead. Unit}
    (/\dead -> Unit)
    (/\dead ->
       Bool_match
         (case Bool (equalsData obsScriptCred wdrlAtOne) [False, True])
         {all dead. Unit}
         (/\dead -> Unit)
         (/\dead ->
            Bool_match
              ((let
                   a = pair data data
                 in
                 \(p : a -> Bool) ->
                   letrec
                     !go : list a -> Bool
                       = \(xs : list a) ->
                           case
                             Bool
                             xs
                             [ False
                             , (\(x : a) (xs : list a) ->
                                  Bool_match
                                    (p x)
                                    {all dead. Bool}
                                    (/\dead -> True)
                                    (/\dead -> go xs)
                                    {all dead. dead}) ]
                   in
                   go)
                 (\(x : pair data data) ->
                    case
                      Bool
                      (equalsData
                         obsScriptCred
                         (case data x [(\(l : data) (r : data) -> l)]))
                      [False, True])
                 rest)
              {all dead. Unit}
              (/\dead -> Unit)
              (/\dead ->
                 let
                   !x : Unit = trace {Unit} "not found" Unit
                 in
                 error {Unit})
              {all dead. dead})
         {all dead. dead})
    {all dead. dead}
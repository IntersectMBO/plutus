let
  data Bool | Bool_match where
    True : Bool
    False : Bool
  data Unit | Unit_match where
    Unit : Unit
in
\(obsScriptCred : data) (ctx : data) ->
  let
    !ds : (\k a -> list (pair data data)) data integer
      = unMapData
          (headList
             {data}
             (tailList
                {data}
                (tailList
                   {data}
                   (tailList
                      {data}
                      (tailList
                         {data}
                         (tailList
                            {data}
                            (tailList
                               {data}
                               (sndPair
                                  {integer}
                                  {list data}
                                  (unConstrData
                                     (headList
                                        {data}
                                        (sndPair
                                           {integer}
                                           {list data}
                                           (unConstrData ctx))))))))))))
    !wdrlAtZero : data = fstPair {data} {data} (headList {pair data data} ds)
    !rest : list (pair data data) = tailList {pair data data} ds
    !wdrlAtOne : data = fstPair {data} {data} (headList {pair data data} rest)
  in
  Bool_match
    (case Bool (equalsData obsScriptCred wdrlAtZero) [False, True])
    {all dead. Unit}
    (/\dead -> Unit)
    (/\dead ->
       Bool_match
         (case Bool (equalsData obsScriptCred wdrlAtOne) [False, True])
         {all dead. Unit}
         (/\dead -> Unit)
         (/\dead ->
            Bool_match
              ((let
                   a = pair data data
                 in
                 \(p : a -> Bool) ->
                   letrec
                     !go : list a -> Bool
                       = \(xs : list a) ->
                           chooseList
                             {a}
                             {all dead. Bool}
                             xs
                             (/\dead -> False)
                             (/\dead ->
                                Bool_match
                                  (p (headList {a} xs))
                                  {all dead. Bool}
                                  (/\dead -> True)
                                  (/\dead -> go (tailList {a} xs))
                                  {all dead. dead})
                             {Bool}
                   in
                   go)
                 (\(x : pair data data) ->
                    case
                      Bool
                      (equalsData obsScriptCred (fstPair {data} {data} x))
                      [False, True])
                 rest)
              {all dead. Unit}
              (/\dead -> Unit)
              (/\dead ->
                 let
                   !x : Unit = trace {Unit} "not found" Unit
                 in
                 error {Unit})
              {all dead. dead})
         {all dead. dead})
    {all dead. dead}
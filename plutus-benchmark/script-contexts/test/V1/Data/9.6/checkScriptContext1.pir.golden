(letrec
    ~go : list data -> integer -> integer
      = (let
            r = integer -> integer
          in
          \(z : r) (f : data -> list data -> r) (xs : list data) ->
            chooseList
              {data}
              {all dead. r}
              xs
              (/\dead -> z)
              (/\dead -> f (headList {data} xs) (tailList {data} xs))
              {r})
          (\(x : integer) -> x)
          (\(ds : data) (t : list data) (eta : integer) ->
             addInteger 1 (go t eta))
  in
  let
    data Bool | Bool_match where
      True : Bool
      False : Bool
    data (Solo :: * -> *) a | Solo_match where
      MkSolo : a -> Solo a
    data Unit | Unit_match where
      Unit : Unit
    Tuple2 :: * -> * -> * = \a a -> all a. a -> a
  in
  \(d : data) ->
    Solo_match
      {data}
      ((let
           r = Solo data
         in
         \(scrut : data) (cont : data -> data -> r) (fail : unit -> r) ->
           let
             !tup : pair integer (list data) = unConstrData scrut
           in
           Bool_match
             (ifThenElse
                {Bool}
                (equalsInteger 0 (fstPair {integer} {list data} tup))
                True
                False)
             {all dead. r}
             (/\dead ->
                let
                  !l : list data = sndPair {integer} {list data} tup
                in
                cont (headList {data} l) (headList {data} (tailList {data} l)))
             (/\dead -> fail ())
             {all dead. dead})
         d
         (\(txi : data) (ds : data) -> MkSolo {data} txi)
         (\(void : unit) ->
            Unit_match (error {Unit}) {Solo data} (error {Solo data})))
      {Unit}
      (\(ipv : data) ->
         Bool_match
           (ifThenElse
              {Bool}
              (equalsInteger
                 0
                 (modInteger
                    (let
                      !ds : (\a -> list data) data
                        = (let
                              r = (\a -> list data) data
                            in
                            \(scrut : data)
                             (cont :
                                (\a -> list data) data ->
                                (\a -> list data) data ->
                                (\k a -> list (pair data data))
                                  bytestring
                                  ((\k a -> list (pair data data))
                                     bytestring
                                     integer) ->
                                (\k a -> list (pair data data))
                                  bytestring
                                  ((\k a -> list (pair data data))
                                     bytestring
                                     integer) ->
                                (\a -> list data) data ->
                                (\a -> list data) (Tuple2 data integer) ->
                                (\a -> data) integer ->
                                (\a -> list data) bytestring ->
                                (\a -> list data) (Tuple2 bytestring data) ->
                                bytestring ->
                                r)
                             (fail : unit -> r) ->
                              let
                                !tup : pair integer (list data)
                                  = unConstrData scrut
                              in
                              Bool_match
                                (ifThenElse
                                   {Bool}
                                   (equalsInteger
                                      0
                                      (fstPair {integer} {list data} tup))
                                   True
                                   False)
                                {all dead. r}
                                (/\dead ->
                                   let
                                     !l : list data
                                       = sndPair {integer} {list data} tup
                                     !l : list data = tailList {data} l
                                     !l : list data = tailList {data} l
                                     !l : list data = tailList {data} l
                                     !l : list data = tailList {data} l
                                     !l : list data = tailList {data} l
                                     !l : list data = tailList {data} l
                                     !l : list data = tailList {data} l
                                     !l : list data = tailList {data} l
                                   in
                                   cont
                                     (unListData (headList {data} l))
                                     (unListData (headList {data} l))
                                     (unMapData (headList {data} l))
                                     (unMapData (headList {data} l))
                                     (unListData (headList {data} l))
                                     (unListData (headList {data} l))
                                     (headList {data} l)
                                     (unListData (headList {data} l))
                                     (unListData (headList {data} l))
                                     (let
                                       !tup : pair integer (list data)
                                         = unConstrData
                                             (headList
                                                {data}
                                                (tailList {data} l))
                                       !index : integer
                                         = fstPair {integer} {list data} tup
                                       !args : list data
                                         = sndPair {integer} {list data} tup
                                     in
                                     Bool_match
                                       (ifThenElse
                                          {Bool}
                                          (equalsInteger 0 index)
                                          True
                                          False)
                                       {all dead. bytestring}
                                       (/\dead ->
                                          unBData (headList {data} args))
                                       (/\dead -> error {bytestring})
                                       {all dead. dead}))
                                (/\dead -> fail ())
                                {all dead. dead})
                            ipv
                            (\(ds : (\a -> list data) data)
                              (ds : (\a -> list data) data)
                              (ds :
                                 (\k a -> list (pair data data))
                                   bytestring
                                   ((\k a -> list (pair data data))
                                      bytestring
                                      integer))
                              (ds :
                                 (\k a -> list (pair data data))
                                   bytestring
                                   ((\k a -> list (pair data data))
                                      bytestring
                                      integer))
                              (ds : (\a -> list data) data)
                              (ds : (\a -> list data) (Tuple2 data integer))
                              (ds : (\a -> data) integer)
                              (ds : (\a -> list data) bytestring)
                              (ds : (\a -> list data) (Tuple2 bytestring data))
                              (ds : bytestring) ->
                               ds)
                            (\(void : unit) -> error {(\a -> list data) data})
                    in
                    go ds 0)
                    2))
              True
              False)
           {all dead. Unit}
           (/\dead -> Unit)
           (/\dead -> error {Unit})
           {all dead. dead}))
  (Constr 0
     [ Constr 0
         [ List []
         , List
             [ Constr 0
                 [ Constr 0 [Constr 0 [B #], Constr 1 []]
                 , Map [(B #, Map [(B #, I 1)])]
                 , Constr 1 [] ] ]
         , Map []
         , Map []
         , List []
         , List []
         , Constr 0
             [ Constr 0 [Constr 0 [], Constr 1 []]
             , Constr 0 [Constr 2 [], Constr 1 []] ]
         , List []
         , List []
         , Constr 0 [B #] ]
     , Constr 1 [Constr 0 [Constr 0 [B #], I 0]] ])
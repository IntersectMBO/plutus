(let
    data Bool | Bool_match where
      True : Bool
      False : Bool
    data Unit | Unit_match where
      Unit : Unit
    !traceError : all a. string -> a
      = /\a ->
          \(str : string) -> let !x : Unit = trace {Unit} str Unit in error {a}
    data (Tuple2 :: * -> * -> *) a b | Tuple2_match where
      Tuple2 : a -> b -> Tuple2 a b
    !`$fUnsafeFromDataTuple2_$cunsafeFromBuiltinData` :
       all a b. (\a -> data -> a) a -> (\a -> data -> a) b -> data -> Tuple2 a b
      = /\a b ->
          \(`$dUnsafeFromData` : (\a -> data -> a) a)
           (`$dUnsafeFromData` : (\a -> data -> a) b)
           (d : data) ->
            let
              !tup : pair integer (list data) = unConstrData d
              !index : integer = fstPair {integer} {list data} tup
              !args : list data = sndPair {integer} {list data} tup
            in
            Bool_match
              (ifThenElse {Bool} (equalsInteger 0 index) True False)
              {all dead. Tuple2 a b}
              (/\dead ->
                 Tuple2
                   {a}
                   {b}
                   (`$dUnsafeFromData` (headList {data} args))
                   (`$dUnsafeFromData`
                      (headList {data} (tailList {data} args))))
              (/\dead -> traceError {Tuple2 a b} "PT1")
              {all dead. dead}
    !`$fUnsafeFromDataBuiltinData_$cunsafeFromBuiltinData` : data -> data
      = \(d : data) -> d
  in
  letrec
    data (List :: * -> *) a | List_match where
      Nil : List a
      Cons : a -> List a -> List a
  in
  let
    !caseList' : all a r. r -> (a -> list a -> r) -> list a -> r
      = /\a r ->
          \(z : r) (f : a -> list a -> r) (xs : list a) ->
            chooseList
              {a}
              {all dead. r}
              xs
              (/\dead -> z)
              (/\dead -> f (headList {a} xs) (tailList {a} xs))
              {r}
  in
  letrec
    !`$mTxInfo` : data -> list data -> List (Tuple2 bytestring data)
      = \(x : data) (xs : list data) ->
          Cons
            {Tuple2 bytestring data}
            (`$fUnsafeFromDataTuple2_$cunsafeFromBuiltinData`
               {bytestring}
               {data}
               unBData
               `$fUnsafeFromDataBuiltinData_$cunsafeFromBuiltinData`
               x)
            (`$mTxInfo_go` xs)
    ~`$mTxInfo_go` : list data -> List (Tuple2 bytestring data)
      = caseList'
          {data}
          {List (Tuple2 bytestring data)}
          (Nil {Tuple2 bytestring data})
          `$mTxInfo`
  in
  letrec
    !`$mTxInfo` : data -> list data -> List (Tuple2 data integer)
      = \(x : data) (xs : list data) ->
          Cons
            {Tuple2 data integer}
            (`$fUnsafeFromDataTuple2_$cunsafeFromBuiltinData`
               {data}
               {integer}
               `$fUnsafeFromDataBuiltinData_$cunsafeFromBuiltinData`
               unIData
               x)
            (`$mTxInfo_go` xs)
    ~`$mTxInfo_go` : list data -> List (Tuple2 data integer)
      = caseList'
          {data}
          {List (Tuple2 data integer)}
          (Nil {Tuple2 data integer})
          `$mTxInfo`
  in
  letrec
    ~go : list data -> integer -> integer
      = caseList'
          {data}
          {integer -> integer}
          (\(x : integer) -> x)
          (\(ds : data) (t : list data) (eta : integer) ->
             addInteger 1 (go t eta))
  in
  let
    data (Solo :: * -> *) a | Solo_match where
      MkSolo : a -> Solo a
  in
  \(d : data) ->
    Solo_match
      {data}
      ((let
           r = Solo data
         in
         \(scrut : data) (cont : data -> data -> r) (fail : unit -> r) ->
           let
             !tup : pair integer (list data) = unConstrData scrut
           in
           Bool_match
             (ifThenElse
                {Bool}
                (equalsInteger 0 (fstPair {integer} {list data} tup))
                True
                False)
             {all dead. r}
             (/\dead ->
                let
                  !l : list data = sndPair {integer} {list data} tup
                in
                cont (headList {data} l) (headList {data} (tailList {data} l)))
             (/\dead -> fail ())
             {all dead. dead})
         d
         (\(txi : data) (ds : data) -> MkSolo {data} txi)
         (\(void : unit) ->
            Unit_match (error {Unit}) {Solo data} (error {Solo data})))
      {Unit}
      (\(ipv : data) ->
         Bool_match
           (ifThenElse
              {Bool}
              (equalsInteger
                 0
                 (modInteger
                    (let
                      !ds : (\a -> list data) data
                        = (let
                              r = (\a -> list data) data
                            in
                            \(scrut : data)
                             (cont :
                                (\a -> list data) data ->
                                (\a -> list data) data ->
                                (\k a -> list (pair data data))
                                  bytestring
                                  ((\k a -> list (pair data data))
                                     bytestring
                                     integer) ->
                                (\k a -> list (pair data data))
                                  bytestring
                                  ((\k a -> list (pair data data))
                                     bytestring
                                     integer) ->
                                (\a -> list data) data ->
                                List (Tuple2 data integer) ->
                                (\a -> data) integer ->
                                (\a -> list data) bytestring ->
                                List (Tuple2 bytestring data) ->
                                bytestring ->
                                r)
                             (fail : unit -> r) ->
                              let
                                !tup : pair integer (list data)
                                  = unConstrData scrut
                              in
                              Bool_match
                                (ifThenElse
                                   {Bool}
                                   (equalsInteger
                                      0
                                      (fstPair {integer} {list data} tup))
                                   True
                                   False)
                                {all dead. r}
                                (/\dead ->
                                   let
                                     !l : list data
                                       = sndPair {integer} {list data} tup
                                     !l : list data = tailList {data} l
                                     !l : list data = tailList {data} l
                                     !l : list data = tailList {data} l
                                     !l : list data = tailList {data} l
                                     !l : list data = tailList {data} l
                                     !l : list data = tailList {data} l
                                     !l : list data = tailList {data} l
                                     !l : list data = tailList {data} l
                                   in
                                   cont
                                     (unListData (headList {data} l))
                                     (unListData (headList {data} l))
                                     (unMapData (headList {data} l))
                                     (unMapData (headList {data} l))
                                     (unListData (headList {data} l))
                                     (let
                                       !d : data = headList {data} l
                                     in
                                     `$mTxInfo_go` (unListData d))
                                     (headList {data} l)
                                     (unListData (headList {data} l))
                                     (let
                                       !d : data = headList {data} l
                                     in
                                     `$mTxInfo_go` (unListData d))
                                     (let
                                       !tup : pair integer (list data)
                                         = unConstrData
                                             (headList
                                                {data}
                                                (tailList {data} l))
                                       !index : integer
                                         = fstPair {integer} {list data} tup
                                       !args : list data
                                         = sndPair {integer} {list data} tup
                                     in
                                     Bool_match
                                       (ifThenElse
                                          {Bool}
                                          (equalsInteger 0 index)
                                          True
                                          False)
                                       {all dead. bytestring}
                                       (/\dead ->
                                          unBData (headList {data} args))
                                       (/\dead -> traceError {bytestring} "PT1")
                                       {all dead. dead}))
                                (/\dead -> fail ())
                                {all dead. dead})
                            ipv
                            (\(ds : (\a -> list data) data)
                              (ds : (\a -> list data) data)
                              (ds :
                                 (\k a -> list (pair data data))
                                   bytestring
                                   ((\k a -> list (pair data data))
                                      bytestring
                                      integer))
                              (ds :
                                 (\k a -> list (pair data data))
                                   bytestring
                                   ((\k a -> list (pair data data))
                                      bytestring
                                      integer))
                              (ds : (\a -> list data) data)
                              (ds : List (Tuple2 data integer))
                              (ds : (\a -> data) integer)
                              (ds : (\a -> list data) bytestring)
                              (ds : List (Tuple2 bytestring data))
                              (ds : bytestring) ->
                               ds)
                            (\(void : unit) -> error {(\a -> list data) data})
                    in
                    go ds 0)
                    2))
              True
              False)
           {all dead. Unit}
           (/\dead -> Unit)
           (/\dead -> error {Unit})
           {all dead. dead}))
  (Constr 0
     [ Constr 0
         [ List []
         , List
             [ Constr 0
                 [ Constr 0 [Constr 0 [B #], Constr 1 []]
                 , Map [(B #, Map [(B #, I 1)])]
                 , Constr 1 [] ] ]
         , Map []
         , Map []
         , List []
         , List []
         , Constr 0
             [ Constr 0 [Constr 0 [], Constr 1 []]
             , Constr 0 [Constr 2 [], Constr 1 []] ]
         , List []
         , List []
         , Constr 0 [B #] ]
     , Constr 1 [Constr 0 [Constr 0 [B #], I 0]] ])
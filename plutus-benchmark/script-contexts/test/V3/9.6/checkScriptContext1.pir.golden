(let
    data Credential | Credential_match where
      PubKeyCredential : bytestring -> Credential
      ScriptCredential : bytestring -> Credential
    data StakingCredential | StakingCredential_match where
      StakingHash : Credential -> StakingCredential
      StakingPtr : integer -> integer -> integer -> StakingCredential
    data (Maybe :: * -> *) a | Maybe_match where
      Just : a -> Maybe a
      Nothing : Maybe a
    data Address | Address_match where
      Address : Credential -> Maybe StakingCredential -> Address
    data OutputDatum | OutputDatum_match where
      NoOutputDatum : OutputDatum
      OutputDatum : data -> OutputDatum
      OutputDatumHash : bytestring -> OutputDatum
    data (Tuple2 :: * -> * -> *) a b | Tuple2_match where
      Tuple2 : a -> b -> Tuple2 a b
  in
  letrec
    data (List :: * -> *) a | List_match where
      Nil : List a
      Cons : a -> List a -> List a
  in
  let
    data TxOut | TxOut_match where
      TxOut :
        Address ->
        (\k v -> List (Tuple2 k v))
          bytestring
          ((\k v -> List (Tuple2 k v)) bytestring integer) ->
        OutputDatum ->
        Maybe bytestring ->
        TxOut
  in
  letrec
    !go : List TxOut -> integer
      = \(ds : List TxOut) ->
          List_match
            {TxOut}
            ds
            {integer}
            0
            (\(ds : TxOut) (xs : List TxOut) -> addInteger 1 (go xs))
  in
  let
    data GovernanceActionId | GovernanceActionId_match where
      GovernanceActionId : bytestring -> integer -> GovernanceActionId
    data Unit | Unit_match where
      Unit : Unit
    !traceError : all a. string -> a
      = /\a ->
          \(str : string) -> let !x : Unit = trace {Unit} str Unit in error {a}
    !`$fUnsafeFromDataGovernanceAction_$cunsafeFromBuiltinData` :
       data -> GovernanceActionId
      = \(d : data) ->
          let
            !tup : pair integer (list data) = unConstrData d
            !index : integer = fstPair {integer} {list data} tup
            !args : list data = sndPair {integer} {list data} tup
          in
          case
            (all dead. GovernanceActionId)
            (equalsInteger 0 index)
            [ (/\dead -> traceError {GovernanceActionId} "PT1")
            , (/\dead ->
                 GovernanceActionId
                   (unBData (headList {data} args))
                   (unIData (headList {data} (tailList {data} args)))) ]
            {all dead. dead}
    !`$fUnsafeFromDataList_$cunsafeFromBuiltinData` :
       all a. (\a -> data -> a) a -> data -> List a
      = /\a ->
          \(`$dUnsafeFromData` : (\a -> data -> a) a) ->
            letrec
              !go : list data -> List a
                = \(xs : list data) ->
                    case
                      (List a)
                      xs
                      [ (Nil {a})
                      , (\(x : data) (xs : list data) ->
                           Cons {a} (`$dUnsafeFromData` x) (go xs)) ]
            in
            \(d : data) -> go (unListData d)
    !`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData` : data -> Credential
      = \(d : data) ->
          let
            !tup : pair integer (list data) = unConstrData d
            !index : integer = fstPair {integer} {list data} tup
            !args : list data = sndPair {integer} {list data} tup
          in
          case
            (all dead. Credential)
            (equalsInteger 0 index)
            [ (/\dead ->
                 case
                   (all dead. Credential)
                   (equalsInteger 1 index)
                   [ (/\dead -> traceError {Credential} "PT1")
                   , (/\dead ->
                        ScriptCredential (unBData (headList {data} args))) ]
                   {all dead. dead})
            , (/\dead -> PubKeyCredential (unBData (headList {data} args))) ]
            {all dead. dead}
    !`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData` :
       all a. (\a -> data -> a) a -> data -> Maybe a
      = /\a ->
          \(`$dUnsafeFromData` : (\a -> data -> a) a) (d : data) ->
            let
              !tup : pair integer (list data) = unConstrData d
              !index : integer = fstPair {integer} {list data} tup
              !args : list data = sndPair {integer} {list data} tup
            in
            case
              (all dead. Maybe a)
              (equalsInteger 1 index)
              [ (/\dead ->
                   case
                     (all dead. Maybe a)
                     (equalsInteger 0 index)
                     [ (/\dead -> traceError {Maybe a} "PT1")
                     , (/\dead ->
                          Just
                            {a}
                            (`$dUnsafeFromData` (headList {data} args))) ]
                     {all dead. dead})
              , (/\dead -> Nothing {a}) ]
              {all dead. dead}
    !`$fUnsafeFromDataMap_$cunsafeFromBuiltinData` :
       all k v.
         (\a -> data -> a) k ->
         (\a -> data -> a) v ->
         data ->
         (\k v -> List (Tuple2 k v)) k v
      = /\k v ->
          \(`$dUnsafeFromData` : (\a -> data -> a) k)
           (`$dUnsafeFromData` : (\a -> data -> a) v) ->
            letrec
              !go : list (pair data data) -> List (Tuple2 k v)
                = \(xs : list (pair data data)) ->
                    case
                      (List (Tuple2 k v))
                      xs
                      [ (Nil {Tuple2 k v})
                      , (\(tup : pair data data)
                          (tups : list (pair data data)) ->
                           Cons
                             {Tuple2 k v}
                             (Tuple2
                                {k}
                                {v}
                                (`$dUnsafeFromData` (fstPair {data} {data} tup))
                                (`$dUnsafeFromData`
                                   (sndPair {data} {data} tup)))
                             (go tups)) ]
            in
            \(d : data) -> go (unMapData d)
    data ProtocolVersion | ProtocolVersion_match where
      ProtocolVersion : integer -> integer -> ProtocolVersion
    data Rational | Rational_match where
      Rational : integer -> integer -> Rational
    data GovernanceAction | GovernanceAction_match where
      HardForkInitiation :
        Maybe GovernanceActionId -> ProtocolVersion -> GovernanceAction
      InfoAction : GovernanceAction
      NewConstitution :
        Maybe GovernanceActionId -> Maybe bytestring -> GovernanceAction
      NoConfidence : Maybe GovernanceActionId -> GovernanceAction
      ParameterChange :
        Maybe GovernanceActionId -> data -> Maybe bytestring -> GovernanceAction
      TreasuryWithdrawals :
        (\k v -> List (Tuple2 k v)) Credential integer ->
        Maybe bytestring ->
        GovernanceAction
      UpdateCommittee :
        Maybe GovernanceActionId ->
        List Credential ->
        (\k v -> List (Tuple2 k v)) Credential integer ->
        Rational ->
        GovernanceAction
    data ProposalProcedure | ProposalProcedure_match where
      ProposalProcedure :
        integer -> Credential -> GovernanceAction -> ProposalProcedure
  in
  letrec
    !euclid : integer -> integer -> integer
      = \(x : integer) (y : integer) ->
          case
            (all dead. integer)
            (equalsInteger 0 y)
            [(/\dead -> euclid y (modInteger x y)), (/\dead -> x)]
            {all dead. dead}
  in
  letrec
    !unsafeRatio : integer -> integer -> Rational
      = \(n : integer) (d : integer) ->
          case
            (all dead. Rational)
            (equalsInteger 0 d)
            [ (/\dead ->
                 case
                   (all dead. Rational)
                   (lessThanInteger d 0)
                   [ (/\dead ->
                        let
                          !gcd' : integer = euclid n d
                        in
                        Rational
                          (quotientInteger n gcd')
                          (quotientInteger d gcd'))
                   , (/\dead ->
                        unsafeRatio
                          (subtractInteger 0 n)
                          (subtractInteger 0 d)) ]
                   {all dead. dead})
            , (/\dead -> traceError {Rational} "PT3") ]
            {all dead. dead}
  in
  let
    !`$fUnsafeFromDataProposalProcedure_$cunsafeFromBuiltinData` :
       data -> ProposalProcedure
      = \(d : data) ->
          let
            !tup : pair integer (list data) = unConstrData d
            !index : integer = fstPair {integer} {list data} tup
            !args : list data = sndPair {integer} {list data} tup
          in
          case
            (all dead. ProposalProcedure)
            (equalsInteger 0 index)
            [ (/\dead -> traceError {ProposalProcedure} "PT1")
            , (/\dead ->
                 let
                   !l : list data = tailList {data} args
                 in
                 ProposalProcedure
                   (unIData (headList {data} args))
                   (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                      (headList {data} l))
                   (let
                     !tup : pair integer (list data)
                       = unConstrData (headList {data} (tailList {data} l))
                     !index : integer = fstPair {integer} {list data} tup
                     !args : list data = sndPair {integer} {list data} tup
                   in
                   case
                     (all dead. GovernanceAction)
                     (equalsInteger 0 index)
                     [ (/\dead ->
                          case
                            (all dead. GovernanceAction)
                            (equalsInteger 1 index)
                            [ (/\dead ->
                                 case
                                   (all dead. GovernanceAction)
                                   (equalsInteger 2 index)
                                   [ (/\dead ->
                                        case
                                          (all dead. GovernanceAction)
                                          (equalsInteger 3 index)
                                          [ (/\dead ->
                                               case
                                                 (all dead. GovernanceAction)
                                                 (equalsInteger 4 index)
                                                 [ (/\dead ->
                                                      case
                                                        (all dead.
                                                           GovernanceAction)
                                                        (equalsInteger 5 index)
                                                        [ (/\dead ->
                                                             case
                                                               (all dead.
                                                                  GovernanceAction)
                                                               (equalsInteger
                                                                  6
                                                                  index)
                                                               [ (/\dead ->
                                                                    traceError
                                                                      {GovernanceAction}
                                                                      "PT1")
                                                               , (/\dead ->
                                                                    InfoAction) ]
                                                               {all dead. dead})
                                                        , (/\dead ->
                                                             NewConstitution
                                                               (`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                                                                  {GovernanceActionId}
                                                                  `$fUnsafeFromDataGovernanceAction_$cunsafeFromBuiltinData`
                                                                  (headList
                                                                     {data}
                                                                     args))
                                                               (let
                                                                 !tup :
                                                                    pair
                                                                      integer
                                                                      (list
                                                                         data)
                                                                   = unConstrData
                                                                       (headList
                                                                          {data}
                                                                          (tailList
                                                                             {data}
                                                                             args))
                                                                 !index :
                                                                    integer
                                                                   = fstPair
                                                                       {integer}
                                                                       {list
                                                                          data}
                                                                       tup
                                                                 !args :
                                                                    list data
                                                                   = sndPair
                                                                       {integer}
                                                                       {list
                                                                          data}
                                                                       tup
                                                               in
                                                               case
                                                                 (all dead.
                                                                    Maybe
                                                                      bytestring)
                                                                 (equalsInteger
                                                                    0
                                                                    index)
                                                                 [ (/\dead ->
                                                                      traceError
                                                                        {Maybe
                                                                           bytestring}
                                                                        "PT1")
                                                                 , (/\dead ->
                                                                      `$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                                                                        {bytestring}
                                                                        unBData
                                                                        (headList
                                                                           {data}
                                                                           args)) ]
                                                                 {all dead.
                                                                    dead})) ]
                                                        {all dead. dead})
                                                 , (/\dead ->
                                                      let
                                                        !l : list data
                                                          = tailList {data} args
                                                        !l : list data
                                                          = tailList {data} l
                                                      in
                                                      UpdateCommittee
                                                        (`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                                                           {GovernanceActionId}
                                                           `$fUnsafeFromDataGovernanceAction_$cunsafeFromBuiltinData`
                                                           (headList
                                                              {data}
                                                              args))
                                                        (`$fUnsafeFromDataList_$cunsafeFromBuiltinData`
                                                           {Credential}
                                                           `$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                                                           (headList {data} l))
                                                        (`$fUnsafeFromDataMap_$cunsafeFromBuiltinData`
                                                           {Credential}
                                                           {integer}
                                                           `$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                                                           unIData
                                                           (headList {data} l))
                                                        (let
                                                          !x : data
                                                            = headList
                                                                {data}
                                                                (tailList
                                                                   {data}
                                                                   l)
                                                        in
                                                        Tuple2_match
                                                          {integer}
                                                          {integer}
                                                          (let
                                                            !tup :
                                                               pair
                                                                 integer
                                                                 (list data)
                                                              = unConstrData x
                                                            !index : integer
                                                              = fstPair
                                                                  {integer}
                                                                  {list data}
                                                                  tup
                                                            !args : list data
                                                              = sndPair
                                                                  {integer}
                                                                  {list data}
                                                                  tup
                                                          in
                                                          case
                                                            (all dead.
                                                               Tuple2
                                                                 integer
                                                                 integer)
                                                            (equalsInteger
                                                               0
                                                               index)
                                                            [ (/\dead ->
                                                                 traceError
                                                                   {Tuple2
                                                                      integer
                                                                      integer}
                                                                   "PT1")
                                                            , (/\dead ->
                                                                 Tuple2
                                                                   {integer}
                                                                   {integer}
                                                                   (unIData
                                                                      (headList
                                                                         {data}
                                                                         args))
                                                                   (unIData
                                                                      (headList
                                                                         {data}
                                                                         (tailList
                                                                            {data}
                                                                            args)))) ]
                                                            {all dead. dead})
                                                          {Rational}
                                                          (\(a : integer)
                                                            (b : integer) ->
                                                             unsafeRatio
                                                               a
                                                               b))) ]
                                                 {all dead. dead})
                                          , (/\dead ->
                                               NoConfidence
                                                 (`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                                                    {GovernanceActionId}
                                                    `$fUnsafeFromDataGovernanceAction_$cunsafeFromBuiltinData`
                                                    (headList {data} args))) ]
                                          {all dead. dead})
                                   , (/\dead ->
                                        TreasuryWithdrawals
                                          (`$fUnsafeFromDataMap_$cunsafeFromBuiltinData`
                                             {Credential}
                                             {integer}
                                             `$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                                             unIData
                                             (headList {data} args))
                                          (`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                                             {bytestring}
                                             unBData
                                             (headList
                                                {data}
                                                (tailList {data} args)))) ]
                                   {all dead. dead})
                            , (/\dead ->
                                 HardForkInitiation
                                   (`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                                      {GovernanceActionId}
                                      `$fUnsafeFromDataGovernanceAction_$cunsafeFromBuiltinData`
                                      (headList {data} args))
                                   (let
                                     !tup : pair integer (list data)
                                       = unConstrData
                                           (headList
                                              {data}
                                              (tailList {data} args))
                                     !index : integer
                                       = fstPair {integer} {list data} tup
                                     !args : list data
                                       = sndPair {integer} {list data} tup
                                   in
                                   case
                                     (all dead. ProtocolVersion)
                                     (equalsInteger 0 index)
                                     [ (/\dead ->
                                          traceError {ProtocolVersion} "PT1")
                                     , (/\dead ->
                                          ProtocolVersion
                                            (unIData (headList {data} args))
                                            (unIData
                                               (headList
                                                  {data}
                                                  (tailList {data} args)))) ]
                                     {all dead. dead})) ]
                            {all dead. dead})
                     , (/\dead ->
                          let
                            !l : list data = tailList {data} args
                          in
                          ParameterChange
                            (`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                               {GovernanceActionId}
                               `$fUnsafeFromDataGovernanceAction_$cunsafeFromBuiltinData`
                               (headList {data} args))
                            (headList {data} l)
                            (`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                               {bytestring}
                               unBData
                               (headList {data} (tailList {data} l)))) ]
                     {all dead. dead})) ]
            {all dead. dead}
  in
  letrec
    !go : list data -> List ProposalProcedure
      = \(xs : list data) ->
          case
            (List ProposalProcedure)
            xs
            [ (Nil {ProposalProcedure})
            , (\(x : data) (xs : list data) ->
                 Cons
                   {ProposalProcedure}
                   (`$fUnsafeFromDataProposalProcedure_$cunsafeFromBuiltinData`
                      x)
                   (go xs)) ]
  in
  let
    data DRep | DRep_match where
      DRep : Credential -> DRep
      DRepAlwaysAbstain : DRep
      DRepAlwaysNoConfidence : DRep
    !`$fUnsafeFromDataDRep_$cunsafeFromBuiltinData` : data -> DRep
      = \(d : data) ->
          let
            !tup : pair integer (list data) = unConstrData d
            !index : integer = fstPair {integer} {list data} tup
            !args : list data = sndPair {integer} {list data} tup
          in
          case
            (all dead. DRep)
            (equalsInteger 0 index)
            [ (/\dead ->
                 case
                   (all dead. DRep)
                   (equalsInteger 1 index)
                   [ (/\dead ->
                        case
                          (all dead. DRep)
                          (equalsInteger 2 index)
                          [ (/\dead -> traceError {DRep} "PT1")
                          , (/\dead -> DRepAlwaysNoConfidence) ]
                          {all dead. dead})
                   , (/\dead -> DRepAlwaysAbstain) ]
                   {all dead. dead})
            , (/\dead ->
                 DRep
                   (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                      (headList {data} args))) ]
            {all dead. dead}
    data Delegatee | Delegatee_match where
      DelegStake : bytestring -> Delegatee
      DelegStakeVote : bytestring -> DRep -> Delegatee
      DelegVote : DRep -> Delegatee
    !`$fUnsafeFromDataDelegatee_$cunsafeFromBuiltinData` : data -> Delegatee
      = \(d : data) ->
          let
            !tup : pair integer (list data) = unConstrData d
            !index : integer = fstPair {integer} {list data} tup
            !args : list data = sndPair {integer} {list data} tup
          in
          case
            (all dead. Delegatee)
            (equalsInteger 0 index)
            [ (/\dead ->
                 case
                   (all dead. Delegatee)
                   (equalsInteger 1 index)
                   [ (/\dead ->
                        case
                          (all dead. Delegatee)
                          (equalsInteger 2 index)
                          [ (/\dead -> traceError {Delegatee} "PT1")
                          , (/\dead ->
                               DelegStakeVote
                                 (unBData (headList {data} args))
                                 (`$fUnsafeFromDataDRep_$cunsafeFromBuiltinData`
                                    (headList {data} (tailList {data} args)))) ]
                          {all dead. dead})
                   , (/\dead ->
                        DelegVote
                          (`$fUnsafeFromDataDRep_$cunsafeFromBuiltinData`
                             (headList {data} args))) ]
                   {all dead. dead})
            , (/\dead -> DelegStake (unBData (headList {data} args))) ]
            {all dead. dead}
    data TxCert | TxCert_match where
      TxCertAuthHotCommittee : Credential -> Credential -> TxCert
      TxCertDelegStaking : Credential -> Delegatee -> TxCert
      TxCertPoolRegister : bytestring -> bytestring -> TxCert
      TxCertPoolRetire : bytestring -> integer -> TxCert
      TxCertRegDRep : Credential -> integer -> TxCert
      TxCertRegDeleg : Credential -> Delegatee -> integer -> TxCert
      TxCertRegStaking : Credential -> Maybe integer -> TxCert
      TxCertResignColdCommittee : Credential -> TxCert
      TxCertUnRegDRep : Credential -> integer -> TxCert
      TxCertUnRegStaking : Credential -> Maybe integer -> TxCert
      TxCertUpdateDRep : Credential -> TxCert
    !`$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData` :
       data -> TxCert
      = \(eta : data) ->
          let
            !tup : pair integer (list data) = unConstrData eta
            !index : integer = fstPair {integer} {list data} tup
            !args : list data = sndPair {integer} {list data} tup
          in
          case
            (all dead. TxCert)
            (equalsInteger 0 index)
            [ (/\dead ->
                 case
                   (all dead. TxCert)
                   (equalsInteger 1 index)
                   [ (/\dead ->
                        case
                          (all dead. TxCert)
                          (equalsInteger 2 index)
                          [ (/\dead ->
                               case
                                 (all dead. TxCert)
                                 (equalsInteger 3 index)
                                 [ (/\dead ->
                                      case
                                        (all dead. TxCert)
                                        (equalsInteger 4 index)
                                        [ (/\dead ->
                                             case
                                               (all dead. TxCert)
                                               (equalsInteger 5 index)
                                               [ (/\dead ->
                                                    case
                                                      (all dead. TxCert)
                                                      (equalsInteger 6 index)
                                                      [ (/\dead ->
                                                           case
                                                             (all dead. TxCert)
                                                             (equalsInteger
                                                                7
                                                                index)
                                                             [ (/\dead ->
                                                                  case
                                                                    (all dead.
                                                                       TxCert)
                                                                    (equalsInteger
                                                                       8
                                                                       index)
                                                                    [ (/\dead ->
                                                                         case
                                                                           (all dead.
                                                                              TxCert)
                                                                           (equalsInteger
                                                                              9
                                                                              index)
                                                                           [ (/\dead ->
                                                                                case
                                                                                  (all dead.
                                                                                     TxCert)
                                                                                  (equalsInteger
                                                                                     10
                                                                                     index)
                                                                                  [ (/\dead ->
                                                                                       traceError
                                                                                         {TxCert}
                                                                                         "PT1")
                                                                                  , (/\dead ->
                                                                                       TxCertResignColdCommittee
                                                                                         (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                                                                                            (headList
                                                                                               {data}
                                                                                               args))) ]
                                                                                  {all dead.
                                                                                     dead})
                                                                           , (/\dead ->
                                                                                TxCertAuthHotCommittee
                                                                                  (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                                                                                     (headList
                                                                                        {data}
                                                                                        args))
                                                                                  (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                                                                                     (headList
                                                                                        {data}
                                                                                        (tailList
                                                                                           {data}
                                                                                           args)))) ]
                                                                           {all dead.
                                                                              dead})
                                                                    , (/\dead ->
                                                                         TxCertPoolRetire
                                                                           (unBData
                                                                              (headList
                                                                                 {data}
                                                                                 args))
                                                                           (unIData
                                                                              (headList
                                                                                 {data}
                                                                                 (tailList
                                                                                    {data}
                                                                                    args)))) ]
                                                                    {all dead.
                                                                       dead})
                                                             , (/\dead ->
                                                                  TxCertPoolRegister
                                                                    (unBData
                                                                       (headList
                                                                          {data}
                                                                          args))
                                                                    (unBData
                                                                       (headList
                                                                          {data}
                                                                          (tailList
                                                                             {data}
                                                                             args)))) ]
                                                             {all dead. dead})
                                                      , (/\dead ->
                                                           TxCertUnRegDRep
                                                             (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                                                                (headList
                                                                   {data}
                                                                   args))
                                                             (unIData
                                                                (headList
                                                                   {data}
                                                                   (tailList
                                                                      {data}
                                                                      args)))) ]
                                                      {all dead. dead})
                                               , (/\dead ->
                                                    TxCertUpdateDRep
                                                      (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                                                         (headList
                                                            {data}
                                                            args))) ]
                                               {all dead. dead})
                                        , (/\dead ->
                                             TxCertRegDRep
                                               (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                                                  (headList {data} args))
                                               (unIData
                                                  (headList
                                                     {data}
                                                     (tailList {data} args)))) ]
                                        {all dead. dead})
                                 , (/\dead ->
                                      let
                                        !l : list data = tailList {data} args
                                      in
                                      TxCertRegDeleg
                                        (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                                           (headList {data} args))
                                        (`$fUnsafeFromDataDelegatee_$cunsafeFromBuiltinData`
                                           (headList {data} l))
                                        (unIData
                                           (headList
                                              {data}
                                              (tailList {data} l)))) ]
                                 {all dead. dead})
                          , (/\dead ->
                               TxCertDelegStaking
                                 (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                                    (headList {data} args))
                                 (`$fUnsafeFromDataDelegatee_$cunsafeFromBuiltinData`
                                    (headList {data} (tailList {data} args)))) ]
                          {all dead. dead})
                   , (/\dead ->
                        TxCertUnRegStaking
                          (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                             (headList {data} args))
                          (`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                             {integer}
                             unIData
                             (headList {data} (tailList {data} args)))) ]
                   {all dead. dead})
            , (/\dead ->
                 TxCertRegStaking
                   (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                      (headList {data} args))
                   (`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                      {integer}
                      unIData
                      (headList {data} (tailList {data} args)))) ]
            {all dead. dead}
  in
  letrec
    !go : list data -> List TxCert
      = \(xs : list data) ->
          case
            (List TxCert)
            xs
            [ (Nil {TxCert})
            , (\(x : data) (xs : list data) ->
                 Cons
                   {TxCert}
                   (`$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData` x)
                   (go xs)) ]
  in
  let
    !`$fUnsafeFromDataTxOut_$cunsafeFromBuiltinData` :
       data -> TxOut
      = \(eta : data) ->
          let
            !tup : pair integer (list data) = unConstrData eta
            !index : integer = fstPair {integer} {list data} tup
            !args : list data = sndPair {integer} {list data} tup
          in
          case
            (all dead. TxOut)
            (equalsInteger 0 index)
            [ (/\dead -> traceError {TxOut} "PT1")
            , (/\dead ->
                 let
                   !l : list data = tailList {data} args
                   !l : list data = tailList {data} l
                 in
                 TxOut
                   (let
                     !tup : pair integer (list data)
                       = unConstrData (headList {data} args)
                     !index : integer = fstPair {integer} {list data} tup
                     !args : list data = sndPair {integer} {list data} tup
                   in
                   case
                     (all dead. Address)
                     (equalsInteger 0 index)
                     [ (/\dead -> traceError {Address} "PT1")
                     , (/\dead ->
                          Address
                            (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                               (headList {data} args))
                            (`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                               {StakingCredential}
                               (\(d : data) ->
                                  let
                                    !tup : pair integer (list data)
                                      = unConstrData d
                                    !index : integer
                                      = fstPair {integer} {list data} tup
                                    !args : list data
                                      = sndPair {integer} {list data} tup
                                  in
                                  case
                                    (all dead. StakingCredential)
                                    (equalsInteger 0 index)
                                    [ (/\dead ->
                                         case
                                           (all dead. StakingCredential)
                                           (equalsInteger 1 index)
                                           [ (/\dead ->
                                                traceError
                                                  {StakingCredential}
                                                  "PT1")
                                           , (/\dead ->
                                                let
                                                  !l : list data
                                                    = tailList {data} args
                                                in
                                                StakingPtr
                                                  (unIData
                                                     (headList {data} args))
                                                  (unIData (headList {data} l))
                                                  (unIData
                                                     (headList
                                                        {data}
                                                        (tailList {data} l)))) ]
                                           {all dead. dead})
                                    , (/\dead ->
                                         StakingHash
                                           (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                                              (headList {data} args))) ]
                                    {all dead. dead})
                               (headList {data} (tailList {data} args)))) ]
                     {all dead. dead})
                   (`$fUnsafeFromDataMap_$cunsafeFromBuiltinData`
                      {bytestring}
                      {(\k v -> List (Tuple2 k v)) bytestring integer}
                      unBData
                      (`$fUnsafeFromDataMap_$cunsafeFromBuiltinData`
                         {bytestring}
                         {integer}
                         unBData
                         unIData)
                      (headList {data} l))
                   (let
                     !tup : pair integer (list data)
                       = unConstrData (headList {data} l)
                     !index : integer = fstPair {integer} {list data} tup
                     !args : list data = sndPair {integer} {list data} tup
                   in
                   case
                     (all dead. OutputDatum)
                     (equalsInteger 0 index)
                     [ (/\dead ->
                          case
                            (all dead. OutputDatum)
                            (equalsInteger 1 index)
                            [ (/\dead ->
                                 case
                                   (all dead. OutputDatum)
                                   (equalsInteger 2 index)
                                   [ (/\dead -> traceError {OutputDatum} "PT1")
                                   , (/\dead ->
                                        OutputDatum (headList {data} args)) ]
                                   {all dead. dead})
                            , (/\dead ->
                                 OutputDatumHash
                                   (unBData (headList {data} args))) ]
                            {all dead. dead})
                     , (/\dead -> NoOutputDatum) ]
                     {all dead. dead})
                   (`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                      {bytestring}
                      unBData
                      (headList {data} (tailList {data} l)))) ]
            {all dead. dead}
  in
  letrec
    !go : list data -> List TxOut
      = \(xs : list data) ->
          case
            (List TxOut)
            xs
            [ (Nil {TxOut})
            , (\(x : data) (xs : list data) ->
                 Cons
                   {TxOut}
                   (`$fUnsafeFromDataTxOut_$cunsafeFromBuiltinData` x)
                   (go xs)) ]
  in
  let
    data TxOutRef | TxOutRef_match where
      TxOutRef : bytestring -> integer -> TxOutRef
    !`$fUnsafeFromDataTxOutRef_$cunsafeFromBuiltinData` : data -> TxOutRef
      = \(d : data) ->
          let
            !tup : pair integer (list data) = unConstrData d
            !index : integer = fstPair {integer} {list data} tup
            !args : list data = sndPair {integer} {list data} tup
          in
          case
            (all dead. TxOutRef)
            (equalsInteger 0 index)
            [ (/\dead -> traceError {TxOutRef} "PT1")
            , (/\dead ->
                 TxOutRef
                   (unBData (headList {data} args))
                   (unIData (headList {data} (tailList {data} args)))) ]
            {all dead. dead}
    data TxInInfo | TxInInfo_match where
      TxInInfo : TxOutRef -> TxOut -> TxInInfo
    !`$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData` : data -> TxInInfo
      = \(d : data) ->
          let
            !tup : pair integer (list data) = unConstrData d
            !index : integer = fstPair {integer} {list data} tup
            !args : list data = sndPair {integer} {list data} tup
          in
          case
            (all dead. TxInInfo)
            (equalsInteger 0 index)
            [ (/\dead -> traceError {TxInInfo} "PT1")
            , (/\dead ->
                 TxInInfo
                   (`$fUnsafeFromDataTxOutRef_$cunsafeFromBuiltinData`
                      (headList {data} args))
                   (`$fUnsafeFromDataTxOut_$cunsafeFromBuiltinData`
                      (headList {data} (tailList {data} args)))) ]
            {all dead. dead}
  in
  letrec
    !go : list data -> List TxInInfo
      = \(xs : list data) ->
          case
            (List TxInInfo)
            xs
            [ (Nil {TxInInfo})
            , (\(x : data) (xs : list data) ->
                 Cons
                   {TxInInfo}
                   (`$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData` x)
                   (go xs)) ]
  in
  letrec
    !go : list data -> List TxInInfo
      = \(xs : list data) ->
          case
            (List TxInInfo)
            xs
            [ (Nil {TxInInfo})
            , (\(x : data) (xs : list data) ->
                 Cons
                   {TxInInfo}
                   (`$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData` x)
                   (go xs)) ]
  in
  let
    !`$fUnsafeFromDataBuiltinData_$cunsafeFromBuiltinData` : data -> data
      = \(d : data) -> d
    !`$fUnsafeFromDataBool_$cunsafeFromBuiltinData` : data -> bool
      = \(d : data) ->
          let
            !idx : integer = fstPair {integer} {list data} (unConstrData d)
          in
          case
            (all dead. bool)
            (equalsInteger 0 idx)
            [ (/\dead ->
                 case
                   (all dead. bool)
                   (equalsInteger 1 idx)
                   [(/\dead -> error {bool}), (/\dead -> True)]
                   {all dead. dead})
            , (/\dead -> False) ]
            {all dead. dead}
    data (Extended :: * -> *) a | Extended_match where
      Finite : a -> Extended a
      NegInf : Extended a
      PosInf : Extended a
    !`$fUnsafeFromDataExtended_$cunsafeFromBuiltinData` :
       all a. (\a -> data -> a) a -> data -> Extended a
      = /\a ->
          \(`$dUnsafeFromData` : (\a -> data -> a) a) (d : data) ->
            let
              !tup : pair integer (list data) = unConstrData d
              !index : integer = fstPair {integer} {list data} tup
              !args : list data = sndPair {integer} {list data} tup
            in
            case
              (all dead. Extended a)
              (equalsInteger 0 index)
              [ (/\dead ->
                   case
                     (all dead. Extended a)
                     (equalsInteger 1 index)
                     [ (/\dead ->
                          case
                            (all dead. Extended a)
                            (equalsInteger 2 index)
                            [ (/\dead -> traceError {Extended a} "PT1")
                            , (/\dead -> PosInf {a}) ]
                            {all dead. dead})
                     , (/\dead ->
                          Finite
                            {a}
                            (`$dUnsafeFromData` (headList {data} args))) ]
                     {all dead. dead})
              , (/\dead -> NegInf {a}) ]
              {all dead. dead}
    data Voter | Voter_match where
      CommitteeVoter : Credential -> Voter
      DRepVoter : Credential -> Voter
      StakePoolVoter : bytestring -> Voter
    !`$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData` : data -> Voter
      = \(d : data) ->
          let
            !tup : pair integer (list data) = unConstrData d
            !index : integer = fstPair {integer} {list data} tup
            !args : list data = sndPair {integer} {list data} tup
          in
          case
            (all dead. Voter)
            (equalsInteger 0 index)
            [ (/\dead ->
                 case
                   (all dead. Voter)
                   (equalsInteger 1 index)
                   [ (/\dead ->
                        case
                          (all dead. Voter)
                          (equalsInteger 2 index)
                          [ (/\dead -> traceError {Voter} "PT1")
                          , (/\dead ->
                               StakePoolVoter
                                 (unBData (headList {data} args))) ]
                          {all dead. dead})
                   , (/\dead ->
                        DRepVoter
                          (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                             (headList {data} args))) ]
                   {all dead. dead})
            , (/\dead ->
                 CommitteeVoter
                   (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                      (headList {data} args))) ]
            {all dead. dead}
    data ScriptInfo | ScriptInfo_match where
      CertifyingScript : integer -> TxCert -> ScriptInfo
      MintingScript : bytestring -> ScriptInfo
      ProposingScript : integer -> ProposalProcedure -> ScriptInfo
      RewardingScript : Credential -> ScriptInfo
      SpendingScript : TxOutRef -> Maybe data -> ScriptInfo
      VotingScript : Voter -> ScriptInfo
    data (LowerBound :: * -> *) a | LowerBound_match where
      LowerBound : Extended a -> bool -> LowerBound a
    data (UpperBound :: * -> *) a | UpperBound_match where
      UpperBound : Extended a -> bool -> UpperBound a
    data (Interval :: * -> *) a | Interval_match where
      Interval : LowerBound a -> UpperBound a -> Interval a
    data ScriptPurpose | ScriptPurpose_match where
      Certifying : integer -> TxCert -> ScriptPurpose
      Minting : bytestring -> ScriptPurpose
      Proposing : integer -> ProposalProcedure -> ScriptPurpose
      Rewarding : Credential -> ScriptPurpose
      Spending : TxOutRef -> ScriptPurpose
      Voting : Voter -> ScriptPurpose
    data Vote | Vote_match where
      Abstain : Vote
      VoteNo : Vote
      VoteYes : Vote
    data TxInfo | TxInfo_match where
      TxInfo :
        List TxInInfo ->
        List TxInInfo ->
        List TxOut ->
        integer ->
        (\k v -> List (Tuple2 k v))
          bytestring
          ((\k v -> List (Tuple2 k v)) bytestring integer) ->
        List TxCert ->
        (\k v -> List (Tuple2 k v)) Credential integer ->
        Interval integer ->
        List bytestring ->
        (\k v -> List (Tuple2 k v)) ScriptPurpose data ->
        (\k v -> List (Tuple2 k v)) bytestring data ->
        bytestring ->
        (\k v -> List (Tuple2 k v))
          Voter
          ((\k v -> List (Tuple2 k v)) GovernanceActionId Vote) ->
        List ProposalProcedure ->
        Maybe integer ->
        Maybe integer ->
        TxInfo
    data ScriptContext | ScriptContext_match where
      ScriptContext : TxInfo -> data -> ScriptInfo -> ScriptContext
  in
  \(d : data) ->
    ScriptContext_match
      (let
        !tup : pair integer (list data) = unConstrData d
        !index : integer = fstPair {integer} {list data} tup
        !args : list data = sndPair {integer} {list data} tup
      in
      case
        (all dead. ScriptContext)
        (equalsInteger 0 index)
        [ (/\dead -> traceError {ScriptContext} "PT1")
        , (/\dead ->
             let
               !l : list data = tailList {data} args
             in
             ScriptContext
               (let
                 !tup : pair integer (list data)
                   = unConstrData (headList {data} args)
                 !index : integer = fstPair {integer} {list data} tup
                 !args : list data = sndPair {integer} {list data} tup
               in
               case
                 (all dead. TxInfo)
                 (equalsInteger 0 index)
                 [ (/\dead -> traceError {TxInfo} "PT1")
                 , (/\dead ->
                      let
                        !l : list data = tailList {data} args
                        !l : list data = tailList {data} l
                        !l : list data = tailList {data} l
                        !l : list data = tailList {data} l
                        !l : list data = tailList {data} l
                        !l : list data = tailList {data} l
                        !l : list data = tailList {data} l
                        !l : list data = tailList {data} l
                        !l : list data = tailList {data} l
                        !l : list data = tailList {data} l
                        !l : list data = tailList {data} l
                        !l : list data = tailList {data} l
                        !l : list data = tailList {data} l
                        !l : list data = tailList {data} l
                      in
                      TxInfo
                        (let
                          !d : data = headList {data} args
                        in
                        go (unListData d))
                        (let
                          !d : data = headList {data} l
                        in
                        go (unListData d))
                        (let
                          !d : data = headList {data} l
                        in
                        go (unListData d))
                        (unIData (headList {data} l))
                        (`$fUnsafeFromDataMap_$cunsafeFromBuiltinData`
                           {bytestring}
                           {(\k v -> List (Tuple2 k v)) bytestring integer}
                           unBData
                           (`$fUnsafeFromDataMap_$cunsafeFromBuiltinData`
                              {bytestring}
                              {integer}
                              unBData
                              unIData)
                           (headList {data} l))
                        (let
                          !d : data = headList {data} l
                        in
                        go (unListData d))
                        (`$fUnsafeFromDataMap_$cunsafeFromBuiltinData`
                           {Credential}
                           {integer}
                           `$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                           unIData
                           (headList {data} l))
                        (let
                          !tup : pair integer (list data)
                            = unConstrData (headList {data} l)
                          !index : integer = fstPair {integer} {list data} tup
                          !args : list data = sndPair {integer} {list data} tup
                        in
                        case
                          (all dead. Interval integer)
                          (equalsInteger 0 index)
                          [ (/\dead -> traceError {Interval integer} "PT1")
                          , (/\dead ->
                               Interval
                                 {integer}
                                 (let
                                   !tup : pair integer (list data)
                                     = unConstrData (headList {data} args)
                                   !index : integer
                                     = fstPair {integer} {list data} tup
                                   !args : list data
                                     = sndPair {integer} {list data} tup
                                 in
                                 case
                                   (all dead. LowerBound integer)
                                   (equalsInteger 0 index)
                                   [ (/\dead ->
                                        traceError {LowerBound integer} "PT1")
                                   , (/\dead ->
                                        LowerBound
                                          {integer}
                                          (`$fUnsafeFromDataExtended_$cunsafeFromBuiltinData`
                                             {integer}
                                             unIData
                                             (headList {data} args))
                                          (`$fUnsafeFromDataBool_$cunsafeFromBuiltinData`
                                             (headList
                                                {data}
                                                (tailList {data} args)))) ]
                                   {all dead. dead})
                                 (let
                                   !tup : pair integer (list data)
                                     = unConstrData
                                         (headList
                                            {data}
                                            (tailList {data} args))
                                   !index : integer
                                     = fstPair {integer} {list data} tup
                                   !args : list data
                                     = sndPair {integer} {list data} tup
                                 in
                                 case
                                   (all dead. UpperBound integer)
                                   (equalsInteger 0 index)
                                   [ (/\dead ->
                                        traceError {UpperBound integer} "PT1")
                                   , (/\dead ->
                                        UpperBound
                                          {integer}
                                          (`$fUnsafeFromDataExtended_$cunsafeFromBuiltinData`
                                             {integer}
                                             unIData
                                             (headList {data} args))
                                          (`$fUnsafeFromDataBool_$cunsafeFromBuiltinData`
                                             (headList
                                                {data}
                                                (tailList {data} args)))) ]
                                   {all dead. dead})) ]
                          {all dead. dead})
                        (`$fUnsafeFromDataList_$cunsafeFromBuiltinData`
                           {bytestring}
                           unBData
                           (headList {data} l))
                        (`$fUnsafeFromDataMap_$cunsafeFromBuiltinData`
                           {ScriptPurpose}
                           {data}
                           (\(d : data) ->
                              let
                                !tup : pair integer (list data) = unConstrData d
                                !index : integer
                                  = fstPair {integer} {list data} tup
                                !args : list data
                                  = sndPair {integer} {list data} tup
                              in
                              case
                                (all dead. ScriptPurpose)
                                (equalsInteger 0 index)
                                [ (/\dead ->
                                     case
                                       (all dead. ScriptPurpose)
                                       (equalsInteger 1 index)
                                       [ (/\dead ->
                                            case
                                              (all dead. ScriptPurpose)
                                              (equalsInteger 2 index)
                                              [ (/\dead ->
                                                   case
                                                     (all dead. ScriptPurpose)
                                                     (equalsInteger 3 index)
                                                     [ (/\dead ->
                                                          case
                                                            (all dead.
                                                               ScriptPurpose)
                                                            (equalsInteger
                                                               4
                                                               index)
                                                            [ (/\dead ->
                                                                 case
                                                                   (all dead.
                                                                      ScriptPurpose)
                                                                   (equalsInteger
                                                                      5
                                                                      index)
                                                                   [ (/\dead ->
                                                                        traceError
                                                                          {ScriptPurpose}
                                                                          "PT1")
                                                                   , (/\dead ->
                                                                        Proposing
                                                                          (unIData
                                                                             (headList
                                                                                {data}
                                                                                args))
                                                                          (`$fUnsafeFromDataProposalProcedure_$cunsafeFromBuiltinData`
                                                                             (headList
                                                                                {data}
                                                                                (tailList
                                                                                   {data}
                                                                                   args)))) ]
                                                                   {all dead.
                                                                      dead})
                                                            , (/\dead ->
                                                                 Voting
                                                                   (`$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData`
                                                                      (headList
                                                                         {data}
                                                                         args))) ]
                                                            {all dead. dead})
                                                     , (/\dead ->
                                                          Certifying
                                                            (unIData
                                                               (headList
                                                                  {data}
                                                                  args))
                                                            (`$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData`
                                                               (headList
                                                                  {data}
                                                                  (tailList
                                                                     {data}
                                                                     args)))) ]
                                                     {all dead. dead})
                                              , (/\dead ->
                                                   Rewarding
                                                     (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                                                        (headList
                                                           {data}
                                                           args))) ]
                                              {all dead. dead})
                                       , (/\dead ->
                                            Spending
                                              (`$fUnsafeFromDataTxOutRef_$cunsafeFromBuiltinData`
                                                 (headList {data} args))) ]
                                       {all dead. dead})
                                , (/\dead ->
                                     Minting (unBData (headList {data} args))) ]
                                {all dead. dead})
                           `$fUnsafeFromDataBuiltinData_$cunsafeFromBuiltinData`
                           (headList {data} l))
                        (`$fUnsafeFromDataMap_$cunsafeFromBuiltinData`
                           {bytestring}
                           {data}
                           unBData
                           `$fUnsafeFromDataBuiltinData_$cunsafeFromBuiltinData`
                           (headList {data} l))
                        (unBData (headList {data} l))
                        (`$fUnsafeFromDataMap_$cunsafeFromBuiltinData`
                           {Voter}
                           {(\k v -> List (Tuple2 k v)) GovernanceActionId Vote}
                           `$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData`
                           (`$fUnsafeFromDataMap_$cunsafeFromBuiltinData`
                              {GovernanceActionId}
                              {Vote}
                              `$fUnsafeFromDataGovernanceAction_$cunsafeFromBuiltinData`
                              (\(d : data) ->
                                 let
                                   !tup : pair integer (list data)
                                     = unConstrData d
                                   !index : integer
                                     = fstPair {integer} {list data} tup
                                   !args : list data
                                     = sndPair {integer} {list data} tup
                                 in
                                 case
                                   (all dead. Vote)
                                   (equalsInteger 0 index)
                                   [ (/\dead ->
                                        case
                                          (all dead. Vote)
                                          (equalsInteger 1 index)
                                          [ (/\dead ->
                                               case
                                                 (all dead. Vote)
                                                 (equalsInteger 2 index)
                                                 [ (/\dead ->
                                                      traceError {Vote} "PT1")
                                                 , (/\dead -> Abstain) ]
                                                 {all dead. dead})
                                          , (/\dead -> VoteYes) ]
                                          {all dead. dead})
                                   , (/\dead -> VoteNo) ]
                                   {all dead. dead}))
                           (headList {data} l))
                        (let
                          !d : data = headList {data} l
                        in
                        go (unListData d))
                        (`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                           {integer}
                           unIData
                           (headList {data} l))
                        (`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                           {integer}
                           unIData
                           (headList {data} (tailList {data} l)))) ]
                 {all dead. dead})
               (headList {data} l)
               (let
                 !tup : pair integer (list data)
                   = unConstrData (headList {data} (tailList {data} l))
                 !index : integer = fstPair {integer} {list data} tup
                 !args : list data = sndPair {integer} {list data} tup
               in
               case
                 (all dead. ScriptInfo)
                 (equalsInteger 0 index)
                 [ (/\dead ->
                      case
                        (all dead. ScriptInfo)
                        (equalsInteger 1 index)
                        [ (/\dead ->
                             case
                               (all dead. ScriptInfo)
                               (equalsInteger 2 index)
                               [ (/\dead ->
                                    case
                                      (all dead. ScriptInfo)
                                      (equalsInteger 3 index)
                                      [ (/\dead ->
                                           case
                                             (all dead. ScriptInfo)
                                             (equalsInteger 4 index)
                                             [ (/\dead ->
                                                  case
                                                    (all dead. ScriptInfo)
                                                    (equalsInteger 5 index)
                                                    [ (/\dead ->
                                                         traceError
                                                           {ScriptInfo}
                                                           "PT1")
                                                    , (/\dead ->
                                                         ProposingScript
                                                           (unIData
                                                              (headList
                                                                 {data}
                                                                 args))
                                                           (`$fUnsafeFromDataProposalProcedure_$cunsafeFromBuiltinData`
                                                              (headList
                                                                 {data}
                                                                 (tailList
                                                                    {data}
                                                                    args)))) ]
                                                    {all dead. dead})
                                             , (/\dead ->
                                                  VotingScript
                                                    (`$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData`
                                                       (headList
                                                          {data}
                                                          args))) ]
                                             {all dead. dead})
                                      , (/\dead ->
                                           CertifyingScript
                                             (unIData (headList {data} args))
                                             (`$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData`
                                                (headList
                                                   {data}
                                                   (tailList {data} args)))) ]
                                      {all dead. dead})
                               , (/\dead ->
                                    RewardingScript
                                      (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                                         (headList {data} args))) ]
                               {all dead. dead})
                        , (/\dead ->
                             SpendingScript
                               (`$fUnsafeFromDataTxOutRef_$cunsafeFromBuiltinData`
                                  (headList {data} args))
                               (`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                                  {data}
                                  `$fUnsafeFromDataBuiltinData_$cunsafeFromBuiltinData`
                                  (headList {data} (tailList {data} args)))) ]
                        {all dead. dead})
                 , (/\dead -> MintingScript (unBData (headList {data} args))) ]
                 {all dead. dead})) ]
        {all dead. dead})
      {Unit}
      (\(ipv : TxInfo) (ipv : data) (ipv : ScriptInfo) ->
         case
           (all dead. Unit)
           (equalsInteger
              0
              (modInteger
                 (let
                   !eta : List TxOut
                     = TxInfo_match
                         ipv
                         {List TxOut}
                         (\(ds : List TxInInfo)
                           (ds : List TxInInfo)
                           (ds : List TxOut)
                           (ds : integer)
                           (ds :
                              (\k v -> List (Tuple2 k v))
                                bytestring
                                ((\k v -> List (Tuple2 k v))
                                   bytestring
                                   integer))
                           (ds : List TxCert)
                           (ds : (\k v -> List (Tuple2 k v)) Credential integer)
                           (ds : Interval integer)
                           (ds : List bytestring)
                           (ds : (\k v -> List (Tuple2 k v)) ScriptPurpose data)
                           (ds : (\k v -> List (Tuple2 k v)) bytestring data)
                           (ds : bytestring)
                           (ds :
                              (\k v -> List (Tuple2 k v))
                                Voter
                                ((\k v -> List (Tuple2 k v))
                                   GovernanceActionId
                                   Vote))
                           (ds : List ProposalProcedure)
                           (ds : Maybe integer)
                           (ds : Maybe integer) ->
                            ds)
                 in
                 go eta)
                 2))
           [ (/\dead ->
                let
                  !x : Unit = trace {Unit} "Odd number of outputs" Unit
                in
                error {Unit})
           , (/\dead -> Unit) ]
           {all dead. dead}))
  (Constr 0
     [ Constr 0
         [ List []
         , List []
         , List
             [ Constr 0
                 [ Constr 0 [Constr 0 [B #], Constr 1 []]
                 , Map [(B #, Map [(B #, I 1)])]
                 , Constr 0 []
                 , Constr 1 [] ] ]
         , I 10000
         , Map []
         , List []
         , Map []
         , Constr 0
             [ Constr 0 [Constr 0 [], Constr 1 []]
             , Constr 0 [Constr 2 [], Constr 1 []] ]
         , List []
         , Map []
         , Map []
         , B #
         , Map []
         , List []
         , Constr 1 []
         , Constr 1 [] ]
     , I 1
     , Constr 1 [Constr 0 [B #, I 0], Constr 1 []] ])
(let
    data Credential | Credential_match where
      PubKeyCredential : bytestring -> Credential
      ScriptCredential : bytestring -> Credential
    data StakingCredential | StakingCredential_match where
      StakingHash : Credential -> StakingCredential
      StakingPtr : integer -> integer -> integer -> StakingCredential
    data (Maybe :: * -> *) a | Maybe_match where
      Just : a -> Maybe a
      Nothing : Maybe a
    data Address | Address_match where
      Address : Credential -> Maybe StakingCredential -> Address
    data OutputDatum | OutputDatum_match where
      NoOutputDatum : OutputDatum
      OutputDatum : data -> OutputDatum
      OutputDatumHash : bytestring -> OutputDatum
    data (Tuple2 :: * -> * -> *) a b | Tuple2_match where
      Tuple2 : a -> b -> Tuple2 a b
  in
  letrec
    data (List :: * -> *) a | List_match where
      Nil : List a
      Cons : a -> List a -> List a
  in
  let
    data TxOut | TxOut_match where
      TxOut :
        Address ->
        (\k v -> List (Tuple2 k v))
          bytestring
          ((\k v -> List (Tuple2 k v)) bytestring integer) ->
        OutputDatum ->
        Maybe bytestring ->
        TxOut
  in
  letrec
    !go : List TxOut -> integer
      = \(ds : List TxOut) ->
          List_match
            {TxOut}
            ds
            {integer}
            0
            (\(ds : TxOut) (xs : List TxOut) -> addInteger 1 (go xs))
  in
  let
    !`$fUnsafeFromDataBuiltinData_$cunsafeFromBuiltinData` : data -> data
      = \(d : data) -> d
    data (Extended :: * -> *) a | Extended_match where
      Finite : a -> Extended a
      NegInf : Extended a
      PosInf : Extended a
    !`$fUnsafeFromDataExtended_$cunsafeFromBuiltinData` :
       all a. (\a -> data -> a) a -> data -> Extended a
      = /\a ->
          \(`$dUnsafeFromData` : (\a -> data -> a) a) (d : data) ->
            case
              (Extended a)
              d
              [ (NegInf {a})
              , (\(arg : data) -> Finite {a} (`$dUnsafeFromData` arg))
              , (PosInf {a}) ]
    data GovernanceActionId | GovernanceActionId_match where
      GovernanceActionId : bytestring -> integer -> GovernanceActionId
    !`$fUnsafeFromDataGovernanceAction_$cunsafeFromBuiltinData` :
       data -> GovernanceActionId
      = \(d : data) ->
          case
            GovernanceActionId
            d
            [ (\(arg : data) (arg : data) ->
                 GovernanceActionId (unBData arg) (unIData arg)) ]
    !`$fUnsafeFromDataList_$cunsafeFromBuiltinData` :
       all a. (\a -> data -> a) a -> data -> List a
      = /\a ->
          \(`$dUnsafeFromData` : (\a -> data -> a) a) ->
            letrec
              !go : list data -> List a
                = \(xs : list data) ->
                    case
                      (List a)
                      xs
                      [ (\(x : data) (xs : list data) ->
                           Cons {a} (`$dUnsafeFromData` x) (go xs))
                      , (Nil {a}) ]
            in
            \(d : data) -> go (unListData d)
    !`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData` : data -> Credential
      = \(d : data) ->
          case
            Credential
            d
            [ (\(arg : data) -> PubKeyCredential (unBData arg))
            , (\(arg : data) -> ScriptCredential (unBData arg)) ]
    !`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData` :
       all a. (\a -> data -> a) a -> data -> Maybe a
      = /\a ->
          \(`$dUnsafeFromData` : (\a -> data -> a) a) (d : data) ->
            case
              (Maybe a)
              d
              [ (\(arg : data) -> Just {a} (`$dUnsafeFromData` arg))
              , (Nothing {a}) ]
    !`$fUnsafeFromDataMap_$cunsafeFromBuiltinData` :
       all k v.
         (\a -> data -> a) k ->
         (\a -> data -> a) v ->
         data ->
         (\k v -> List (Tuple2 k v)) k v
      = /\k v ->
          \(`$dUnsafeFromData` : (\a -> data -> a) k)
           (`$dUnsafeFromData` : (\a -> data -> a) v) ->
            letrec
              !go : list (pair data data) -> List (Tuple2 k v)
                = \(xs : list (pair data data)) ->
                    case
                      (List (Tuple2 k v))
                      xs
                      [ (\(tup : pair data data)
                          (tups : list (pair data data)) ->
                           Cons
                             {Tuple2 k v}
                             (Tuple2
                                {k}
                                {v}
                                (`$dUnsafeFromData`
                                   (case
                                      data
                                      tup
                                      [(\(l : data) (r : data) -> l)]))
                                (`$dUnsafeFromData`
                                   (case
                                      data
                                      tup
                                      [(\(l : data) (r : data) -> r)])))
                             (go tups))
                      , (Nil {Tuple2 k v}) ]
            in
            \(d : data) -> go (unMapData d)
    data ProtocolVersion | ProtocolVersion_match where
      ProtocolVersion : integer -> integer -> ProtocolVersion
    data Rational | Rational_match where
      Rational : integer -> integer -> Rational
    data GovernanceAction | GovernanceAction_match where
      HardForkInitiation :
        Maybe GovernanceActionId -> ProtocolVersion -> GovernanceAction
      InfoAction : GovernanceAction
      NewConstitution :
        Maybe GovernanceActionId -> Maybe bytestring -> GovernanceAction
      NoConfidence : Maybe GovernanceActionId -> GovernanceAction
      ParameterChange :
        Maybe GovernanceActionId -> data -> Maybe bytestring -> GovernanceAction
      TreasuryWithdrawals :
        (\k v -> List (Tuple2 k v)) Credential integer ->
        Maybe bytestring ->
        GovernanceAction
      UpdateCommittee :
        Maybe GovernanceActionId ->
        List Credential ->
        (\k v -> List (Tuple2 k v)) Credential integer ->
        Rational ->
        GovernanceAction
    data ProposalProcedure | ProposalProcedure_match where
      ProposalProcedure :
        integer -> Credential -> GovernanceAction -> ProposalProcedure
  in
  letrec
    !euclid : integer -> integer -> integer
      = \(x : integer) (y : integer) ->
          case
            (all dead. integer)
            (equalsInteger 0 y)
            [(/\dead -> euclid y (modInteger x y)), (/\dead -> x)]
            {all dead. dead}
  in
  let
    data Unit | Unit_match where
      Unit : Unit
  in
  letrec
    !unsafeRatio : integer -> integer -> Rational
      = \(n : integer) (d : integer) ->
          case
            (all dead. Rational)
            (equalsInteger 0 d)
            [ (/\dead ->
                 case
                   (all dead. Rational)
                   (lessThanInteger d 0)
                   [ (/\dead ->
                        let
                          !gcd' : integer = euclid n d
                        in
                        Rational
                          (quotientInteger n gcd')
                          (quotientInteger d gcd'))
                   , (/\dead ->
                        unsafeRatio
                          (subtractInteger 0 n)
                          (subtractInteger 0 d)) ]
                   {all dead. dead})
            , (/\dead ->
                 let
                   !x : Unit = trace {Unit} "PT3" Unit
                 in
                 error {Rational}) ]
            {all dead. dead}
  in
  let
    !`$fUnsafeFromDataProposalProcedure_$cunsafeFromBuiltinData` :
       data -> ProposalProcedure
      = \(d : data) ->
          case
            ProposalProcedure
            d
            [ (\(arg : data)
                (arg : data)
                (arg : data) ->
                 ProposalProcedure
                   (unIData arg)
                   (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData` arg)
                   (case
                      GovernanceAction
                      arg
                      [ (\(arg : data)
                          (arg : data)
                          (arg : data) ->
                           ParameterChange
                             (`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                                {GovernanceActionId}
                                `$fUnsafeFromDataGovernanceAction_$cunsafeFromBuiltinData`
                                arg)
                             arg
                             (`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                                {bytestring}
                                unBData
                                arg))
                      , (\(arg : data)
                          (arg : data) ->
                           HardForkInitiation
                             (`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                                {GovernanceActionId}
                                `$fUnsafeFromDataGovernanceAction_$cunsafeFromBuiltinData`
                                arg)
                             (case
                                ProtocolVersion
                                arg
                                [ (\(arg : data) (arg : data) ->
                                     ProtocolVersion
                                       (unIData arg)
                                       (unIData arg)) ]))
                      , (\(arg : data)
                          (arg : data) ->
                           TreasuryWithdrawals
                             (`$fUnsafeFromDataMap_$cunsafeFromBuiltinData`
                                {Credential}
                                {integer}
                                `$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                                unIData
                                arg)
                             (`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                                {bytestring}
                                unBData
                                arg))
                      , (\(arg : data) ->
                           NoConfidence
                             (`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                                {GovernanceActionId}
                                `$fUnsafeFromDataGovernanceAction_$cunsafeFromBuiltinData`
                                arg))
                      , (\(arg : data)
                          (arg : data)
                          (arg : data)
                          (arg : data) ->
                           UpdateCommittee
                             (`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                                {GovernanceActionId}
                                `$fUnsafeFromDataGovernanceAction_$cunsafeFromBuiltinData`
                                arg)
                             (`$fUnsafeFromDataList_$cunsafeFromBuiltinData`
                                {Credential}
                                `$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                                arg)
                             (`$fUnsafeFromDataMap_$cunsafeFromBuiltinData`
                                {Credential}
                                {integer}
                                `$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                                unIData
                                arg)
                             (Tuple2_match
                                {integer}
                                {integer}
                                (case
                                   (Tuple2 integer integer)
                                   arg
                                   [ (\(arg : data) (arg : data) ->
                                        Tuple2
                                          {integer}
                                          {integer}
                                          (unIData arg)
                                          (unIData arg)) ])
                                {Rational}
                                (\(a : integer) (b : integer) ->
                                   unsafeRatio a b)))
                      , (\(arg : data)
                          (arg : data) ->
                           NewConstitution
                             (`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                                {GovernanceActionId}
                                `$fUnsafeFromDataGovernanceAction_$cunsafeFromBuiltinData`
                                arg)
                             (case
                                (Maybe bytestring)
                                arg
                                [ (\(arg : data) ->
                                     `$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                                       {bytestring}
                                       unBData
                                       arg) ]))
                      , InfoAction ])) ]
    data Voter | Voter_match where
      CommitteeVoter : Credential -> Voter
      DRepVoter : Credential -> Voter
      StakePoolVoter : bytestring -> Voter
    !`$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData` : data -> Voter
      = \(d : data) ->
          case
            Voter
            d
            [ (\(arg : data) ->
                 CommitteeVoter
                   (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData` arg))
            , (\(arg : data) ->
                 DRepVoter
                   (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData` arg))
            , (\(arg : data) -> StakePoolVoter (unBData arg)) ]
    data DRep | DRep_match where
      DRep : Credential -> DRep
      DRepAlwaysAbstain : DRep
      DRepAlwaysNoConfidence : DRep
    !`$fUnsafeFromDataDRep_$cunsafeFromBuiltinData` : data -> DRep
      = \(d : data) ->
          case
            DRep
            d
            [ (\(arg : data) ->
                 DRep
                   (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData` arg))
            , DRepAlwaysAbstain
            , DRepAlwaysNoConfidence ]
    data Delegatee | Delegatee_match where
      DelegStake : bytestring -> Delegatee
      DelegStakeVote : bytestring -> DRep -> Delegatee
      DelegVote : DRep -> Delegatee
    !`$fUnsafeFromDataDelegatee_$cunsafeFromBuiltinData` : data -> Delegatee
      = \(d : data) ->
          case
            Delegatee
            d
            [ (\(arg : data) -> DelegStake (unBData arg))
            , (\(arg : data) ->
                 DelegVote (`$fUnsafeFromDataDRep_$cunsafeFromBuiltinData` arg))
            , (\(arg : data) (arg : data) ->
                 DelegStakeVote
                   (unBData arg)
                   (`$fUnsafeFromDataDRep_$cunsafeFromBuiltinData` arg)) ]
    data TxCert | TxCert_match where
      TxCertAuthHotCommittee : Credential -> Credential -> TxCert
      TxCertDelegStaking : Credential -> Delegatee -> TxCert
      TxCertPoolRegister : bytestring -> bytestring -> TxCert
      TxCertPoolRetire : bytestring -> integer -> TxCert
      TxCertRegDRep : Credential -> integer -> TxCert
      TxCertRegDeleg : Credential -> Delegatee -> integer -> TxCert
      TxCertRegStaking : Credential -> Maybe integer -> TxCert
      TxCertResignColdCommittee : Credential -> TxCert
      TxCertUnRegDRep : Credential -> integer -> TxCert
      TxCertUnRegStaking : Credential -> Maybe integer -> TxCert
      TxCertUpdateDRep : Credential -> TxCert
    !`$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData` : data -> TxCert
      = \(eta : data) ->
          case
            TxCert
            eta
            [ (\(arg : data) (arg : data) ->
                 TxCertRegStaking
                   (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData` arg)
                   (`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                      {integer}
                      unIData
                      arg))
            , (\(arg : data) (arg : data) ->
                 TxCertUnRegStaking
                   (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData` arg)
                   (`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                      {integer}
                      unIData
                      arg))
            , (\(arg : data) (arg : data) ->
                 TxCertDelegStaking
                   (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData` arg)
                   (`$fUnsafeFromDataDelegatee_$cunsafeFromBuiltinData` arg))
            , (\(arg : data) (arg : data) (arg : data) ->
                 TxCertRegDeleg
                   (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData` arg)
                   (`$fUnsafeFromDataDelegatee_$cunsafeFromBuiltinData` arg)
                   (unIData arg))
            , (\(arg : data) (arg : data) ->
                 TxCertRegDRep
                   (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData` arg)
                   (unIData arg))
            , (\(arg : data) ->
                 TxCertUpdateDRep
                   (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData` arg))
            , (\(arg : data) (arg : data) ->
                 TxCertUnRegDRep
                   (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData` arg)
                   (unIData arg))
            , (\(arg : data) (arg : data) ->
                 TxCertPoolRegister (unBData arg) (unBData arg))
            , (\(arg : data) (arg : data) ->
                 TxCertPoolRetire (unBData arg) (unIData arg))
            , (\(arg : data) (arg : data) ->
                 TxCertAuthHotCommittee
                   (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData` arg)
                   (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData` arg))
            , (\(arg : data) ->
                 TxCertResignColdCommittee
                   (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData` arg)) ]
    data TxOutRef | TxOutRef_match where
      TxOutRef : bytestring -> integer -> TxOutRef
    !`$fUnsafeFromDataTxOutRef_$cunsafeFromBuiltinData` : data -> TxOutRef
      = \(d : data) ->
          case
            TxOutRef
            d
            [ (\(arg : data) (arg : data) ->
                 TxOutRef (unBData arg) (unIData arg)) ]
    !`$fUnsafeFromDataTxOut_$cunsafeFromBuiltinData` :
       data -> TxOut
      = \(eta : data) ->
          case
            TxOut
            eta
            [ (\(arg : data)
                (arg : data)
                (arg : data)
                (arg : data) ->
                 TxOut
                   (case
                      Address
                      arg
                      [ (\(arg : data)
                          (arg : data) ->
                           Address
                             (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                                arg)
                             (`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                                {StakingCredential}
                                (\(d : data) ->
                                   case
                                     StakingCredential
                                     d
                                     [ (\(arg : data) ->
                                          StakingHash
                                            (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                                               arg))
                                     , (\(arg : data)
                                         (arg : data)
                                         (arg : data) ->
                                          StakingPtr
                                            (unIData arg)
                                            (unIData arg)
                                            (unIData arg)) ])
                                arg)) ])
                   (`$fUnsafeFromDataMap_$cunsafeFromBuiltinData`
                      {bytestring}
                      {(\k v -> List (Tuple2 k v)) bytestring integer}
                      unBData
                      (`$fUnsafeFromDataMap_$cunsafeFromBuiltinData`
                         {bytestring}
                         {integer}
                         unBData
                         unIData)
                      arg)
                   (case
                      OutputDatum
                      arg
                      [ NoOutputDatum
                      , (\(arg : data) -> OutputDatumHash (unBData arg))
                      , (\(arg : data) -> OutputDatum arg) ])
                   (`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                      {bytestring}
                      unBData
                      arg)) ]
    data TxInInfo | TxInInfo_match where
      TxInInfo : TxOutRef -> TxOut -> TxInInfo
    !`$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData` : data -> TxInInfo
      = \(d : data) ->
          case
            TxInInfo
            d
            [ (\(arg : data) (arg : data) ->
                 TxInInfo
                   (`$fUnsafeFromDataTxOutRef_$cunsafeFromBuiltinData` arg)
                   (`$fUnsafeFromDataTxOut_$cunsafeFromBuiltinData` arg)) ]
    data ScriptInfo | ScriptInfo_match where
      CertifyingScript : integer -> TxCert -> ScriptInfo
      MintingScript : bytestring -> ScriptInfo
      ProposingScript : integer -> ProposalProcedure -> ScriptInfo
      RewardingScript : Credential -> ScriptInfo
      SpendingScript : TxOutRef -> Maybe data -> ScriptInfo
      VotingScript : Voter -> ScriptInfo
    data (LowerBound :: * -> *) a | LowerBound_match where
      LowerBound : Extended a -> bool -> LowerBound a
    data (UpperBound :: * -> *) a | UpperBound_match where
      UpperBound : Extended a -> bool -> UpperBound a
    data (Interval :: * -> *) a | Interval_match where
      Interval : LowerBound a -> UpperBound a -> Interval a
    data ScriptPurpose | ScriptPurpose_match where
      Certifying : integer -> TxCert -> ScriptPurpose
      Minting : bytestring -> ScriptPurpose
      Proposing : integer -> ProposalProcedure -> ScriptPurpose
      Rewarding : Credential -> ScriptPurpose
      Spending : TxOutRef -> ScriptPurpose
      Voting : Voter -> ScriptPurpose
    data Vote | Vote_match where
      Abstain : Vote
      VoteNo : Vote
      VoteYes : Vote
    data TxInfo | TxInfo_match where
      TxInfo :
        List TxInInfo ->
        List TxInInfo ->
        List TxOut ->
        integer ->
        (\k v -> List (Tuple2 k v))
          bytestring
          ((\k v -> List (Tuple2 k v)) bytestring integer) ->
        List TxCert ->
        (\k v -> List (Tuple2 k v)) Credential integer ->
        Interval integer ->
        List bytestring ->
        (\k v -> List (Tuple2 k v)) ScriptPurpose data ->
        (\k v -> List (Tuple2 k v)) bytestring data ->
        bytestring ->
        (\k v -> List (Tuple2 k v))
          Voter
          ((\k v -> List (Tuple2 k v)) GovernanceActionId Vote) ->
        List ProposalProcedure ->
        Maybe integer ->
        Maybe integer ->
        TxInfo
    data ScriptContext | ScriptContext_match where
      ScriptContext : TxInfo -> data -> ScriptInfo -> ScriptContext
  in
  \(d : data) ->
    ScriptContext_match
      (case
         ScriptContext
         d
         [ (\(arg : data)
             (arg : data)
             (arg : data) ->
              ScriptContext
                (case
                   TxInfo
                   arg
                   [ (\(arg : data)
                       (arg : data)
                       (arg : data)
                       (arg : data)
                       (arg : data)
                       (arg : data)
                       (arg : data)
                       (arg : data)
                       (arg : data)
                       (arg : data)
                       (arg : data)
                       (arg : data)
                       (arg : data)
                       (arg : data)
                       (arg : data)
                       (arg : data) ->
                        TxInfo
                          (`$fUnsafeFromDataList_$cunsafeFromBuiltinData`
                             {TxInInfo}
                             `$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData`
                             arg)
                          (`$fUnsafeFromDataList_$cunsafeFromBuiltinData`
                             {TxInInfo}
                             `$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData`
                             arg)
                          (`$fUnsafeFromDataList_$cunsafeFromBuiltinData`
                             {TxOut}
                             `$fUnsafeFromDataTxOut_$cunsafeFromBuiltinData`
                             arg)
                          (unIData arg)
                          (`$fUnsafeFromDataMap_$cunsafeFromBuiltinData`
                             {bytestring}
                             {(\k v -> List (Tuple2 k v)) bytestring integer}
                             unBData
                             (`$fUnsafeFromDataMap_$cunsafeFromBuiltinData`
                                {bytestring}
                                {integer}
                                unBData
                                unIData)
                             arg)
                          (`$fUnsafeFromDataList_$cunsafeFromBuiltinData`
                             {TxCert}
                             `$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData`
                             arg)
                          (`$fUnsafeFromDataMap_$cunsafeFromBuiltinData`
                             {Credential}
                             {integer}
                             `$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                             unIData
                             arg)
                          (case
                             (Interval integer)
                             arg
                             [ (\(arg : data)
                                 (arg : data) ->
                                  Interval
                                    {integer}
                                    (case
                                       (LowerBound integer)
                                       arg
                                       [ (\(arg : data)
                                           (arg : data) ->
                                            LowerBound
                                              {integer}
                                              (`$fUnsafeFromDataExtended_$cunsafeFromBuiltinData`
                                                 {integer}
                                                 unIData
                                                 arg)
                                              (case bool arg [False, True])) ])
                                    (case
                                       (UpperBound integer)
                                       arg
                                       [ (\(arg : data)
                                           (arg : data) ->
                                            UpperBound
                                              {integer}
                                              (`$fUnsafeFromDataExtended_$cunsafeFromBuiltinData`
                                                 {integer}
                                                 unIData
                                                 arg)
                                              (case
                                                 bool
                                                 arg
                                                 [False, True])) ])) ])
                          (`$fUnsafeFromDataList_$cunsafeFromBuiltinData`
                             {bytestring}
                             unBData
                             arg)
                          (`$fUnsafeFromDataMap_$cunsafeFromBuiltinData`
                             {ScriptPurpose}
                             {data}
                             (\(d : data) ->
                                case
                                  ScriptPurpose
                                  d
                                  [ (\(arg : data) -> Minting (unBData arg))
                                  , (\(arg : data) ->
                                       Spending
                                         (`$fUnsafeFromDataTxOutRef_$cunsafeFromBuiltinData`
                                            arg))
                                  , (\(arg : data) ->
                                       Rewarding
                                         (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                                            arg))
                                  , (\(arg : data)
                                      (arg : data) ->
                                       Certifying
                                         (unIData arg)
                                         (`$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData`
                                            arg))
                                  , (\(arg : data) ->
                                       Voting
                                         (`$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData`
                                            arg))
                                  , (\(arg : data)
                                      (arg : data) ->
                                       Proposing
                                         (unIData arg)
                                         (`$fUnsafeFromDataProposalProcedure_$cunsafeFromBuiltinData`
                                            arg)) ])
                             `$fUnsafeFromDataBuiltinData_$cunsafeFromBuiltinData`
                             arg)
                          (`$fUnsafeFromDataMap_$cunsafeFromBuiltinData`
                             {bytestring}
                             {data}
                             unBData
                             `$fUnsafeFromDataBuiltinData_$cunsafeFromBuiltinData`
                             arg)
                          (unBData arg)
                          (`$fUnsafeFromDataMap_$cunsafeFromBuiltinData`
                             {Voter}
                             {(\k v -> List (Tuple2 k v))
                                GovernanceActionId
                                Vote}
                             `$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData`
                             (`$fUnsafeFromDataMap_$cunsafeFromBuiltinData`
                                {GovernanceActionId}
                                {Vote}
                                `$fUnsafeFromDataGovernanceAction_$cunsafeFromBuiltinData`
                                (\(d : data) ->
                                   case Vote d [VoteNo, VoteYes, Abstain]))
                             arg)
                          (`$fUnsafeFromDataList_$cunsafeFromBuiltinData`
                             {ProposalProcedure}
                             `$fUnsafeFromDataProposalProcedure_$cunsafeFromBuiltinData`
                             arg)
                          (`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                             {integer}
                             unIData
                             arg)
                          (`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                             {integer}
                             unIData
                             arg)) ])
                arg
                (case
                   ScriptInfo
                   arg
                   [ (\(arg : data) -> MintingScript (unBData arg))
                   , (\(arg : data)
                       (arg : data) ->
                        SpendingScript
                          (`$fUnsafeFromDataTxOutRef_$cunsafeFromBuiltinData`
                             arg)
                          (`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                             {data}
                             `$fUnsafeFromDataBuiltinData_$cunsafeFromBuiltinData`
                             arg))
                   , (\(arg : data) ->
                        RewardingScript
                          (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                             arg))
                   , (\(arg : data)
                       (arg : data) ->
                        CertifyingScript
                          (unIData arg)
                          (`$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData`
                             arg))
                   , (\(arg : data) ->
                        VotingScript
                          (`$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData`
                             arg))
                   , (\(arg : data)
                       (arg : data) ->
                        ProposingScript
                          (unIData arg)
                          (`$fUnsafeFromDataProposalProcedure_$cunsafeFromBuiltinData`
                             arg)) ])) ])
      {Unit}
      (\(ipv : TxInfo) (ipv : data) (ipv : ScriptInfo) ->
         case
           (all dead. Unit)
           (equalsInteger
              0
              (modInteger
                 (let
                   !eta : List TxOut
                     = TxInfo_match
                         ipv
                         {List TxOut}
                         (\(ds : List TxInInfo)
                           (ds : List TxInInfo)
                           (ds : List TxOut)
                           (ds : integer)
                           (ds :
                              (\k v -> List (Tuple2 k v))
                                bytestring
                                ((\k v -> List (Tuple2 k v))
                                   bytestring
                                   integer))
                           (ds : List TxCert)
                           (ds : (\k v -> List (Tuple2 k v)) Credential integer)
                           (ds : Interval integer)
                           (ds : List bytestring)
                           (ds : (\k v -> List (Tuple2 k v)) ScriptPurpose data)
                           (ds : (\k v -> List (Tuple2 k v)) bytestring data)
                           (ds : bytestring)
                           (ds :
                              (\k v -> List (Tuple2 k v))
                                Voter
                                ((\k v -> List (Tuple2 k v))
                                   GovernanceActionId
                                   Vote))
                           (ds : List ProposalProcedure)
                           (ds : Maybe integer)
                           (ds : Maybe integer) ->
                            ds)
                 in
                 go eta)
                 2))
           [ (/\dead ->
                let
                  !x : Unit = trace {Unit} "Odd number of outputs" Unit
                in
                error {Unit})
           , (/\dead -> Unit) ]
           {all dead. dead}))
  (Constr 0
     [ Constr 0
         [ List []
         , List []
         , List
             [ Constr 0
                 [ Constr 0 [Constr 0 [B #], Constr 1 []]
                 , Map [(B #, Map [(B #, I 1)])]
                 , Constr 0 []
                 , Constr 1 [] ] ]
         , I 10000
         , Map []
         , List []
         , Map []
         , Constr 0
             [ Constr 0 [Constr 0 [], Constr 1 []]
             , Constr 0 [Constr 2 [], Constr 1 []] ]
         , List []
         , Map []
         , Map []
         , B #
         , Map []
         , List []
         , Constr 1 []
         , Constr 1 [] ]
     , I 1
     , Constr 1 [Constr 0 [B #, I 0], Constr 1 []] ])
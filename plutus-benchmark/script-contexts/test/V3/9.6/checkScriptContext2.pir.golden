(let
    !`$fUnsafeFromDataBuiltinData_$cunsafeFromBuiltinData` : data -> data
      = \(d : data) -> d
    data (Extended :: * -> *) a | Extended_match where
      Finite : a -> Extended a
      NegInf : Extended a
      PosInf : Extended a
    !`$fUnsafeFromDataExtended_$cunsafeFromBuiltinData` :
       all a. (\a -> data -> a) a -> data -> Extended a
      = /\a ->
          \(`$dUnsafeFromData` : (\a -> data -> a) a) (d : data) ->
            case
              (Extended a)
              d
              [ (NegInf {a})
              , (\(ds : data) -> Finite {a} (`$dUnsafeFromData` ds))
              , (PosInf {a}) ]
    data GovernanceActionId | GovernanceActionId_match where
      GovernanceActionId : bytestring -> integer -> GovernanceActionId
    !`$fUnsafeFromDataGovernanceAction_$cunsafeFromBuiltinData` :
       data -> GovernanceActionId
      = \(d : data) ->
          case
            GovernanceActionId
            d
            [ (\(ds : data) (ds : data) ->
                 GovernanceActionId (unBData ds) (unIData ds)) ]
  in
  letrec
    data (List :: * -> *) a | List_match where
      Nil : List a
      Cons : a -> List a -> List a
  in
  let
    !`$fUnsafeFromDataList_$cunsafeFromBuiltinData` :
       all a. (\a -> data -> a) a -> data -> List a
      = /\a ->
          \(`$dUnsafeFromData` : (\a -> data -> a) a) ->
            letrec
              !go : list data -> List a
                = \(xs : list data) ->
                    case
                      (List a)
                      xs
                      [ (\(x : data) (xs : list data) ->
                           Cons {a} (`$dUnsafeFromData` x) (go xs))
                      , (Nil {a}) ]
            in
            \(d : data) -> go (unListData d)
    data Credential | Credential_match where
      PubKeyCredential : bytestring -> Credential
      ScriptCredential : bytestring -> Credential
    !`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData` : data -> Credential
      = \(d : data) ->
          case
            Credential
            d
            [ (\(ds : data) -> PubKeyCredential (unBData ds))
            , (\(ds : data) -> ScriptCredential (unBData ds)) ]
    data (Maybe :: * -> *) a | Maybe_match where
      Just : a -> Maybe a
      Nothing : Maybe a
    !`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData` :
       all a. (\a -> data -> a) a -> data -> Maybe a
      = /\a ->
          \(`$dUnsafeFromData` : (\a -> data -> a) a) (d : data) ->
            case
              (Maybe a)
              d
              [ (\(ds : data) -> Just {a} (`$dUnsafeFromData` ds))
              , (Nothing {a}) ]
    data (Tuple2 :: * -> * -> *) a b | Tuple2_match where
      Tuple2 : a -> b -> Tuple2 a b
    !`$fUnsafeFromDataMap_$cunsafeFromBuiltinData` :
       all k v.
         (\a -> data -> a) k ->
         (\a -> data -> a) v ->
         data ->
         (\k v -> List (Tuple2 k v)) k v
      = /\k v ->
          \(`$dUnsafeFromData` : (\a -> data -> a) k)
           (`$dUnsafeFromData` : (\a -> data -> a) v) ->
            letrec
              !go : list (pair data data) -> List (Tuple2 k v)
                = \(xs : list (pair data data)) ->
                    case
                      (List (Tuple2 k v))
                      xs
                      [ (\(tup : pair data data)
                          (tups : list (pair data data)) ->
                           Cons
                             {Tuple2 k v}
                             (Tuple2
                                {k}
                                {v}
                                (`$dUnsafeFromData`
                                   (case
                                      data
                                      tup
                                      [(\(l : data) (r : data) -> l)]))
                                (`$dUnsafeFromData`
                                   (case
                                      data
                                      tup
                                      [(\(l : data) (r : data) -> r)])))
                             (go tups))
                      , (Nil {Tuple2 k v}) ]
            in
            \(d : data) -> go (unMapData d)
    data ProtocolVersion | ProtocolVersion_match where
      ProtocolVersion : integer -> integer -> ProtocolVersion
    data Rational | Rational_match where
      Rational : integer -> integer -> Rational
    data GovernanceAction | GovernanceAction_match where
      HardForkInitiation :
        Maybe GovernanceActionId -> ProtocolVersion -> GovernanceAction
      InfoAction : GovernanceAction
      NewConstitution :
        Maybe GovernanceActionId -> Maybe bytestring -> GovernanceAction
      NoConfidence : Maybe GovernanceActionId -> GovernanceAction
      ParameterChange :
        Maybe GovernanceActionId -> data -> Maybe bytestring -> GovernanceAction
      TreasuryWithdrawals :
        (\k v -> List (Tuple2 k v)) Credential integer ->
        Maybe bytestring ->
        GovernanceAction
      UpdateCommittee :
        Maybe GovernanceActionId ->
        List Credential ->
        (\k v -> List (Tuple2 k v)) Credential integer ->
        Rational ->
        GovernanceAction
    data ProposalProcedure | ProposalProcedure_match where
      ProposalProcedure :
        integer -> Credential -> GovernanceAction -> ProposalProcedure
  in
  letrec
    !euclid : integer -> integer -> integer
      = \(x : integer) (y : integer) ->
          case
            (all dead. integer)
            (equalsInteger 0 y)
            [(/\dead -> euclid y (modInteger x y)), (/\dead -> x)]
            {all dead. dead}
  in
  let
    data Unit | Unit_match where
      Unit : Unit
  in
  letrec
    !unsafeRatio : integer -> integer -> Rational
      = \(n : integer) (d : integer) ->
          case
            (all dead. Rational)
            (equalsInteger 0 d)
            [ (/\dead ->
                 case
                   (all dead. Rational)
                   (lessThanInteger d 0)
                   [ (/\dead ->
                        let
                          !gcd' : integer = euclid n d
                        in
                        Rational
                          (quotientInteger n gcd')
                          (quotientInteger d gcd'))
                   , (/\dead ->
                        unsafeRatio
                          (subtractInteger 0 n)
                          (subtractInteger 0 d)) ]
                   {all dead. dead})
            , (/\dead ->
                 let
                   !x : Unit = trace {Unit} "PT3" Unit
                 in
                 error {Rational}) ]
            {all dead. dead}
  in
  let
    !`$fUnsafeFromDataProposalProcedure_$cunsafeFromBuiltinData` :
       data -> ProposalProcedure
      = \(d : data) ->
          case
            ProposalProcedure
            d
            [ (\(ds : data)
                (ds : data)
                (ds : data) ->
                 ProposalProcedure
                   (unIData ds)
                   (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData` ds)
                   (case
                      GovernanceAction
                      ds
                      [ (\(ds : data)
                          (ds : data)
                          (ds : data) ->
                           ParameterChange
                             (`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                                {GovernanceActionId}
                                `$fUnsafeFromDataGovernanceAction_$cunsafeFromBuiltinData`
                                ds)
                             ds
                             (`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                                {bytestring}
                                unBData
                                ds))
                      , (\(ds : data)
                          (ds : data) ->
                           HardForkInitiation
                             (`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                                {GovernanceActionId}
                                `$fUnsafeFromDataGovernanceAction_$cunsafeFromBuiltinData`
                                ds)
                             (case
                                ProtocolVersion
                                ds
                                [ (\(ds : data) (ds : data) ->
                                     ProtocolVersion
                                       (unIData ds)
                                       (unIData ds)) ]))
                      , (\(ds : data)
                          (ds : data) ->
                           TreasuryWithdrawals
                             (`$fUnsafeFromDataMap_$cunsafeFromBuiltinData`
                                {Credential}
                                {integer}
                                `$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                                unIData
                                ds)
                             (`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                                {bytestring}
                                unBData
                                ds))
                      , (\(ds : data) ->
                           NoConfidence
                             (`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                                {GovernanceActionId}
                                `$fUnsafeFromDataGovernanceAction_$cunsafeFromBuiltinData`
                                ds))
                      , (\(ds : data)
                          (ds : data)
                          (ds : data)
                          (ds : data) ->
                           UpdateCommittee
                             (`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                                {GovernanceActionId}
                                `$fUnsafeFromDataGovernanceAction_$cunsafeFromBuiltinData`
                                ds)
                             (`$fUnsafeFromDataList_$cunsafeFromBuiltinData`
                                {Credential}
                                `$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                                ds)
                             (`$fUnsafeFromDataMap_$cunsafeFromBuiltinData`
                                {Credential}
                                {integer}
                                `$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                                unIData
                                ds)
                             (Tuple2_match
                                {integer}
                                {integer}
                                (case
                                   (Tuple2 integer integer)
                                   ds
                                   [ (\(ds : data) (ds : data) ->
                                        Tuple2
                                          {integer}
                                          {integer}
                                          (unIData ds)
                                          (unIData ds)) ])
                                {Rational}
                                (\(a : integer) (b : integer) ->
                                   unsafeRatio a b)))
                      , (\(ds : data)
                          (ds : data) ->
                           NewConstitution
                             (`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                                {GovernanceActionId}
                                `$fUnsafeFromDataGovernanceAction_$cunsafeFromBuiltinData`
                                ds)
                             (case
                                (Maybe bytestring)
                                ds
                                [ (\(ds : data) ->
                                     `$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                                       {bytestring}
                                       unBData
                                       ds) ]))
                      , InfoAction ])) ]
    data Voter | Voter_match where
      CommitteeVoter : Credential -> Voter
      DRepVoter : Credential -> Voter
      StakePoolVoter : bytestring -> Voter
    !`$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData` : data -> Voter
      = \(d : data) ->
          case
            Voter
            d
            [ (\(ds : data) ->
                 CommitteeVoter
                   (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData` ds))
            , (\(ds : data) ->
                 DRepVoter
                   (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData` ds))
            , (\(ds : data) -> StakePoolVoter (unBData ds)) ]
    data DRep | DRep_match where
      DRep : Credential -> DRep
      DRepAlwaysAbstain : DRep
      DRepAlwaysNoConfidence : DRep
    !`$fUnsafeFromDataDRep_$cunsafeFromBuiltinData` : data -> DRep
      = \(d : data) ->
          case
            DRep
            d
            [ (\(ds : data) ->
                 DRep (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData` ds))
            , DRepAlwaysAbstain
            , DRepAlwaysNoConfidence ]
    data Delegatee | Delegatee_match where
      DelegStake : bytestring -> Delegatee
      DelegStakeVote : bytestring -> DRep -> Delegatee
      DelegVote : DRep -> Delegatee
    !`$fUnsafeFromDataDelegatee_$cunsafeFromBuiltinData` : data -> Delegatee
      = \(d : data) ->
          case
            Delegatee
            d
            [ (\(ds : data) -> DelegStake (unBData ds))
            , (\(ds : data) ->
                 DelegVote (`$fUnsafeFromDataDRep_$cunsafeFromBuiltinData` ds))
            , (\(ds : data) (ds : data) ->
                 DelegStakeVote
                   (unBData ds)
                   (`$fUnsafeFromDataDRep_$cunsafeFromBuiltinData` ds)) ]
    data TxCert | TxCert_match where
      TxCertAuthHotCommittee : Credential -> Credential -> TxCert
      TxCertDelegStaking : Credential -> Delegatee -> TxCert
      TxCertPoolRegister : bytestring -> bytestring -> TxCert
      TxCertPoolRetire : bytestring -> integer -> TxCert
      TxCertRegDRep : Credential -> integer -> TxCert
      TxCertRegDeleg : Credential -> Delegatee -> integer -> TxCert
      TxCertRegStaking : Credential -> Maybe integer -> TxCert
      TxCertResignColdCommittee : Credential -> TxCert
      TxCertUnRegDRep : Credential -> integer -> TxCert
      TxCertUnRegStaking : Credential -> Maybe integer -> TxCert
      TxCertUpdateDRep : Credential -> TxCert
    !`$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData` : data -> TxCert
      = \(eta : data) ->
          case
            TxCert
            eta
            [ (\(ds : data) (ds : data) ->
                 TxCertRegStaking
                   (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData` ds)
                   (`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                      {integer}
                      unIData
                      ds))
            , (\(ds : data) (ds : data) ->
                 TxCertUnRegStaking
                   (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData` ds)
                   (`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                      {integer}
                      unIData
                      ds))
            , (\(ds : data) (ds : data) ->
                 TxCertDelegStaking
                   (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData` ds)
                   (`$fUnsafeFromDataDelegatee_$cunsafeFromBuiltinData` ds))
            , (\(ds : data) (ds : data) (ds : data) ->
                 TxCertRegDeleg
                   (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData` ds)
                   (`$fUnsafeFromDataDelegatee_$cunsafeFromBuiltinData` ds)
                   (unIData ds))
            , (\(ds : data) (ds : data) ->
                 TxCertRegDRep
                   (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData` ds)
                   (unIData ds))
            , (\(ds : data) ->
                 TxCertUpdateDRep
                   (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData` ds))
            , (\(ds : data) (ds : data) ->
                 TxCertUnRegDRep
                   (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData` ds)
                   (unIData ds))
            , (\(ds : data) (ds : data) ->
                 TxCertPoolRegister (unBData ds) (unBData ds))
            , (\(ds : data) (ds : data) ->
                 TxCertPoolRetire (unBData ds) (unIData ds))
            , (\(ds : data) (ds : data) ->
                 TxCertAuthHotCommittee
                   (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData` ds)
                   (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData` ds))
            , (\(ds : data) ->
                 TxCertResignColdCommittee
                   (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData` ds)) ]
    data TxOutRef | TxOutRef_match where
      TxOutRef : bytestring -> integer -> TxOutRef
    !`$fUnsafeFromDataTxOutRef_$cunsafeFromBuiltinData` : data -> TxOutRef
      = \(d : data) ->
          case
            TxOutRef
            d
            [(\(ds : data) (ds : data) -> TxOutRef (unBData ds) (unIData ds))]
    data StakingCredential | StakingCredential_match where
      StakingHash : Credential -> StakingCredential
      StakingPtr : integer -> integer -> integer -> StakingCredential
    data Address | Address_match where
      Address : Credential -> Maybe StakingCredential -> Address
    data OutputDatum | OutputDatum_match where
      NoOutputDatum : OutputDatum
      OutputDatum : data -> OutputDatum
      OutputDatumHash : bytestring -> OutputDatum
    data TxOut | TxOut_match where
      TxOut :
        Address ->
        (\k v -> List (Tuple2 k v))
          bytestring
          ((\k v -> List (Tuple2 k v)) bytestring integer) ->
        OutputDatum ->
        Maybe bytestring ->
        TxOut
    !`$fUnsafeFromDataTxOut_$cunsafeFromBuiltinData` :
       data -> TxOut
      = \(eta : data) ->
          case
            TxOut
            eta
            [ (\(ds : data)
                (ds : data)
                (ds : data)
                (ds : data) ->
                 TxOut
                   (case
                      Address
                      ds
                      [ (\(ds : data)
                          (ds : data) ->
                           Address
                             (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                                ds)
                             (`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                                {StakingCredential}
                                (\(d : data) ->
                                   case
                                     StakingCredential
                                     d
                                     [ (\(ds : data) ->
                                          StakingHash
                                            (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                                               ds))
                                     , (\(ds : data) (ds : data) (ds : data) ->
                                          StakingPtr
                                            (unIData ds)
                                            (unIData ds)
                                            (unIData ds)) ])
                                ds)) ])
                   (`$fUnsafeFromDataMap_$cunsafeFromBuiltinData`
                      {bytestring}
                      {(\k v -> List (Tuple2 k v)) bytestring integer}
                      unBData
                      (`$fUnsafeFromDataMap_$cunsafeFromBuiltinData`
                         {bytestring}
                         {integer}
                         unBData
                         unIData)
                      ds)
                   (case
                      OutputDatum
                      ds
                      [ NoOutputDatum
                      , (\(ds : data) -> OutputDatumHash (unBData ds))
                      , (\(ds : data) -> OutputDatum ds) ])
                   (`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                      {bytestring}
                      unBData
                      ds)) ]
    data TxInInfo | TxInInfo_match where
      TxInInfo : TxOutRef -> TxOut -> TxInInfo
    !`$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData` : data -> TxInInfo
      = \(d : data) ->
          case
            TxInInfo
            d
            [ (\(ds : data) (ds : data) ->
                 TxInInfo
                   (`$fUnsafeFromDataTxOutRef_$cunsafeFromBuiltinData` ds)
                   (`$fUnsafeFromDataTxOut_$cunsafeFromBuiltinData` ds)) ]
    data ScriptInfo | ScriptInfo_match where
      CertifyingScript : integer -> TxCert -> ScriptInfo
      MintingScript : bytestring -> ScriptInfo
      ProposingScript : integer -> ProposalProcedure -> ScriptInfo
      RewardingScript : Credential -> ScriptInfo
      SpendingScript : TxOutRef -> Maybe data -> ScriptInfo
      VotingScript : Voter -> ScriptInfo
    data (LowerBound :: * -> *) a | LowerBound_match where
      LowerBound : Extended a -> bool -> LowerBound a
    data (UpperBound :: * -> *) a | UpperBound_match where
      UpperBound : Extended a -> bool -> UpperBound a
    data (Interval :: * -> *) a | Interval_match where
      Interval : LowerBound a -> UpperBound a -> Interval a
    data ScriptPurpose | ScriptPurpose_match where
      Certifying : integer -> TxCert -> ScriptPurpose
      Minting : bytestring -> ScriptPurpose
      Proposing : integer -> ProposalProcedure -> ScriptPurpose
      Rewarding : Credential -> ScriptPurpose
      Spending : TxOutRef -> ScriptPurpose
      Voting : Voter -> ScriptPurpose
    data Vote | Vote_match where
      Abstain : Vote
      VoteNo : Vote
      VoteYes : Vote
    data TxInfo | TxInfo_match where
      TxInfo :
        List TxInInfo ->
        List TxInInfo ->
        List TxOut ->
        integer ->
        (\k v -> List (Tuple2 k v))
          bytestring
          ((\k v -> List (Tuple2 k v)) bytestring integer) ->
        List TxCert ->
        (\k v -> List (Tuple2 k v)) Credential integer ->
        Interval integer ->
        List bytestring ->
        (\k v -> List (Tuple2 k v)) ScriptPurpose data ->
        (\k v -> List (Tuple2 k v)) bytestring data ->
        bytestring ->
        (\k v -> List (Tuple2 k v))
          Voter
          ((\k v -> List (Tuple2 k v)) GovernanceActionId Vote) ->
        List ProposalProcedure ->
        Maybe integer ->
        Maybe integer ->
        TxInfo
    data ScriptContext | ScriptContext_match where
      ScriptContext : TxInfo -> data -> ScriptInfo -> ScriptContext
  in
  \(d : data) ->
    let
      !ds :
         ScriptContext
        = case
            ScriptContext
            d
            [ (\(ds : data)
                (ds : data)
                (ds : data) ->
                 ScriptContext
                   (case
                      TxInfo
                      ds
                      [ (\(ds : data)
                          (ds : data)
                          (ds : data)
                          (ds : data)
                          (ds : data)
                          (ds : data)
                          (ds : data)
                          (ds : data)
                          (ds : data)
                          (ds : data)
                          (ds : data)
                          (ds : data)
                          (ds : data)
                          (ds : data)
                          (ds : data)
                          (ds : data) ->
                           TxInfo
                             (`$fUnsafeFromDataList_$cunsafeFromBuiltinData`
                                {TxInInfo}
                                `$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData`
                                ds)
                             (`$fUnsafeFromDataList_$cunsafeFromBuiltinData`
                                {TxInInfo}
                                `$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData`
                                ds)
                             (`$fUnsafeFromDataList_$cunsafeFromBuiltinData`
                                {TxOut}
                                `$fUnsafeFromDataTxOut_$cunsafeFromBuiltinData`
                                ds)
                             (unIData ds)
                             (`$fUnsafeFromDataMap_$cunsafeFromBuiltinData`
                                {bytestring}
                                {(\k v -> List (Tuple2 k v)) bytestring integer}
                                unBData
                                (`$fUnsafeFromDataMap_$cunsafeFromBuiltinData`
                                   {bytestring}
                                   {integer}
                                   unBData
                                   unIData)
                                ds)
                             (`$fUnsafeFromDataList_$cunsafeFromBuiltinData`
                                {TxCert}
                                `$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData`
                                ds)
                             (`$fUnsafeFromDataMap_$cunsafeFromBuiltinData`
                                {Credential}
                                {integer}
                                `$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                                unIData
                                ds)
                             (case
                                (Interval integer)
                                ds
                                [ (\(ds : data)
                                    (ds : data) ->
                                     Interval
                                       {integer}
                                       (case
                                          (LowerBound integer)
                                          ds
                                          [ (\(ds : data)
                                              (ds : data) ->
                                               LowerBound
                                                 {integer}
                                                 (`$fUnsafeFromDataExtended_$cunsafeFromBuiltinData`
                                                    {integer}
                                                    unIData
                                                    ds)
                                                 (case
                                                    bool
                                                    ds
                                                    [False, True])) ])
                                       (case
                                          (UpperBound integer)
                                          ds
                                          [ (\(ds : data)
                                              (ds : data) ->
                                               UpperBound
                                                 {integer}
                                                 (`$fUnsafeFromDataExtended_$cunsafeFromBuiltinData`
                                                    {integer}
                                                    unIData
                                                    ds)
                                                 (case
                                                    bool
                                                    ds
                                                    [False, True])) ])) ])
                             (`$fUnsafeFromDataList_$cunsafeFromBuiltinData`
                                {bytestring}
                                unBData
                                ds)
                             (`$fUnsafeFromDataMap_$cunsafeFromBuiltinData`
                                {ScriptPurpose}
                                {data}
                                (\(d : data) ->
                                   case
                                     ScriptPurpose
                                     d
                                     [ (\(ds : data) -> Minting (unBData ds))
                                     , (\(ds : data) ->
                                          Spending
                                            (`$fUnsafeFromDataTxOutRef_$cunsafeFromBuiltinData`
                                               ds))
                                     , (\(ds : data) ->
                                          Rewarding
                                            (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                                               ds))
                                     , (\(ds : data)
                                         (ds : data) ->
                                          Certifying
                                            (unIData ds)
                                            (`$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData`
                                               ds))
                                     , (\(ds : data) ->
                                          Voting
                                            (`$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData`
                                               ds))
                                     , (\(ds : data)
                                         (ds : data) ->
                                          Proposing
                                            (unIData ds)
                                            (`$fUnsafeFromDataProposalProcedure_$cunsafeFromBuiltinData`
                                               ds)) ])
                                `$fUnsafeFromDataBuiltinData_$cunsafeFromBuiltinData`
                                ds)
                             (`$fUnsafeFromDataMap_$cunsafeFromBuiltinData`
                                {bytestring}
                                {data}
                                unBData
                                `$fUnsafeFromDataBuiltinData_$cunsafeFromBuiltinData`
                                ds)
                             (unBData ds)
                             (`$fUnsafeFromDataMap_$cunsafeFromBuiltinData`
                                {Voter}
                                {(\k v -> List (Tuple2 k v))
                                   GovernanceActionId
                                   Vote}
                                `$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData`
                                (`$fUnsafeFromDataMap_$cunsafeFromBuiltinData`
                                   {GovernanceActionId}
                                   {Vote}
                                   `$fUnsafeFromDataGovernanceAction_$cunsafeFromBuiltinData`
                                   (\(d : data) ->
                                      case Vote d [VoteNo, VoteYes, Abstain]))
                                ds)
                             (`$fUnsafeFromDataList_$cunsafeFromBuiltinData`
                                {ProposalProcedure}
                                `$fUnsafeFromDataProposalProcedure_$cunsafeFromBuiltinData`
                                ds)
                             (`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                                {integer}
                                unIData
                                ds)
                             (`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                                {integer}
                                unIData
                                ds)) ])
                   ds
                   (case
                      ScriptInfo
                      ds
                      [ (\(ds : data) -> MintingScript (unBData ds))
                      , (\(ds : data)
                          (ds : data) ->
                           SpendingScript
                             (`$fUnsafeFromDataTxOutRef_$cunsafeFromBuiltinData`
                                ds)
                             (`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
                                {data}
                                `$fUnsafeFromDataBuiltinData_$cunsafeFromBuiltinData`
                                ds))
                      , (\(ds : data) ->
                           RewardingScript
                             (`$fUnsafeFromDataCredential_$cunsafeFromBuiltinData`
                                ds))
                      , (\(ds : data)
                          (ds : data) ->
                           CertifyingScript
                             (unIData ds)
                             (`$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData`
                                ds))
                      , (\(ds : data) ->
                           VotingScript
                             (`$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData`
                                ds))
                      , (\(ds : data)
                          (ds : data) ->
                           ProposingScript
                             (unIData ds)
                             (`$fUnsafeFromDataProposalProcedure_$cunsafeFromBuiltinData`
                                ds)) ])) ]
    in
    Unit)
  (Constr 0
     [ Constr 0
         [ List []
         , List []
         , List
             [ Constr 0
                 [ Constr 0 [Constr 0 [B #], Constr 1 []]
                 , Map [(B #, Map [(B #, I 1)])]
                 , Constr 0 []
                 , Constr 1 [] ] ]
         , I 10000
         , Map []
         , List []
         , Map []
         , Constr 0
             [ Constr 0 [Constr 0 [], Constr 1 []]
             , Constr 0 [Constr 2 [], Constr 1 []] ]
         , List []
         , Map []
         , Map []
         , B #
         , Map []
         , List []
         , Constr 1 []
         , Constr 1 [] ]
     , I 1
     , Constr 1 [Constr 0 [B #, I 0], Constr 1 []] ])
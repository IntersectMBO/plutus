(letrec
    ~go : list data -> integer -> integer
      = (let
            r = integer -> integer
          in
          \(z : r) (f : data -> list data -> r) (xs : list data) ->
            chooseList
              {data}
              {all dead. r}
              xs
              (/\dead -> z)
              (/\dead -> f (headList {data} xs) (tailList {data} xs))
              {r})
          (\(x : integer) -> x)
          (\(ds : data) (t : list data) (eta : integer) ->
             addInteger 1 (go t eta))
  in
  let
    data Bool | Bool_match where
      True : Bool
      False : Bool
    data (Maybe :: * -> *) a | Maybe_match where
      Just : a -> Maybe a
      Nothing : Maybe a
    data Unit | Unit_match where
      Unit : Unit
    !`$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData` :
       all a. (\a -> data -> a) a -> data -> Maybe a
      = /\a ->
          \(`$dUnsafeFromData` : (\a -> data -> a) a) (d : data) ->
            let
              !tup : pair integer (list data) = unConstrData d
              !index : integer = fstPair {integer} {list data} tup
              !args : list data = sndPair {integer} {list data} tup
            in
            Bool_match
              (ifThenElse {Bool} (equalsInteger 1 index) True False)
              {all dead. Maybe a}
              (/\dead -> Nothing {a})
              (/\dead ->
                 Bool_match
                   (ifThenElse {Bool} (equalsInteger 0 index) True False)
                   {all dead. Maybe a}
                   (/\dead ->
                      Just {a} (`$dUnsafeFromData` (headList {data} args)))
                   (/\dead ->
                      let
                        !x : Unit = trace {Unit} "PT1" Unit
                      in
                      error {Maybe a})
                   {all dead. dead})
              {all dead. dead}
  in
  \(d : data) ->
    let
      ~constrArgs : list data = sndPair {integer} {list data} (unConstrData d)
      ~rest : list data = tailList {data} constrArgs
      !ds : data = headList {data} constrArgs
      ~constrArgs : list data = sndPair {integer} {list data} (unConstrData ds)
      ~rest : list data = tailList {data} constrArgs
      ~rest : list data = tailList {data} rest
      ~rest : list data = tailList {data} rest
      ~rest : list data = tailList {data} rest
      ~rest : list data = tailList {data} rest
      ~rest : list data = tailList {data} rest
      ~rest : list data = tailList {data} rest
      ~rest : list data = tailList {data} rest
      ~rest : list data = tailList {data} rest
      ~rest : list data = tailList {data} rest
      ~rest : list data = tailList {data} rest
      ~rest : list data = tailList {data} rest
      ~rest : list data = tailList {data} rest
      ~rest : list data = tailList {data} rest
      !ds : data = headList {data} rest
      !ds : data = headList {data} (tailList {data} rest)
      !ds : (\a -> list data) data = unListData (headList {data} constrArgs)
      !ds : (\a -> list data) data = unListData (headList {data} rest)
      !ds : (\a -> list data) data = unListData (headList {data} rest)
      !ds : integer = unIData (headList {data} rest)
      !ds :
         (\k a -> list (pair data data))
           bytestring
           ((\k a -> list (pair data data)) bytestring integer)
        = unMapData (headList {data} rest)
      !ds : (\a -> list data) data = unListData (headList {data} rest)
      !ds : (\k a -> list (pair data data)) data integer
        = unMapData (headList {data} rest)
      !ds : (\a -> data) integer = headList {data} rest
      !ds : (\a -> list data) bytestring = unListData (headList {data} rest)
      !ds : (\k a -> list (pair data data)) data data
        = unMapData (headList {data} rest)
      !ds : (\k a -> list (pair data data)) bytestring data
        = unMapData (headList {data} rest)
      !ds : bytestring = unBData (headList {data} rest)
      !ds :
         (\k a -> list (pair data data))
           data
           ((\k a -> list (pair data data)) data data)
        = unMapData (headList {data} rest)
      !ds : (\a -> list data) data = unListData (headList {data} rest)
      !ds : Maybe integer
        = `$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
            {integer}
            unIData
            (headList {data} rest)
      !ds : Maybe integer
        = `$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData`
            {integer}
            unIData
            (headList {data} (tailList {data} rest))
    in
    Bool_match
      (ifThenElse {Bool} (equalsInteger 0 (modInteger (go ds 0) 2)) True False)
      {all dead. Unit}
      (/\dead -> Unit)
      (/\dead ->
         let
           !x : Unit = trace {Unit} "Odd number of outputs" Unit
         in
         error {Unit})
      {all dead. dead})
  (Constr 0
     [ Constr 0
         [ List []
         , List []
         , List
             [ Constr 0
                 [ Constr 0 [Constr 0 [B #], Constr 1 []]
                 , Map [(B #, Map [(B #, I 1)])]
                 , Constr 0 []
                 , Constr 1 [] ] ]
         , I 10000
         , Map []
         , List []
         , Map []
         , Constr 0
             [ Constr 0 [Constr 0 [], Constr 1 []]
             , Constr 0 [Constr 2 [], Constr 1 []] ]
         , List []
         , Map []
         , Map []
         , B #
         , Map []
         , List []
         , Constr 1 []
         , Constr 1 [] ]
     , I 1
     , Constr 1 [Constr 0 [B #, I 0], Constr 1 []] ])
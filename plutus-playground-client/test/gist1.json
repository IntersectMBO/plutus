{
  "_gistTruncated": false,
  "_gistOwner": {
    "_ownerHtmlUrl": "https://github.com/krisajenkins",
    "_ownerLogin": "krisajenkins"
  },
  "_gistHtmlUrl": "https://gist.github.com/4fdfdd0b0a608a1ef6931ce2ffda8058",
  "_gistFiles": [
    {
      "_gistFileTruncated": false,
      "_gistFileContent": "-- | Vesting scheme as a PLC contract\nmodule Vesting where\n\nimport           Control.Monad                (void)\n\nimport qualified Language.PlutusTx            as PlutusTx\nimport qualified Ledger.Interval              as Interval\nimport qualified Language.PlutusTx.Prelude    as P\nimport           Ledger\nimport           Ledger.Ada                   (Ada)\nimport qualified Ledger.Ada.TH                as Ada\nimport           Ledger.Validation\nimport           Wallet\nimport           Playground.Contract\n\n-- | Tranche of a vesting scheme.\ndata VestingTranche = VestingTranche {\n    vestingTrancheDate   :: Slot,\n    vestingTrancheAmount :: Ada\n    } deriving (Generic, ToJSON, FromJSON, ToSchema)\n\nPlutusTx.makeLift ''VestingTranche\n\n-- | A vesting scheme consisting of two tranches. Each tranche defines a date\n--   (slot) after which an additional amount of money can be spent.\ndata Vesting = Vesting {\n    vestingTranche1 :: VestingTranche,\n    vestingTranche2 :: VestingTranche,\n    vestingOwner    :: PubKey\n    } deriving (Generic, ToJSON, FromJSON, ToSchema)\n\nPlutusTx.makeLift ''Vesting\n\n-- | The total amount of money vested\ntotalAmount :: Vesting -> Ada\ntotalAmount Vesting{..} =\n    vestingTrancheAmount vestingTranche1 + vestingTrancheAmount vestingTranche2\n\n-- | Data script for vesting utxo\ndata VestingData = VestingData {\n    vestingDataHash    :: ValidatorHash, -- ^ Hash of the validator script\n    vestingDataPaidOut :: Ada -- ^ How much of the vested value has already been retrieved\n    } deriving (Eq, Generic, ToJSON, FromJSON, ToSchema)\n\nPlutusTx.makeLift ''VestingData\n\n-- | Lock some funds with the vesting validator script and return a\n--   [[VestingData]] representing the current state of the process\nvestFunds :: MonadWallet m => Vesting -> Ada -> m ()\nvestFunds vst adaAmount = do\n    _ <- if adaAmount < totalAmount vst then throwOtherError \"Value must not be smaller than vested amount\" else pure ()\n    let value = $$(Ada.toValue) adaAmount\n    (payment, change) <- createPaymentWithChange value\n    let contractAddress = Ledger.scriptAddress (validatorScript vst)\n        dataScript      = DataScript (Ledger.lifted vd)\n        vd =  VestingData (validatorScriptHash vst) 0\n    payToScript_ defaultSlotRange contractAddress value dataScript\n\n-- | Register this wallet as the owner of the vesting scheme. At each of the\n--   two dates (tranche 1, tranche 2) we take out the funds that have been\n--   released so far.\n--   This function has to be called before the funds are vested, so that the\n--   wallet can start watching the contract address for changes.\nregisterVestingOwner :: MonadWallet m => Vesting -> m ()\nregisterVestingOwner v = do\n    ourPubKey <- ownPubKey\n    let\n        o = vestingOwner v\n        addr = Ledger.scriptAddress (validatorScript v)\n    _ <- if o /= ourPubKey\n         then throwOtherError \"Vesting scheme is not owned by this wallet\"\n         else startWatching addr\n\n    register (tranche2Trigger v) (tranche2Handler v)\n    -- ^ This runs `tranche2Handler` as soon as the final funds are released.\n    --   It is possible to take out funds from tranche 1 earlier than that\n    --   (as explained in the script code, below) but doing so requires some\n    --   low-level code dealing with the transaction outputs, because we don't\n    --   have a nice interface for this in 'Wallet.API' yet.\n\n\nvalidatorScriptHash :: Vesting -> ValidatorHash\nvalidatorScriptHash =\n    plcValidatorDigest\n    . Ledger.getAddress\n    . Ledger.scriptAddress\n    . validatorScript\n\nvalidatorScript :: Vesting -> ValidatorScript\nvalidatorScript v = ValidatorScript val where\n    val = Ledger.applyScript inner (Ledger.lifted v)\n    inner = $$(Ledger.compileScript [|| \\Vesting{..} () VestingData{..} (p :: PendingTx) ->\n        let\n\n            eqPk :: PubKey -> PubKey -> Bool\n            eqPk = $$(eqPubKey)\n\n            infixr 3 &&\n            (&&) :: Bool -> Bool -> Bool\n            (&&) = $$(P.and)\n\n            PendingTx _ os _ _ _ range = p\n            VestingTranche d1 a1 = vestingTranche1\n            VestingTranche d2 a2 = vestingTranche2\n\n            -- We assume here that the txn outputs are always given in the same\n            -- order (1 PubKey output, followed by 0 or 1 script outputs)\n            amountSpent :: Ada\n            amountSpent = case os of\n                PendingTxOut v' _ (PubKeyTxOut pk):_\n                    | pk `eqPk` vestingOwner -> $$(Ada.fromValue) v'\n                _ -> $$(P.error) ()\n\n            -- Value that has been released so far under the scheme\n            currentThreshold =\n                if $$(Interval.contains) ($$(Interval.from) d1) range\n                then if $$(Interval.contains) ($$(Interval.from) d2) range\n                    -- everything can be spent\n                        then $$(Ada.plus) a1 a2\n                        -- only the first tranche can be spent (we are between d1 and d2)\n                        else a1\n                -- Nothing has been released yet\n                else $$(Ada.zero)\n\n\n            paidOut = vestingDataPaidOut\n            newAmount = $$(Ada.plus) paidOut amountSpent\n\n            -- Verify that the amount taken out, plus the amount already taken\n            -- out before, does not exceed the threshold that is currently\n            -- allowed\n            amountsValid = $$(Ada.leq) newAmount currentThreshold\n\n            -- Check that the remaining output is locked by the same validation\n            -- script\n            txnOutputsValid = case os of\n                _:PendingTxOut _ (Just (vl', _)) DataTxOut:_ -> $$(eqValidator) vl' vestingDataHash\n                -- If there is no data script in the output list,\n                -- we only accept the transaction if we are past the\n                -- date of the final tranche.\n                _ -> $$(Interval.before) d2 range\n\n            isValid = amountsValid && txnOutputsValid\n        in\n        if isValid then () else $$(P.error) () ||])\n\ntranche1Trigger :: Vesting -> EventTrigger\ntranche1Trigger v =\n    let VestingTranche dt1 _ = vestingTranche1 v in\n    (slotRangeT (singleton dt1))\n\n-- | Collect the remaining funds at the end of tranche 2\ntranche2Handler :: MonadWallet m => Vesting -> EventHandler m\ntranche2Handler vesting = EventHandler (\\_ -> do\n    logMsg \"Collecting tranche 2\"\n    let vlscript = validatorScript vesting\n        redeemerScript  = Ledger.unitRedeemer\n        VestingTranche dt2 _ = vestingTranche2 vesting\n        range = intervalFrom dt2\n    collectFromScript range vlscript redeemerScript)\n\ntranche2Trigger :: Vesting -> EventTrigger\ntranche2Trigger v =\n    let VestingTranche dt2 _ = vestingTranche2 v in\n    (slotRangeT (singleton dt2))\n\n$(mkFunctions ['vestFunds, 'registerVestingOwner])\n",
      "_gistFileLanguage": "Haskell",
      "_gistFileType": "text/plain",
      "_gistFileFilename": "Playground.hs"
    },
    {
      "_gistFileTruncated": false,
      "_gistFileContent": "[0,[{\"wallets\":[{\"simulatorWalletWallet\":{\"getWallet\":1},\"simulatorWalletBalance\":{\"getAda\":10}},{\"simulatorWalletWallet\":{\"getWallet\":2},\"simulatorWalletBalance\":{\"getAda\":10}}],\"signatures\":[{\"functionName\":\"vestFunds\",\"argumentSchema\":[{\"contents\":[[\"vestingOwner\",{\"contents\":[[\"getPubKey\",{\"tag\":\"SimpleIntSchema\"}]],\"tag\":\"SimpleObjectSchema\"}],[\"vestingTranche2\",{\"contents\":[[\"vestingTrancheAmount\",{\"contents\":[[\"getAda\",{\"tag\":\"SimpleIntSchema\"}]],\"tag\":\"SimpleObjectSchema\"}],[\"vestingTrancheDate\",{\"contents\":[[\"getSlot\",{\"tag\":\"SimpleIntSchema\"}]],\"tag\":\"SimpleObjectSchema\"}]],\"tag\":\"SimpleObjectSchema\"}],[\"vestingTranche1\",{\"contents\":[[\"vestingTrancheAmount\",{\"contents\":[[\"getAda\",{\"tag\":\"SimpleIntSchema\"}]],\"tag\":\"SimpleObjectSchema\"}],[\"vestingTrancheDate\",{\"contents\":[[\"getSlot\",{\"tag\":\"SimpleIntSchema\"}]],\"tag\":\"SimpleObjectSchema\"}]],\"tag\":\"SimpleObjectSchema\"}]],\"tag\":\"SimpleObjectSchema\"},{\"contents\":[[\"getAda\",{\"tag\":\"SimpleIntSchema\"}]],\"tag\":\"SimpleObjectSchema\"}]},{\"functionName\":\"registerVestingOwner\",\"argumentSchema\":[{\"contents\":[[\"vestingOwner\",{\"contents\":[[\"getPubKey\",{\"tag\":\"SimpleIntSchema\"}]],\"tag\":\"SimpleObjectSchema\"}],[\"vestingTranche2\",{\"contents\":[[\"vestingTrancheAmount\",{\"contents\":[[\"getAda\",{\"tag\":\"SimpleIntSchema\"}]],\"tag\":\"SimpleObjectSchema\"}],[\"vestingTrancheDate\",{\"contents\":[[\"getSlot\",{\"tag\":\"SimpleIntSchema\"}]],\"tag\":\"SimpleObjectSchema\"}]],\"tag\":\"SimpleObjectSchema\"}],[\"vestingTranche1\",{\"contents\":[[\"vestingTrancheAmount\",{\"contents\":[[\"getAda\",{\"tag\":\"SimpleIntSchema\"}]],\"tag\":\"SimpleObjectSchema\"}],[\"vestingTrancheDate\",{\"contents\":[[\"getSlot\",{\"tag\":\"SimpleIntSchema\"}]],\"tag\":\"SimpleObjectSchema\"}]],\"tag\":\"SimpleObjectSchema\"}]],\"tag\":\"SimpleObjectSchema\"}]},{\"functionName\":\"payToPublicKey_\",\"argumentSchema\":[{\"contents\":[[\"ivTo\",{\"contents\":[[\"getSlot\",{\"tag\":\"SimpleIntSchema\"}]],\"tag\":\"SimpleObjectSchema\"}],[\"ivFrom\",{\"contents\":[[\"getSlot\",{\"tag\":\"SimpleIntSchema\"}]],\"tag\":\"SimpleObjectSchema\"}]],\"tag\":\"SimpleObjectSchema\"},{\"contents\":[[\"getValue\",{\"contents\":{\"contents\":[{\"tag\":\"SimpleIntSchema\"},{\"tag\":\"SimpleIntSchema\"}],\"tag\":\"SimpleTupleSchema\"},\"tag\":\"SimpleArraySchema\"}]],\"tag\":\"SimpleObjectSchema\"},{\"contents\":[[\"getPubKey\",{\"tag\":\"SimpleIntSchema\"}]],\"tag\":\"SimpleObjectSchema\"}]}],\"actions\":[{\"simulatorWallet\":{\"simulatorWalletWallet\":{\"getWallet\":1},\"simulatorWalletBalance\":{\"getAda\":10}},\"functionSchema\":{\"functionName\":\"payToPublicKey_\",\"argumentSchema\":[{\"contents\":[{\"contents\":[[\"ivTo\",{\"contents\":[[\"getSlot\",{\"tag\":\"SimpleIntSchema\"}]],\"tag\":\"SimpleObjectSchema\"}],[\"ivFrom\",{\"contents\":[[\"getSlot\",{\"tag\":\"SimpleIntSchema\"}]],\"tag\":\"SimpleObjectSchema\"}]],\"tag\":\"SimpleObjectSchema\"},[[\"ivTo\",{\"contents\":[{\"contents\":[[\"getSlot\",{\"tag\":\"SimpleIntSchema\"}]],\"tag\":\"SimpleObjectSchema\"},[[\"getSlot\",{\"contents\":null,\"tag\":\"SimpleInt\"}]]],\"tag\":\"SimpleObject\"}],[\"ivFrom\",{\"contents\":[{\"contents\":[[\"getSlot\",{\"tag\":\"SimpleIntSchema\"}]],\"tag\":\"SimpleObjectSchema\"},[[\"getSlot\",{\"contents\":null,\"tag\":\"SimpleInt\"}]]],\"tag\":\"SimpleObject\"}]]],\"tag\":\"SimpleObject\"},{\"contents\":[{\"contents\":[[\"getValue\",{\"contents\":{\"contents\":[{\"tag\":\"SimpleIntSchema\"},{\"tag\":\"SimpleIntSchema\"}],\"tag\":\"SimpleTupleSchema\"},\"tag\":\"SimpleArraySchema\"}]],\"tag\":\"SimpleObjectSchema\"},[[\"getValue\",{\"contents\":[{\"contents\":[{\"tag\":\"SimpleIntSchema\"},{\"tag\":\"SimpleIntSchema\"}],\"tag\":\"SimpleTupleSchema\"},[]],\"tag\":\"SimpleArray\"}]]],\"tag\":\"SimpleObject\"},{\"contents\":[{\"contents\":[[\"getPubKey\",{\"tag\":\"SimpleIntSchema\"}]],\"tag\":\"SimpleObjectSchema\"},[[\"getPubKey\",{\"contents\":null,\"tag\":\"SimpleInt\"}]]],\"tag\":\"SimpleObject\"}]},\"tag\":\"Action\"},{\"blocks\":19,\"tag\":\"Wait\"}]}]]",
      "_gistFileLanguage": "JSON",
      "_gistFileType": "application/json",
      "_gistFileFilename": "Simulation.json"
    }
  ],
  "_gistId": "4fdfdd0b0a608a1ef6931ce2ffda8058",
  "_gistGitPushUrl": "https://gist.github.com/4fdfdd0b0a608a1ef6931ce2ffda8058.git"
}

{
  "_gistTruncated": false,
  "_gistOwner": {
    "_ownerHtmlUrl": "https://github.com/krisajenkins",
    "_ownerLogin": "krisajenkins"
  },
  "_gistHtmlUrl": "https://gist.github.com/e9211312651592539055e14b711e2103",
  "_gistFiles": {
    "Playground.hs": {
      "_gistFileTruncated": false,
      "_gistFileContent": "\n-- A game with two players. Player 1 thinks of a secret word\n-- and uses its hash, and the game validator script, to lock\n-- some funds (the prize) in a pay-to-script transaction output.\n-- Player 2 guesses the word by attempting to spend the transaction\n-- output. If the guess is correct, the validator script releases the funds.\n-- If it isn't, the funds stay locked.\nimport           Control.Applicative        ((<|>))\nimport           Control.Monad              (void)\nimport qualified Data.ByteString.Lazy.Char8 as C\nimport qualified Language.PlutusTx          as PlutusTx\nimport           Language.PlutusTx.Prelude  hiding (pure, (<$>))\nimport           Ledger                     (Address, DataScript (DataScript), PendingTx,\n                                             RedeemerScript (RedeemerScript), ValidatorScript, mkValidatorScript, scriptAddress)\nimport           Ledger.Ada                 (Ada)\nimport qualified Ledger.Ada                 as Ada\nimport           Ledger.Typed.Scripts       (wrapValidator)\nimport           Language.Plutus.Contract.Tx\nimport           Playground.Contract\nimport           Prelude                    (Eq, Ord, Show)\n\n------------------------------------------------------------\n\nnewtype HashedString = HashedString ByteString deriving newtype PlutusTx.IsData\n\nPlutusTx.makeLift ''HashedString\n\nnewtype ClearString = ClearString ByteString deriving newtype PlutusTx.IsData\n\nPlutusTx.makeLift ''ClearString\n\ntype Schema =\n    BlockchainActions\n        .\\/ Endpoint \"lock\" LockParams\n        .\\/ Endpoint \"guess\" GuessParams\n\n-- | The validator (datascript -> redeemer -> PendingTx -> Bool)\nvalidateGuess :: HashedString -> ClearString -> PendingTx -> Bool\nvalidateGuess (HashedString actual) (ClearString guess') _ = actual == sha2_256 guess'\n\n-- | The validator script of the game.\ngameValidator :: ValidatorScript\ngameValidator = Ledger.mkValidatorScript $$(PlutusTx.compile [|| validator ||])\n    where validator = wrapValidator validateGuess\n\n-- create a data script for the guessing game by hashing the string\n-- and lifting the hash to its on-chain representation\ngameDataScript :: String -> DataScript\ngameDataScript =\n    Ledger.DataScript . PlutusTx.toData . HashedString . sha2_256 . C.pack\n\n-- create a redeemer script for the guessing game by lifting the\n-- string to its on-chain representation\ngameRedeemerScript :: String -> RedeemerScript\ngameRedeemerScript =\n    Ledger.RedeemerScript . PlutusTx.toData . ClearString . C.pack\n\n-- | The address of the game (the hash of its validator script)\ngameAddress :: Address\ngameAddress = Ledger.scriptAddress gameValidator\n\n-- | Parameters for the \"lock\" endpoint\ndata LockParams = LockParams\n    { secretWord :: String\n    , amount     :: Ada\n    }\n    deriving stock (Prelude.Eq, Prelude.Ord, Prelude.Show, Generic)\n    deriving anyclass (FromJSON, ToJSON, ToSchema, ToArgument)\n\n--  | Parameters for the \"guess\" endpoint\nnewtype GuessParams = GuessParams\n    { guessWord :: String\n    }\n    deriving stock (Prelude.Eq, Prelude.Ord, Prelude.Show, Generic)\n    deriving anyclass (FromJSON, ToJSON, ToSchema, ToArgument)\n\n-- | The \"guess\" contract endpoint. See note [Contract endpoints]\nguess :: AsContractError e => Contract Schema e ()\nguess = do\n    GuessParams theGuess <- endpoint @\"guess\" @GuessParams\n    mp <- utxoAt gameAddress\n    let redeemer = gameRedeemerScript theGuess\n        tx       = collectFromScript mp gameValidator redeemer\n    void (submitTx tx)\n\n-- | The \"lock\" contract endpoint. See note [Contract endpoints]\nlock :: AsContractError e => Contract Schema e ()\nlock = do\n    LockParams secret amt <- endpoint @\"lock\" @LockParams\n    let\n        vl         = Ada.toValue amt\n        dataValue = gameDataScript secret\n        tx         = payToScript vl (Ledger.scriptAddress gameValidator) dataValue\n    void (submitTx tx)\n\ngame :: AsContractError e => Contract Schema e ()\ngame = guess <|> lock\n\n{- Note [Contract endpoints]\n\nA contract endpoint is a function that uses the wallet API to interact with the\nblockchain. We can look at contract endpoints from two different points of view.\n\n1. Contract users\n\nContract endpoints are the visible interface of the contract. They provide a\nUI (HTML form) for entering the parameters of the actions we may take as part\nof the contract.\n\n2. Contract authors\n\nAs contract authors we define endpoints as functions that return a value of\ntype 'MockWallet ()'. This type indicates that the function uses the wallet API\nto produce and spend transaction outputs on the blockchain.\n\nEndpoints can have any number of parameters: 'lock' has two\nparameters, 'guess' has one and 'startGame' has none. For each endpoint we\ninclude a call to 'mkFunction' at the end of the contract definition. This\ncauses the Haskell compiler to generate a schema for the endpoint. The Plutus\nPlayground then uses this schema to present an HTML form to the user where the\nparameters can be entered.\n\n-}\n\nendpoints :: AsContractError e => Contract Schema e ()\nendpoints = game\n\nmkSchemaDefinitions ''Schema\n\nmyCurrency :: KnownCurrency\nmyCurrency = KnownCurrency \"b0b0\" \"MyCurrency\" ( \"USDToken\" :| [\"EURToken\"])\n$(mkKnownCurrencies ['myCurrency])\n",
      "_gistFileLanguage": "Haskell",
      "_gistFileType": "text/plain",
      "_gistFileFilename": "Playground.hs"
    },
    "Simulation.json": {
      "_gistFileTruncated": false,
      "_gistFileContent": "[0,[{\"simulationWallets\":[{\"simulatorWalletWallet\":{\"getWallet\":1},\"simulatorWalletBalance\":{\"getValue\":[[{\"unCurrencySymbol\":\"\"},[[{\"unTokenName\":\"\"},10000]]]]}},{\"simulatorWalletWallet\":{\"getWallet\":2},\"simulatorWalletBalance\":{\"getValue\":[[{\"unCurrencySymbol\":\"\"},[[{\"unTokenName\":\"\"},10000]]]]}}],\"simulationName\":\"Basic Game\",\"simulationActions\":[{\"caller\":{\"getWallet\":1},\"argumentValues\":{\"endpointDescription\":{\"getEndpointDescription\":\"lock\"},\"argument\":{\"contents\":[[\"secretWord\",{\"contents\":\"Plutus\",\"tag\":\"FormStringF\"}],[\"amount\",{\"contents\":[[\"getLovelace\",{\"contents\":100,\"tag\":\"FormIntF\"}]],\"tag\":\"FormObjectF\"}]],\"tag\":\"FormObjectF\"}},\"tag\":\"CallEndpoint\"},{\"caller\":{\"getWallet\":2},\"argumentValues\":{\"endpointDescription\":{\"getEndpointDescription\":\"guess\"},\"argument\":{\"contents\":[[\"guessWord\",{\"contents\":\"Plutus\",\"tag\":\"FormStringF\"}]],\"tag\":\"FormObjectF\"}},\"tag\":\"CallEndpoint\"}]},{\"simulationWallets\":[{\"simulatorWalletWallet\":{\"getWallet\":1},\"simulatorWalletBalance\":{\"getValue\":[[{\"unCurrencySymbol\":\"\"},[[{\"unTokenName\":\"\"},1000]]]]}},{\"simulatorWalletWallet\":{\"getWallet\":2},\"simulatorWalletBalance\":{\"getValue\":[[{\"unCurrencySymbol\":\"\"},[[{\"unTokenName\":\"\"},1000]]]]}},{\"simulatorWalletWallet\":{\"getWallet\":3},\"simulatorWalletBalance\":{\"getValue\":[[{\"unCurrencySymbol\":\"\"},[[{\"unTokenName\":\"\"},1000]]]]}}],\"simulationName\":\"One Bad Guess\",\"simulationActions\":[{\"caller\":{\"getWallet\":1},\"argumentValues\":{\"endpointDescription\":{\"getEndpointDescription\":\"lock\"},\"argument\":{\"contents\":[[\"secretWord\",{\"contents\":\"Plutus\",\"tag\":\"FormStringF\"}],[\"amount\",{\"contents\":[[\"getLovelace\",{\"contents\":100,\"tag\":\"FormIntF\"}]],\"tag\":\"FormObjectF\"}]],\"tag\":\"FormObjectF\"}},\"tag\":\"CallEndpoint\"},{\"caller\":{\"getWallet\":2},\"argumentValues\":{\"endpointDescription\":{\"getEndpointDescription\":\"guess\"},\"argument\":{\"contents\":[[\"guessWord\",{\"contents\":\"Marlowe\",\"tag\":\"FormStringF\"}]],\"tag\":\"FormObjectF\"}},\"tag\":\"CallEndpoint\"},{\"caller\":{\"getWallet\":3},\"argumentValues\":{\"endpointDescription\":{\"getEndpointDescription\":\"guess\"},\"argument\":{\"contents\":[[\"guessWord\",{\"contents\":\"Plutus\",\"tag\":\"FormStringF\"}]],\"tag\":\"FormObjectF\"}},\"tag\":\"CallEndpoint\"}]}]]",
      "_gistFileLanguage": "JSON",
      "_gistFileType": "application/json",
      "_gistFileFilename": "Simulation.json"
    }
  },
  "_gistId": "e9211312651592539055e14b711e2103",
  "_gistCreatedAt": "2010-04-14T02:15:15Z",
  "_gistUpdatedAt": "2011-06-20T11:34:15Z",
  "_gistDescription": "Hello World Examples",
  "_gistGitPushUrl": "https://gist.github.com/e9211312651592539055e14b711e2103.git"
}
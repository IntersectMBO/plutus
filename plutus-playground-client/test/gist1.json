{
  "_gistTruncated": false,
  "_gistOwner": {
    "_ownerHtmlUrl": "https://github.com/dorin100",
    "_ownerLogin": "dorin100"
  },
  "_gistHtmlUrl": "https://gist.github.com/2b0121962c076580cf5bc0af41d12d1c",
  "_gistFiles": [
    {
      "_gistFileTruncated": false,
      "_gistFileContent": "-- | Crowdfunding contract implemented using the [[Plutus]] interface.\n-- This is the fully parallel version that collects all contributions\n-- in a single transaction.\n--\n-- Note [Transactions in the crowdfunding campaign] explains the structure of\n-- this contract on the blockchain.\nimport qualified Language.PlutusTx            as PlutusTx\nimport qualified Ledger.Interval              as Interval\nimport           Ledger.Slot                  (SlotRange)\nimport qualified Ledger.Slot                  as Slot\nimport qualified Language.PlutusTx.Prelude    as P\nimport           Ledger\nimport qualified Ledger.Ada.TH                as Ada\nimport           Ledger.Ada                   (Ada)\nimport           Ledger.Validation           as V\nimport           Playground.Contract\nimport           Wallet                       as W\n\n-- | A crowdfunding campaign.\ndata Campaign = Campaign\n    { campaignDeadline           :: Slot\n    -- ^ The date by which the campaign target has to be met\n    , campaignTarget             :: Ada\n    -- ^ Target amount of funds\n    , campaignCollectionDeadline :: Slot\n    -- ^ The date by which the campaign owner has to collect the funds\n    , campaignOwner              :: PubKey\n    -- ^ Public key of the campaign owner. This key is entitled to retrieve the\n    --   funds if the campaign is successful.\n    } deriving (Generic, ToJSON, FromJSON, ToSchema)\n\nPlutusTx.makeLift ''Campaign\n\n-- | The 'SlotRange' during which the funds can be collected\ncollectionRange :: Campaign -> SlotRange\ncollectionRange cmp = \n    W.interval (campaignDeadline cmp) (campaignCollectionDeadline cmp)\n\n-- | The 'SlotRange' during which a refund may be claimed\nrefundRange :: Campaign -> SlotRange\nrefundRange cmp =\n    W.intervalFrom (campaignCollectionDeadline cmp)\n\n-- | Action that can be taken by the participants in this contract. A value of\n--   `CampaignAction` is provided as the redeemer. The validator script then\n--   checks if the conditions for performing this action are met.\n--\ndata CampaignAction = Collect | Refund\n    deriving (Generic, ToJSON, FromJSON, ToSchema)\n\nPlutusTx.makeLift ''CampaignAction\n\n-- | The validator script that determines whether the campaign owner can\n--   retrieve the funds or the contributors can claim a refund.\n--\ncontributionScript :: Campaign -> ValidatorScript\ncontributionScript cmp  = ValidatorScript val where\n    val = Ledger.applyScript mkValidator (Ledger.lifted cmp)\n    mkValidator = $$(Ledger.compileScript [||\n\n        -- The validator script is a function of four arguments:\n        -- 1. The 'Campaign' definition. This argument is provided by the Plutus client, using 'Ledger.applyScript'.\n        --    As a result, the 'Campaign' definition is part of the script address, and different campaigns have different addresses.\n        --    The Campaign{..} syntax means that all fields of the 'Campaign' value are in scope (for example 'campaignDeadline' in l. 70).\n        --    See note [RecordWildCards].\n        --\n        -- 2. A 'PubKey'. This is the data script. It is provided by the producing transaction (the contribution)\n        --\n        -- 3. A 'CampaignAction'. This is the redeemer script. It is provided by the redeeming transaction.\n        --\n        -- 4. A 'PendingTx value. It contains information about the current transaction and is provided by the slot leader.\n        --    See note [PendingTx]\n        \\Campaign{..} (con :: PubKey) (act :: CampaignAction) (p :: PendingTx) ->\n            let\n\n                -- In Haskell we can define new operators. We import\n                -- `P.and` from the PlutusTx prelude here so that we can use it\n                -- in infix position rather than prefix (which would require a\n                -- lot of additional brackets)\n                infixr 3 &&\n                (&&) :: Bool -> Bool -> Bool\n                (&&) = $$(P.and)\n\n                signedBy :: PendingTx -> PubKey -> Bool\n                signedBy = $$(V.txSignedBy)\n\n                -- We pattern match on the pending transaction `p` to get the\n                -- information we need:\n                -- `ps` is the list of inputs of the transaction\n                -- `outs` is the list of outputs\n                -- `slFrom` is the beginning of the validation interval\n                -- `slTo` is the end of the validation interval\n                PendingTx ps outs _ _ _ range _ _ = p\n\n                collRange :: SlotRange\n                collRange = $$(Interval.interval) campaignDeadline campaignCollectionDeadline\n    \n                refndRange :: SlotRange\n                refndRange = $$(Interval.from) campaignCollectionDeadline\n\n                -- `totalInputs` is the sum of the ada values of all transaction\n                -- inputs. We ise `foldr` from the Prelude to go through the\n                -- list and sum up the values.\n                totalInputs :: Ada\n                totalInputs =\n                    let v (PendingTxIn _ _ vl) = $$(Ada.fromValue) vl in\n                    $$(P.foldr) (\\i total -> $$(Ada.plus) total (v i)) $$(Ada.zero) ps\n\n                isValid = case act of\n                    Refund -> -- the \"refund\" branch\n                        let\n\n                            contributorTxOut :: PendingTxOut -> Bool\n                            contributorTxOut o = case $$(pubKeyOutput) o of\n                                Nothing -> False\n                                Just pk -> $$(eqPubKey) pk con\n\n                            -- Check that all outputs are paid to the public key\n                            -- of the contributor (this key is provided as the data script `con`)\n                            contributorOnly = $$(P.all) contributorTxOut outs\n\n                            refundable = \n                                $$(Slot.contains) refndRange range\n                                && contributorOnly && p `signedBy` con\n\n                        in refundable\n                    Collect -> -- the \"successful campaign\" branch\n                        let\n                            payToOwner = \n                                $$(Slot.contains) collRange range\n                                && $$(Ada.geq) totalInputs campaignTarget\n                                && p `signedBy` campaignOwner\n                        in payToOwner\n            in\n            if isValid then () else $$(P.error) () ||])\n\n-- | The address of a [[Campaign]]\ncampaignAddress :: Campaign -> Ledger.Address\ncampaignAddress = Ledger.scriptAddress . contributionScript\n\n-- | Contribute funds to the campaign (contributor)\n--\ncontribute :: MonadWallet m => Campaign -> Ada -> m ()\ncontribute cmp value = do\n    _ <- if value <= 0 then throwOtherError \"Must contribute a positive value\" else pure ()\n    ownPK <- ownPubKey\n    let ds = DataScript (Ledger.lifted ownPK)\n        range = W.interval 1 (campaignDeadline cmp)\n\n    -- `payToScript` is a function of the wallet API. It takes a campaign\n    -- address, value, and data script, and generates a transaction that\n    -- pays the value to the script. `tx` is bound to this transaction. We need\n    -- to hold on to it because we are going to use it in the refund handler.\n    -- If we were not interested in the transaction produced by `payToScript`\n    -- we could have used `payeToScript_`, which has the same effect but\n    -- discards the result.\n    tx <- payToScript range (campaignAddress cmp) ($$(Ada.toValue) value) ds\n\n    logMsg \"Submitted contribution\"\n\n    -- `register` adds a blockchain event handler on the `refundTrigger`\n    -- event. It instructs the wallet to start watching the addresses mentioned\n    -- in the trigger definition and run the handler when the refund condition\n    -- is true.\n    register (refundTrigger cmp) (refundHandler (Ledger.hashTx tx) cmp)\n\n\n    logMsg \"Registered refund trigger\"\n\n-- | Register a [[EventHandler]] to collect all the funds of a campaign\n--\nscheduleCollection :: MonadWallet m => Campaign -> m ()\nscheduleCollection cmp = do\n    register (collectFundsTrigger cmp) (EventHandler (\\_ -> do\n        logMsg \"Collecting funds\"\n        let redeemerScript = Ledger.RedeemerScript (Ledger.lifted Collect)\n            range = collectionRange cmp\n        collectFromScript range (contributionScript cmp) redeemerScript))\n\n-- | An event trigger that fires when a refund of campaign contributions can be claimed\nrefundTrigger :: Campaign -> EventTrigger\nrefundTrigger c = andT\n    (fundsAtAddressT (campaignAddress c) (W.intervalFrom ($$(Ada.toValue) 1)))\n    (slotRangeT (refundRange c))\n\n-- | An event trigger that fires when the funds for a campaign can be collected\ncollectFundsTrigger :: Campaign -> EventTrigger\ncollectFundsTrigger c = andT\n    (fundsAtAddressT (campaignAddress c) (W.intervalFrom ($$(Ada.toValue) (campaignTarget c))))\n    (slotRangeT (collectionRange c))\n\n-- | Claim a refund of our campaign contribution\nrefundHandler :: MonadWallet m => TxId -> Campaign -> EventHandler m\nrefundHandler txid cmp = EventHandler (\\_ -> do\n    logMsg \"Claiming refund\"\n    let validatorScript = contributionScript cmp\n        redeemerScript  = Ledger.RedeemerScript (Ledger.lifted Refund)\n\n    -- `collectFromScriptTxn` generates a transaction that spends the unspent\n    -- transaction outputs at the address of the validator scripts, *but* only\n    -- those outputs that were produced by the transaction `txid`. We use it\n    -- here to ensure that we don't attempt to claim back other contributors'\n    -- funds (if we did that, the validator script would fail and the entire\n    -- transaction would be invalid).\n    collectFromScriptTxn (refundRange cmp) validatorScript redeemerScript txid)\n\n$(mkFunctions ['scheduleCollection, 'contribute])\n\n{- note [Transactions in the crowdfunding campaign]\n\nAssume there is a campaign `c :: Campaign` with two contributors\n(identified by public key `pc_1` and `pc_2`) and one campaign owner (pco).\nEach contributor creates a transaction, `t_1` and `t_2`, whose outputs are\nlocked by the scripts `contributionScript c pc_1` and `contributionScript\nc pc_1` respectively.\n\nThere are two outcomes for the campaign.\n\n1. Campaign owner collects the funds from both contributors. In this case\n   the owner creates a single transaction with two inputs, referring to\n   `t_1` and `t_2`. Each input contains the script `contributionScript c`\n   specialised to a contributor. The redeemer script of this transaction contains the value `Collect`, prompting the validator script to check the\n   branch for `Collect`.\n\n2. Refund. In this case each contributor creates a transaction with a\n   single input claiming back their part of the funds. This case is\n   covered by the `Refund` branch, and its redeemer script is the `Refund` action.\n\nIn both cases, the validator script is run twice. In the first case there is a single transaction consuming both inputs. In the second case there are two different transactions that may happen at different times.\n\n-}\n\n{- note [RecordWildCards]\n\nWe can use the syntax \"Campaign{..}\" here because the 'RecordWildCards'\nextension is enabled automatically by the Playground backend.\n\nThe extension is documented here:\n* https://downloads.haskell.org/~ghc/7.2.1/docs/html/users_guide/syntax-extns.html\n\nA list of extensions that are enabled by default for the Playground can be found here:\n* https://github.com/input-output-hk/plutus/blob/b0f49a0cc657cd1a4eaa4af72a6d69996b16d07a/plutus-playground/plutus-playground-server/src/Playground/Interpreter.hs#L44\n\n-}\n\n{- note [PendingTx]\n\nThis part of the API (the PendingTx argument) is experimental and subject to change.\n\n-}\n",
      "_gistFileLanguage": "Haskell",
      "_gistFileType": "text/plain",
      "_gistFileFilename": "Playground.hs"
    },
    {
      "_gistFileTruncated": false,
      "_gistFileContent": "[0,[{\"wallets\":[{\"simulatorWalletWallet\":{\"getWallet\":1},\"simulatorWalletBalance\":{\"getValue\":[[{\"unCurrencySymbol\":\"5fff\"},[[{\"unTokenName\":\"\"},10]]]]}},{\"simulatorWalletWallet\":{\"getWallet\":2},\"simulatorWalletBalance\":{\"getValue\":[[{\"unCurrencySymbol\":\"5fff\"},[[{\"unTokenName\":\"\"},10]]]]}},{\"simulatorWalletWallet\":{\"getWallet\":3},\"simulatorWalletBalance\":{\"getValue\":[[{\"unCurrencySymbol\":\"5fff\"},[[{\"unTokenName\":\"\"},10]]]]}}],\"signatures\":[{\"functionName\":\"scheduleCollection\",\"argumentSchema\":[{\"contents\":[[\"campaignDeadline\",{\"contents\":[[\"getSlot\",{\"tag\":\"SimpleIntSchema\"}]],\"tag\":\"SimpleObjectSchema\"}],[\"campaignTarget\",{\"contents\":[[\"getAda\",{\"tag\":\"SimpleIntSchema\"}]],\"tag\":\"SimpleObjectSchema\"}],[\"campaignOwner\",{\"contents\":[[\"getPubKey\",{\"tag\":\"SimpleStringSchema\"}]],\"tag\":\"SimpleObjectSchema\"}],[\"campaignCollectionDeadline\",{\"contents\":[[\"getSlot\",{\"tag\":\"SimpleIntSchema\"}]],\"tag\":\"SimpleObjectSchema\"}]],\"tag\":\"SimpleObjectSchema\"}]},{\"functionName\":\"contribute\",\"argumentSchema\":[{\"contents\":[[\"campaignDeadline\",{\"contents\":[[\"getSlot\",{\"tag\":\"SimpleIntSchema\"}]],\"tag\":\"SimpleObjectSchema\"}],[\"campaignTarget\",{\"contents\":[[\"getAda\",{\"tag\":\"SimpleIntSchema\"}]],\"tag\":\"SimpleObjectSchema\"}],[\"campaignOwner\",{\"contents\":[[\"getPubKey\",{\"tag\":\"SimpleStringSchema\"}]],\"tag\":\"SimpleObjectSchema\"}],[\"campaignCollectionDeadline\",{\"contents\":[[\"getSlot\",{\"tag\":\"SimpleIntSchema\"}]],\"tag\":\"SimpleObjectSchema\"}]],\"tag\":\"SimpleObjectSchema\"},{\"contents\":[[\"getAda\",{\"tag\":\"SimpleIntSchema\"}]],\"tag\":\"SimpleObjectSchema\"}]},{\"functionName\":\"payToWallet_\",\"argumentSchema\":[{\"contents\":[[\"ivTo\",{\"contents\":[[\"getSlot\",{\"tag\":\"SimpleIntSchema\"}]],\"tag\":\"SimpleObjectSchema\"}],[\"ivFrom\",{\"contents\":[[\"getSlot\",{\"tag\":\"SimpleIntSchema\"}]],\"tag\":\"SimpleObjectSchema\"}]],\"tag\":\"SimpleObjectSchema\"},{\"contents\":[[\"getValue\",{\"contents\":[[\"unMap\",{\"contents\":{\"contents\":[{\"tag\":\"SimpleHexSchema\"},{\"contents\":[[\"unMap\",{\"contents\":{\"contents\":[{\"tag\":\"SimpleStringSchema\"},{\"tag\":\"SimpleIntSchema\"}],\"tag\":\"SimpleTupleSchema\"},\"tag\":\"SimpleArraySchema\"}]],\"tag\":\"SimpleObjectSchema\"}],\"tag\":\"SimpleTupleSchema\"},\"tag\":\"SimpleArraySchema\"}]],\"tag\":\"SimpleObjectSchema\"}]],\"tag\":\"ValueSchema\"},{\"contents\":[[\"getWallet\",{\"tag\":\"SimpleIntSchema\"}]],\"tag\":\"SimpleObjectSchema\"}]}],\"currencies\":[{\"knownTokens\":[{\"unTokenName\":\"\"}],\"hash\":\"5fff\",\"friendlyName\":\"Ada\"}],\"actions\":[{\"simulatorWallet\":{\"simulatorWalletWallet\":{\"getWallet\":1},\"simulatorWalletBalance\":{\"getValue\":[[{\"unCurrencySymbol\":\"5fff\"},[[{\"unTokenName\":\"\"},10]]]]}},\"functionSchema\":{\"functionName\":\"scheduleCollection\",\"argumentSchema\":[{\"contents\":[{\"contents\":[[\"campaignDeadline\",{\"contents\":[[\"getSlot\",{\"tag\":\"SimpleIntSchema\"}]],\"tag\":\"SimpleObjectSchema\"}],[\"campaignTarget\",{\"contents\":[[\"getAda\",{\"tag\":\"SimpleIntSchema\"}]],\"tag\":\"SimpleObjectSchema\"}],[\"campaignOwner\",{\"contents\":[[\"getPubKey\",{\"tag\":\"SimpleStringSchema\"}]],\"tag\":\"SimpleObjectSchema\"}],[\"campaignCollectionDeadline\",{\"contents\":[[\"getSlot\",{\"tag\":\"SimpleIntSchema\"}]],\"tag\":\"SimpleObjectSchema\"}]],\"tag\":\"SimpleObjectSchema\"},[[\"campaignDeadline\",{\"contents\":[{\"contents\":[[\"getSlot\",{\"tag\":\"SimpleIntSchema\"}]],\"tag\":\"SimpleObjectSchema\"},[[\"getSlot\",{\"contents\":10,\"tag\":\"SimpleInt\"}]]],\"tag\":\"SimpleObject\"}],[\"campaignTarget\",{\"contents\":[{\"contents\":[[\"getAda\",{\"tag\":\"SimpleIntSchema\"}]],\"tag\":\"SimpleObjectSchema\"},[[\"getAda\",{\"contents\":10,\"tag\":\"SimpleInt\"}]]],\"tag\":\"SimpleObject\"}],[\"campaignOwner\",{\"contents\":[{\"contents\":[[\"getPubKey\",{\"tag\":\"SimpleStringSchema\"}]],\"tag\":\"SimpleObjectSchema\"},[[\"getPubKey\",{\"contents\":\"3d4017c3e843895a92b70aa74d1b7ebc9c982ccf2ec4968cc0cd55f12af4660c\",\"tag\":\"SimpleString\"}]]],\"tag\":\"SimpleObject\"}],[\"campaignCollectionDeadline\",{\"contents\":[{\"contents\":[[\"getSlot\",{\"tag\":\"SimpleIntSchema\"}]],\"tag\":\"SimpleObjectSchema\"},[[\"getSlot\",{\"contents\":10,\"tag\":\"SimpleInt\"}]]],\"tag\":\"SimpleObject\"}]]],\"tag\":\"SimpleObject\"}]},\"tag\":\"Action\"},{\"simulatorWallet\":{\"simulatorWalletWallet\":{\"getWallet\":2},\"simulatorWalletBalance\":{\"getValue\":[[{\"unCurrencySymbol\":\"5fff\"},[[{\"unTokenName\":\"\"},10]]]]}},\"functionSchema\":{\"functionName\":\"contribute\",\"argumentSchema\":[{\"contents\":[{\"contents\":[[\"campaignDeadline\",{\"contents\":[[\"getSlot\",{\"tag\":\"SimpleIntSchema\"}]],\"tag\":\"SimpleObjectSchema\"}],[\"campaignTarget\",{\"contents\":[[\"getAda\",{\"tag\":\"SimpleIntSchema\"}]],\"tag\":\"SimpleObjectSchema\"}],[\"campaignOwner\",{\"contents\":[[\"getPubKey\",{\"tag\":\"SimpleStringSchema\"}]],\"tag\":\"SimpleObjectSchema\"}],[\"campaignCollectionDeadline\",{\"contents\":[[\"getSlot\",{\"tag\":\"SimpleIntSchema\"}]],\"tag\":\"SimpleObjectSchema\"}]],\"tag\":\"SimpleObjectSchema\"},[[\"campaignDeadline\",{\"contents\":[{\"contents\":[[\"getSlot\",{\"tag\":\"SimpleIntSchema\"}]],\"tag\":\"SimpleObjectSchema\"},[[\"getSlot\",{\"contents\":10,\"tag\":\"SimpleInt\"}]]],\"tag\":\"SimpleObject\"}],[\"campaignTarget\",{\"contents\":[{\"contents\":[[\"getAda\",{\"tag\":\"SimpleIntSchema\"}]],\"tag\":\"SimpleObjectSchema\"},[[\"getAda\",{\"contents\":10,\"tag\":\"SimpleInt\"}]]],\"tag\":\"SimpleObject\"}],[\"campaignOwner\",{\"contents\":[{\"contents\":[[\"getPubKey\",{\"tag\":\"SimpleStringSchema\"}]],\"tag\":\"SimpleObjectSchema\"},[[\"getPubKey\",{\"contents\":\"3d4017c3e843895a92b70aa74d1b7ebc9c982ccf2ec4968cc0cd55f12af4660c\",\"tag\":\"SimpleString\"}]]],\"tag\":\"SimpleObject\"}],[\"campaignCollectionDeadline\",{\"contents\":[{\"contents\":[[\"getSlot\",{\"tag\":\"SimpleIntSchema\"}]],\"tag\":\"SimpleObjectSchema\"},[[\"getSlot\",{\"contents\":10,\"tag\":\"SimpleInt\"}]]],\"tag\":\"SimpleObject\"}]]],\"tag\":\"SimpleObject\"},{\"contents\":[{\"contents\":[[\"getAda\",{\"tag\":\"SimpleIntSchema\"}]],\"tag\":\"SimpleObjectSchema\"},[[\"getAda\",{\"contents\":3,\"tag\":\"SimpleInt\"}]]],\"tag\":\"SimpleObject\"}]},\"tag\":\"Action\"},{\"simulatorWallet\":{\"simulatorWalletWallet\":{\"getWallet\":3},\"simulatorWalletBalance\":{\"getValue\":[[{\"unCurrencySymbol\":\"5fff\"},[[{\"unTokenName\":\"\"},10]]]]}},\"functionSchema\":{\"functionName\":\"contribute\",\"argumentSchema\":[{\"contents\":[{\"contents\":[[\"campaignDeadline\",{\"contents\":[[\"getSlot\",{\"tag\":\"SimpleIntSchema\"}]],\"tag\":\"SimpleObjectSchema\"}],[\"campaignTarget\",{\"contents\":[[\"getAda\",{\"tag\":\"SimpleIntSchema\"}]],\"tag\":\"SimpleObjectSchema\"}],[\"campaignOwner\",{\"contents\":[[\"getPubKey\",{\"tag\":\"SimpleStringSchema\"}]],\"tag\":\"SimpleObjectSchema\"}],[\"campaignCollectionDeadline\",{\"contents\":[[\"getSlot\",{\"tag\":\"SimpleIntSchema\"}]],\"tag\":\"SimpleObjectSchema\"}]],\"tag\":\"SimpleObjectSchema\"},[[\"campaignDeadline\",{\"contents\":[{\"contents\":[[\"getSlot\",{\"tag\":\"SimpleIntSchema\"}]],\"tag\":\"SimpleObjectSchema\"},[[\"getSlot\",{\"contents\":10,\"tag\":\"SimpleInt\"}]]],\"tag\":\"SimpleObject\"}],[\"campaignTarget\",{\"contents\":[{\"contents\":[[\"getAda\",{\"tag\":\"SimpleIntSchema\"}]],\"tag\":\"SimpleObjectSchema\"},[[\"getAda\",{\"contents\":10,\"tag\":\"SimpleInt\"}]]],\"tag\":\"SimpleObject\"}],[\"campaignOwner\",{\"contents\":[{\"contents\":[[\"getPubKey\",{\"tag\":\"SimpleStringSchema\"}]],\"tag\":\"SimpleObjectSchema\"},[[\"getPubKey\",{\"contents\":\"3d4017c3e843895a92b70aa74d1b7ebc9c982ccf2ec4968cc0cd55f12af4660c\",\"tag\":\"SimpleString\"}]]],\"tag\":\"SimpleObject\"}],[\"campaignCollectionDeadline\",{\"contents\":[{\"contents\":[[\"getSlot\",{\"tag\":\"SimpleIntSchema\"}]],\"tag\":\"SimpleObjectSchema\"},[[\"getSlot\",{\"contents\":10,\"tag\":\"SimpleInt\"}]]],\"tag\":\"SimpleObject\"}]]],\"tag\":\"SimpleObject\"},{\"contents\":[{\"contents\":[[\"getAda\",{\"tag\":\"SimpleIntSchema\"}]],\"tag\":\"SimpleObjectSchema\"},[[\"getAda\",{\"contents\":8,\"tag\":\"SimpleInt\"}]]],\"tag\":\"SimpleObject\"}]},\"tag\":\"Action\"},{\"blocks\":15,\"tag\":\"Wait\"}]}]]",
      "_gistFileLanguage": "JSON",
      "_gistFileType": "application/json",
      "_gistFileFilename": "Simulation.json"
    }
  ],
  "_gistId": "2b0121962c076580cf5bc0af41d12d1c",
  "_gistGitPushUrl": "https://gist.github.com/2b0121962c076580cf5bc0af41d12d1c.git"
}

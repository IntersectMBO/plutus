module Ledger.Extra where

import Prelude

import Data.Array (filter, sort)
import Data.Generic (class Generic, gShow)
import Data.Lens (Iso')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Newtype (class Newtype)
import Data.Tuple (Tuple(..))
import Ledger.Map.TH (Map(Map))
import Ledger.Value.TH (CurrencySymbol)

-- | Value can't be generated by purescript-bridge, because we need a
-- custom `Eq` instance because of the embedded custom `Map` type.
-- Nevertheless, we stick pretty closely to the code that would have
-- been generated.
newtype Value =
    Value {
      getValue :: Map CurrencySymbol Int
    }

derive instance genericValue :: Generic Value
derive instance newtypeValue :: Newtype Value _

instance eqValue :: Eq Value where
  eq
    (Value {getValue: Map {unMap: a}})
    (Value {getValue: Map {unMap: b}}) =
      normalise a == normalise b
    where
      normalise = sort <<< filter (not isZeroBalance)
      isZeroBalance (Tuple _ 0) = true
      isZeroBalance _ = false

instance showValue :: Show Value where
  show = gShow

_Value :: Iso' Value { getValue :: Map CurrencySymbol Int}
_Value = _Newtype

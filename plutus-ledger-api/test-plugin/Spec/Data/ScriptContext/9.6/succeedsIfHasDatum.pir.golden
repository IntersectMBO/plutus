let
  data (Maybe :: * -> *) a | Maybe_match where
    Just : a -> Maybe a
    Nothing : Maybe a
  data Bool | Bool_match where
    True : Bool
    False : Bool
  data Unit | Unit_match where
    Unit : Unit
  !traceError : all a. string -> a
    = /\a ->
        \(str : string) -> let !x : Unit = trace {Unit} str Unit in error {a}
in
\(d : data) ->
  Bool_match
    (let
      !tup : pair integer (list data)
        = unConstrData
            (headList
               {data}
               (tailList
                  {data}
                  (tailList
                     {data}
                     (case
                        (list data)
                        (unConstrData d)
                        [(\(l : integer) (r : list data) -> r)]))))
    in
    Bool_match
      (case
         Bool
         (equalsInteger
            1
            (case integer tup [(\(l : integer) (r : list data) -> l)]))
         [False, True])
      {all dead. Bool}
      (/\dead ->
         let
           !l : list data
             = case (list data) tup [(\(l : integer) (r : list data) -> r)]
         in
         Maybe_match
           {data}
           (let
             !tup : pair integer (list data)
               = unConstrData (headList {data} (tailList {data} l))
             !index : integer
               = case integer tup [(\(l : integer) (r : list data) -> l)]
             !args : list data
               = case (list data) tup [(\(l : integer) (r : list data) -> r)]
           in
           Bool_match
             (case Bool (equalsInteger 1 index) [False, True])
             {all dead. Maybe data}
             (/\dead -> Nothing {data})
             (/\dead ->
                Bool_match
                  (case Bool (equalsInteger 0 index) [False, True])
                  {all dead. Maybe data}
                  (/\dead -> Just {data} (headList {data} args))
                  (/\dead -> traceError {Maybe data} "PT1")
                  {all dead. dead})
             {all dead. dead})
           {all dead. Bool}
           (\(ds : data) -> /\dead -> True)
           (/\dead -> False)
           {all dead. dead})
      (/\dead -> False)
      {all dead. dead})
    {all dead. unit}
    (/\dead -> ())
    (/\dead -> traceError {unit} "PT5")
    {all dead. dead}
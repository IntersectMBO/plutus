let
  data (Maybe :: * -> *) a | Maybe_match where
    Just : a -> Maybe a
    Nothing : Maybe a
  data Bool | Bool_match where
    True : Bool
    False : Bool
  data Unit | Unit_match where
    Unit : Unit
  !traceError : all a. string -> a
    = /\a ->
        \(str : string) -> let !x : Unit = trace {Unit} str Unit in error {a}
in
\(d : data) ->
  (let
      !tup : pair integer (list data)
        = unConstrData
            (headList
               {data}
               (tailList
                  {data}
                  (tailList
                     {data}
                     (sndPair {integer} {list data} (unConstrData d)))))
    in
    Bool_match
      (Bool_match
         (ifThenElse
            {Bool}
            (equalsInteger 1 (fstPair {integer} {list data} tup))
            True
            False)
         {all dead. Bool}
         (/\dead ->
            (let
                !tup : pair integer (list data)
                  = unConstrData
                      (headList
                         {data}
                         (tailList {data} (sndPair {integer} {list data} tup)))
                !index : integer = fstPair {integer} {list data} tup
                !args : list data = sndPair {integer} {list data} tup
              in
              Maybe_match
                {data}
                (Bool_match
                   (ifThenElse {Bool} (equalsInteger 1 index) True False)
                   {all dead. Maybe data}
                   (/\dead -> Nothing {data})
                   (/\dead ->
                      Bool_match
                        (ifThenElse {Bool} (equalsInteger 0 index) True False)
                        {all dead. Maybe data}
                        (/\dead -> Just {data} (headList {data} args))
                        (/\dead -> traceError {Maybe data} "PT1")
                        {all dead. dead})
                   {all dead. dead}))
              {all dead. Bool}
              (\(ds : data) -> /\dead -> True)
              (/\dead -> False)
              {all dead. dead})
         (/\dead -> False)
         {all dead. dead}))
    {all dead. unit}
    (/\dead -> ())
    (/\dead -> traceError {unit} "PT5")
    {all dead. dead}
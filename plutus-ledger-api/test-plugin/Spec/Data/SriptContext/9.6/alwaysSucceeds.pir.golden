let
  data Bool | Bool_match where
    True : Bool
    False : Bool
  data Unit | Unit_match where
    Unit : Unit
in
\(d : data) ->
  let
    ~constrArgs : list data = sndPair {integer} {list data} (unConstrData d)
    ~rest : list data = tailList {data} constrArgs
  in
  Bool_match
    (let
      !ds : data = headList {data} constrArgs
      !ds : data = headList {data} rest
      !ds : data = headList {data} (tailList {data} rest)
    in
    True)
    {all dead. unit}
    (/\dead -> ())
    (/\dead -> let !x : Unit = trace {Unit} "PT5" Unit in error {unit})
    {all dead. dead}
let
  !caseList' : all a r. r -> (a -> list a -> r) -> list a -> r
    = /\a r ->
        \(z : r) (f : a -> list a -> r) (xs : list a) ->
          chooseList
            {a}
            {all dead. r}
            xs
            (/\dead -> z)
            (/\dead -> f (headList {a} xs) (tailList {a} xs))
            {r}
in
letrec
  ~go : list (pair data data) -> integer
    = caseList'
        {pair data data}
        {integer}
        0
        (\(hd : pair data data) (tl : list (pair data data)) ->
           addInteger (unIData (sndPair {data} {data} hd)) (go tl))
in
let
  data Bool | Bool_match where
    True : Bool
    False : Bool
  data (Maybe :: * -> *) a | Maybe_match where
    Just : a -> Maybe a
    Nothing : Maybe a
in
\(value :
    (\k a -> list (pair data data))
      bytestring
      ((\k a -> list (pair data data)) bytestring integer))
 (cur : bytestring) ->
  Maybe_match
    {data}
    (let
      !k : data = bData cur
    in
    letrec
      ~go : list (pair data data) -> Maybe data
        = caseList'
            {pair data data}
            {Maybe data}
            (Nothing {data})
            (\(hd : pair data data) ->
               Bool_match
                 (ifThenElse
                    {Bool}
                    (equalsData k (fstPair {data} {data} hd))
                    True
                    False)
                 {all dead. list (pair data data) -> Maybe data}
                 (/\dead ->
                    \(ds : list (pair data data)) ->
                      Just {data} (sndPair {data} {data} hd))
                 (/\dead -> go)
                 {all dead. dead})
    in
    go value)
    {integer}
    (\(a : data) ->
       let
         !ds : (\k a -> list (pair data data)) bytestring integer = unMapData a
       in
       go ds)
    0
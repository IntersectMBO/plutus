let
  data (Tuple2 :: * -> * -> *) a b | Tuple2_match where
    Tuple2 : a -> b -> Tuple2 a b
  data Bool | Bool_match where
    True : Bool
    False : Bool
in
letrec
  data (List :: * -> *) a | List_match where
    Nil : List a
    Cons : a -> List a -> List a
in
letrec
  !go : List (Tuple2 bytestring integer) -> Bool
    = \(ds : List (Tuple2 bytestring integer)) ->
        List_match
          {Tuple2 bytestring integer}
          ds
          {all dead. Bool}
          (/\dead -> True)
          (\(ds : Tuple2 bytestring integer)
            (xs : List (Tuple2 bytestring integer)) ->
             /\dead ->
               Tuple2_match
                 {bytestring}
                 {integer}
                 ds
                 {Bool}
                 (\(ds : bytestring) (x : integer) ->
                    ifThenElse
                      {all dead. Bool}
                      (equalsInteger 0 x)
                      (/\dead -> go xs)
                      (/\dead -> False)
                      {all dead. dead}))
          {all dead. dead}
in
let
  data (These :: * -> * -> *) a b | These_match where
    That : b -> These a b
    These : a -> b -> These a b
    This : a -> These a b
in
letrec
  !go :
     List
       (Tuple2
          bytestring
          ((\k v -> List (Tuple2 k v)) bytestring (These integer integer))) ->
     Bool
    = \(ds :
          List
            (Tuple2
               bytestring
               ((\k v -> List (Tuple2 k v))
                  bytestring
                  (These integer integer)))) ->
        List_match
          {Tuple2
             bytestring
             ((\k v -> List (Tuple2 k v)) bytestring (These integer integer))}
          ds
          {all dead. Bool}
          (/\dead -> True)
          (\(ds :
               Tuple2
                 bytestring
                 ((\k v -> List (Tuple2 k v))
                    bytestring
                    (These integer integer)))
            (xs :
               List
                 (Tuple2
                    bytestring
                    ((\k v -> List (Tuple2 k v))
                       bytestring
                       (These integer integer)))) ->
             letrec
               !go : List (Tuple2 bytestring (These integer integer)) -> Bool
                 = \(ds : List (Tuple2 bytestring (These integer integer))) ->
                     List_match
                       {Tuple2 bytestring (These integer integer)}
                       ds
                       {all dead. Bool}
                       (/\dead -> go xs)
                       (\(ds : Tuple2 bytestring (These integer integer))
                         (xs :
                            List (Tuple2 bytestring (These integer integer))) ->
                          /\dead ->
                            Tuple2_match
                              {bytestring}
                              {These integer integer}
                              ds
                              {Bool}
                              (\(ds : bytestring) (x : These integer integer) ->
                                 These_match
                                   {integer}
                                   {integer}
                                   x
                                   {all dead. Bool}
                                   (\(b : integer) ->
                                      ifThenElse
                                        {all dead. Bool}
                                        (lessThanInteger 0 b)
                                        (/\dead -> False)
                                        (/\dead -> go xs))
                                   (\(a : integer) (b : integer) ->
                                      ifThenElse
                                        {all dead. Bool}
                                        (lessThanInteger a b)
                                        (/\dead -> False)
                                        (/\dead -> go xs))
                                   (\(a : integer) ->
                                      ifThenElse
                                        {all dead. Bool}
                                        (lessThanInteger a 0)
                                        (/\dead -> False)
                                        (/\dead -> go xs))
                                   {all dead. dead}))
                       {all dead. dead}
             in
             /\dead ->
               Tuple2_match
                 {bytestring}
                 {(\k v -> List (Tuple2 k v))
                    bytestring
                    (These integer integer)}
                 ds
                 {Bool}
                 (\(ds : bytestring)
                   (x :
                      (\k v -> List (Tuple2 k v))
                        bytestring
                        (These integer integer)) ->
                    go x))
          {all dead. dead}
in
letrec
  !go :
     List (Tuple2 bytestring integer) ->
     List (Tuple2 bytestring (These integer integer))
    = \(ds : List (Tuple2 bytestring integer)) ->
        List_match
          {Tuple2 bytestring integer}
          ds
          {all dead. List (Tuple2 bytestring (These integer integer))}
          (/\dead -> Nil {Tuple2 bytestring (These integer integer)})
          (\(x : Tuple2 bytestring integer)
            (xs : List (Tuple2 bytestring integer)) ->
             /\dead ->
               Cons
                 {Tuple2 bytestring (These integer integer)}
                 (Tuple2_match
                    {bytestring}
                    {integer}
                    x
                    {Tuple2 bytestring (These integer integer)}
                    (\(c : bytestring) (a : integer) ->
                       Tuple2
                         {bytestring}
                         {These integer integer}
                         c
                         (This {integer} {integer} a)))
                 (go xs))
          {all dead. dead}
in
letrec
  !go :
     List (Tuple2 bytestring integer) ->
     List (Tuple2 bytestring (These integer integer))
    = \(ds : List (Tuple2 bytestring integer)) ->
        List_match
          {Tuple2 bytestring integer}
          ds
          {all dead. List (Tuple2 bytestring (These integer integer))}
          (/\dead -> Nil {Tuple2 bytestring (These integer integer)})
          (\(x : Tuple2 bytestring integer)
            (xs : List (Tuple2 bytestring integer)) ->
             /\dead ->
               Cons
                 {Tuple2 bytestring (These integer integer)}
                 (Tuple2_match
                    {bytestring}
                    {integer}
                    x
                    {Tuple2 bytestring (These integer integer)}
                    (\(c : bytestring) (a : integer) ->
                       Tuple2
                         {bytestring}
                         {These integer integer}
                         c
                         (That {integer} {integer} a)))
                 (go xs))
          {all dead. dead}
in
let
  !equalsByteString : bytestring -> bytestring -> Bool
    = \(x : bytestring) (y : bytestring) ->
        ifThenElse {Bool} (equalsByteString x y) True False
  !union :
     all k v r.
       (\a -> a -> a -> Bool) k ->
       (\k v -> List (Tuple2 k v)) k v ->
       (\k v -> List (Tuple2 k v)) k r ->
       (\k v -> List (Tuple2 k v)) k (These v r)
    = /\k v r ->
        letrec
          !go : List (Tuple2 k r) -> List (Tuple2 k (These v r))
            = \(ds : List (Tuple2 k r)) ->
                List_match
                  {Tuple2 k r}
                  ds
                  {all dead. List (Tuple2 k (These v r))}
                  (/\dead -> Nil {Tuple2 k (These v r)})
                  (\(x : Tuple2 k r) (xs : List (Tuple2 k r)) ->
                     /\dead ->
                       Cons
                         {Tuple2 k (These v r)}
                         (Tuple2_match
                            {k}
                            {r}
                            x
                            {Tuple2 k (These v r)}
                            (\(c : k) (a : r) ->
                               Tuple2 {k} {These v r} c (That {v} {r} a)))
                         (go xs))
                  {all dead. dead}
        in
        \(`$dEq` : (\a -> a -> a -> Bool) k)
         (ds : (\k v -> List (Tuple2 k v)) k v)
         (ds : (\k v -> List (Tuple2 k v)) k r) ->
          letrec
            !go : List (Tuple2 k v) -> List (Tuple2 k (These v r))
              = \(ds : List (Tuple2 k v)) ->
                  List_match
                    {Tuple2 k v}
                    ds
                    {all dead. List (Tuple2 k (These v r))}
                    (/\dead -> Nil {Tuple2 k (These v r)})
                    (\(x : Tuple2 k v) (xs : List (Tuple2 k v)) ->
                       /\dead ->
                         Cons
                           {Tuple2 k (These v r)}
                           (Tuple2_match
                              {k}
                              {v}
                              x
                              {Tuple2 k (These v r)}
                              (\(c : k) (i : v) ->
                                 letrec
                                   !go : List (Tuple2 k r) -> These v r
                                     = \(ds : List (Tuple2 k r)) ->
                                         List_match
                                           {Tuple2 k r}
                                           ds
                                           {all dead. These v r}
                                           (/\dead -> This {v} {r} i)
                                           (\(ds : Tuple2 k r)
                                             (xs' : List (Tuple2 k r)) ->
                                              /\dead ->
                                                Tuple2_match
                                                  {k}
                                                  {r}
                                                  ds
                                                  {These v r}
                                                  (\(c' : k) (i : r) ->
                                                     Bool_match
                                                       (`$dEq` c' c)
                                                       {all dead. These v r}
                                                       (/\dead ->
                                                          These {v} {r} i i)
                                                       (/\dead -> go xs')
                                                       {all dead. dead}))
                                           {all dead. dead}
                                 in
                                 Tuple2 {k} {These v r} c (go ds)))
                           (go xs))
                    {all dead. dead}
          in
          let
            !rs' : List (Tuple2 k r)
              = (let
                    a = Tuple2 k r
                  in
                  \(p : a -> Bool) ->
                    letrec
                      !go : List a -> List a
                        = \(ds : List a) ->
                            List_match
                              {a}
                              ds
                              {all dead. List a}
                              (/\dead -> Nil {a})
                              (\(x : a) (xs : List a) ->
                                 /\dead ->
                                   let
                                     !xs : List a = go xs
                                   in
                                   Bool_match
                                     (p x)
                                     {all dead. List a}
                                     (/\dead -> Cons {a} x xs)
                                     (/\dead -> xs)
                                     {all dead. dead})
                              {all dead. dead}
                    in
                    \(eta : List a) -> go eta)
                  (\(ds : Tuple2 k r) ->
                     Tuple2_match
                       {k}
                       {r}
                       ds
                       {Bool}
                       (\(c : k) ->
                          letrec
                            !go : List (Tuple2 k v) -> Bool
                              = \(ds : List (Tuple2 k v)) ->
                                  List_match
                                    {Tuple2 k v}
                                    ds
                                    {all dead. Bool}
                                    (/\dead -> True)
                                    (\(x : Tuple2 k v)
                                      (xs : List (Tuple2 k v)) ->
                                       /\dead ->
                                         Tuple2_match
                                           {k}
                                           {v}
                                           x
                                           {Bool}
                                           (\(c' : k) (ds : v) ->
                                              Bool_match
                                                (`$dEq` c' c)
                                                {all dead. Bool}
                                                (/\dead -> False)
                                                (/\dead -> go xs)
                                                {all dead. dead}))
                                    {all dead. dead}
                          in
                          \(ds : r) -> go ds))
                  ds
            !rs'' : List (Tuple2 k (These v r)) = go rs'
          in
          letrec
            !go : List (Tuple2 k (These v r)) -> List (Tuple2 k (These v r))
              = \(ds : List (Tuple2 k (These v r))) ->
                  List_match
                    {Tuple2 k (These v r)}
                    ds
                    {all dead. List (Tuple2 k (These v r))}
                    (/\dead -> rs'')
                    (\(x : Tuple2 k (These v r))
                      (xs : List (Tuple2 k (These v r))) ->
                       /\dead -> Cons {Tuple2 k (These v r)} x (go xs))
                    {all dead. dead}
          in
          let
            !ls' : List (Tuple2 k (These v r)) = go ds
          in
          go ls'
in
letrec
  !go :
     List
       (Tuple2
          bytestring
          (These
             ((\k v -> List (Tuple2 k v)) bytestring integer)
             ((\k v -> List (Tuple2 k v)) bytestring integer))) ->
     List
       (Tuple2
          bytestring
          ((\k v -> List (Tuple2 k v)) bytestring (These integer integer)))
    = \(ds :
          List
            (Tuple2
               bytestring
               (These
                  ((\k v -> List (Tuple2 k v)) bytestring integer)
                  ((\k v -> List (Tuple2 k v)) bytestring integer)))) ->
        List_match
          {Tuple2
             bytestring
             (These
                ((\k v -> List (Tuple2 k v)) bytestring integer)
                ((\k v -> List (Tuple2 k v)) bytestring integer))}
          ds
          {all dead.
             List
               (Tuple2
                  bytestring
                  ((\k v -> List (Tuple2 k v))
                     bytestring
                     (These integer integer)))}
          (/\dead ->
             Nil
               {Tuple2
                  bytestring
                  ((\k v -> List (Tuple2 k v))
                     bytestring
                     (These integer integer))})
          (\(x :
               Tuple2
                 bytestring
                 (These
                    ((\k v -> List (Tuple2 k v)) bytestring integer)
                    ((\k v -> List (Tuple2 k v)) bytestring integer)))
            (xs :
               List
                 (Tuple2
                    bytestring
                    (These
                       ((\k v -> List (Tuple2 k v)) bytestring integer)
                       ((\k v -> List (Tuple2 k v)) bytestring integer)))) ->
             /\dead ->
               Cons
                 {Tuple2
                    bytestring
                    ((\k v -> List (Tuple2 k v))
                       bytestring
                       (These integer integer))}
                 (Tuple2_match
                    {bytestring}
                    {These
                       ((\k v -> List (Tuple2 k v)) bytestring integer)
                       ((\k v -> List (Tuple2 k v)) bytestring integer)}
                    x
                    {Tuple2
                       bytestring
                       ((\k v -> List (Tuple2 k v))
                          bytestring
                          (These integer integer))}
                    (\(c : bytestring)
                      (a :
                         These
                           ((\k v -> List (Tuple2 k v)) bytestring integer)
                           ((\k v -> List (Tuple2 k v)) bytestring integer)) ->
                       Tuple2
                         {bytestring}
                         {(\k v -> List (Tuple2 k v))
                            bytestring
                            (These integer integer)}
                         c
                         (These_match
                            {(\k v -> List (Tuple2 k v)) bytestring integer}
                            {(\k v -> List (Tuple2 k v)) bytestring integer}
                            a
                            {(\k v -> List (Tuple2 k v))
                               bytestring
                               (These integer integer)}
                            (\(b :
                                 (\k v -> List (Tuple2 k v))
                                   bytestring
                                   integer) ->
                               go b)
                            (\(a :
                                 (\k v -> List (Tuple2 k v)) bytestring integer)
                              (b :
                                 (\k v -> List (Tuple2 k v))
                                   bytestring
                                   integer) ->
                               union
                                 {bytestring}
                                 {integer}
                                 {integer}
                                 equalsByteString
                                 a
                                 b)
                            (\(a :
                                 (\k v -> List (Tuple2 k v))
                                   bytestring
                                   integer) ->
                               go a))))
                 (go xs))
          {all dead. dead}
in
let
  !unordEqWith :
     all k v.
       (\a -> a -> a -> Bool) k ->
       (v -> Bool) ->
       (v -> v -> Bool) ->
       List (Tuple2 k v) ->
       List (Tuple2 k v) ->
       Bool
    = /\k v ->
        \(`$dEq` : (\a -> a -> a -> Bool) k)
         (is : v -> Bool) ->
          letrec
            !go : List (Tuple2 k v) -> Bool
              = \(ds : List (Tuple2 k v)) ->
                  List_match
                    {Tuple2 k v}
                    ds
                    {all dead. Bool}
                    (/\dead -> True)
                    (\(x : Tuple2 k v) (xs : List (Tuple2 k v)) ->
                       /\dead ->
                         Tuple2_match
                           {k}
                           {v}
                           x
                           {Bool}
                           (\(ipv : k) (ipv : v) ->
                              Bool_match
                                (is ipv)
                                {all dead. Bool}
                                (/\dead -> go xs)
                                (/\dead -> False)
                                {all dead. dead}))
                    {all dead. dead}
          in
          letrec
            !go : List (Tuple2 k v) -> Bool
              = \(ds : List (Tuple2 k v)) ->
                  List_match
                    {Tuple2 k v}
                    ds
                    {all dead. Bool}
                    (/\dead -> True)
                    (\(x : Tuple2 k v) (xs : List (Tuple2 k v)) ->
                       /\dead ->
                         Tuple2_match
                           {k}
                           {v}
                           x
                           {Bool}
                           (\(ipv : k) (ipv : v) ->
                              Bool_match
                                (is ipv)
                                {all dead. Bool}
                                (/\dead -> go xs)
                                (/\dead -> False)
                                {all dead. dead}))
                    {all dead. dead}
          in
          \(eqV : v -> v -> Bool) ->
            letrec
              !goBoth :
                 List (Tuple2 k v) -> List (Tuple2 k v) -> Bool
                = \(ds : List (Tuple2 k v))
                   (kvsR : List (Tuple2 k v)) ->
                    List_match
                      {Tuple2 k v}
                      ds
                      {all dead. Bool}
                      (/\dead -> go kvsR)
                      (\(ipv : Tuple2 k v)
                        (ipv : List (Tuple2 k v)) ->
                         /\dead ->
                           List_match
                             {Tuple2 k v}
                             kvsR
                             {all dead. Bool}
                             (/\dead -> go ds)
                             (\(ipv : Tuple2 k v)
                               (ipv : List (Tuple2 k v)) ->
                                /\dead ->
                                  Tuple2_match
                                    {k}
                                    {v}
                                    ipv
                                    {Bool}
                                    (\(kL : k)
                                      (vL : v) ->
                                       letrec
                                         !goRight :
                                            List (Tuple2 k v) ->
                                            List (Tuple2 k v) ->
                                            Bool
                                           = \(ds : List (Tuple2 k v))
                                              (ds : List (Tuple2 k v)) ->
                                               List_match
                                                 {Tuple2 k v}
                                                 ds
                                                 {all dead. Bool}
                                                 (/\dead -> False)
                                                 (\(kvR : Tuple2 k v)
                                                   (kvsR' :
                                                      List (Tuple2 k v)) ->
                                                    /\dead ->
                                                      Tuple2_match
                                                        {k}
                                                        {v}
                                                        kvR
                                                        {Bool}
                                                        (\(kR : k)
                                                          (vR : v) ->
                                                           Bool_match
                                                             (is vR)
                                                             {all dead. Bool}
                                                             (/\dead ->
                                                                goRight
                                                                  ds
                                                                  kvsR')
                                                             (/\dead ->
                                                                Bool_match
                                                                  (`$dEq` kL kR)
                                                                  {all dead.
                                                                     Bool}
                                                                  (/\dead ->
                                                                     Bool_match
                                                                       (eqV
                                                                          vL
                                                                          vR)
                                                                       {all dead.
                                                                          Bool}
                                                                       (/\dead ->
                                                                          goBoth
                                                                            ipv
                                                                            ((let
                                                                                 a
                                                                                   = Tuple2
                                                                                       k
                                                                                       v
                                                                               in
                                                                               letrec
                                                                                 !rev :
                                                                                    List
                                                                                      a ->
                                                                                    List
                                                                                      a ->
                                                                                    List
                                                                                      a
                                                                                   = \(ds :
                                                                                         List
                                                                                           a)
                                                                                      (a :
                                                                                         List
                                                                                           a) ->
                                                                                       List_match
                                                                                         {a}
                                                                                         ds
                                                                                         {all dead.
                                                                                            List
                                                                                              a}
                                                                                         (/\dead ->
                                                                                            a)
                                                                                         (\(x :
                                                                                              a)
                                                                                           (xs :
                                                                                              List
                                                                                                a) ->
                                                                                            /\dead ->
                                                                                              rev
                                                                                                xs
                                                                                                (Cons
                                                                                                   {a}
                                                                                                   x
                                                                                                   a))
                                                                                         {all dead.
                                                                                            dead}
                                                                               in
                                                                               \(eta :
                                                                                   List
                                                                                     a)
                                                                                (eta :
                                                                                   List
                                                                                     a) ->
                                                                                 rev
                                                                                   eta
                                                                                   eta)
                                                                               ds
                                                                               kvsR'))
                                                                       (/\dead ->
                                                                          False)
                                                                       {all dead.
                                                                          dead})
                                                                  (/\dead ->
                                                                     goRight
                                                                       (Cons
                                                                          {Tuple2
                                                                             k
                                                                             v}
                                                                          kvR
                                                                          ds)
                                                                       kvsR')
                                                                  {all dead.
                                                                     dead})
                                                             {all dead. dead}))
                                                 {all dead. dead}
                                       in
                                       Tuple2_match
                                         {k}
                                         {v}
                                         ipv
                                         {Bool}
                                         (\(kR : k) (vR : v) ->
                                            Bool_match
                                              (`$dEq` kL kR)
                                              {all dead. Bool}
                                              (/\dead ->
                                                 Bool_match
                                                   (eqV vL vR)
                                                   {all dead. Bool}
                                                   (/\dead -> goBoth ipv ipv)
                                                   (/\dead -> False)
                                                   {all dead. dead})
                                              (/\dead ->
                                                 Bool_match
                                                   (is vL)
                                                   {all dead. Bool}
                                                   (/\dead -> goBoth ipv kvsR)
                                                   (/\dead ->
                                                      goRight
                                                        ((let
                                                             a = Tuple2 k v
                                                           in
                                                           \(g :
                                                               all b.
                                                                 (a ->
                                                                  b ->
                                                                  b) ->
                                                                 b ->
                                                                 b) ->
                                                             g
                                                               {List a}
                                                               (\(ds : a)
                                                                 (ds :
                                                                    List a) ->
                                                                  Cons
                                                                    {a}
                                                                    ds
                                                                    ds)
                                                               (Nil {a}))
                                                           (/\a ->
                                                              \(c :
                                                                  Tuple2 k v ->
                                                                  a ->
                                                                  a)
                                                               (n : a) ->
                                                                Bool_match
                                                                  (is vR)
                                                                  {all dead. a}
                                                                  (/\dead -> n)
                                                                  (/\dead ->
                                                                     c ipv n)
                                                                  {all dead.
                                                                     dead}))
                                                        ipv)
                                                   {all dead. dead})
                                              {all dead. dead})))
                             {all dead. dead})
                      {all dead. dead}
            in
            \(eta : List (Tuple2 k v)) (eta : List (Tuple2 k v)) ->
              goBoth eta eta
in
\(l :
    (\k v -> List (Tuple2 k v))
      bytestring
      ((\k v -> List (Tuple2 k v)) bytestring integer))
 (r :
    (\k v -> List (Tuple2 k v))
      bytestring
      ((\k v -> List (Tuple2 k v)) bytestring integer)) ->
  Bool_match
    (let
      !m :
         List
           (Tuple2
              bytestring
              ((\k v -> List (Tuple2 k v)) bytestring (These integer integer)))
        = let
          !mp :
             List
               (Tuple2
                  bytestring
                  (These
                     ((\k v -> List (Tuple2 k v)) bytestring integer)
                     ((\k v -> List (Tuple2 k v)) bytestring integer)))
            = union
                {bytestring}
                {(\k v -> List (Tuple2 k v)) bytestring integer}
                {(\k v -> List (Tuple2 k v)) bytestring integer}
                equalsByteString
                l
                r
        in
        go mp
    in
    go m)
    {all dead. Bool}
    (/\dead ->
       Bool_match
         (unordEqWith
            {bytestring}
            {(\k v -> List (Tuple2 k v)) bytestring integer}
            equalsByteString
            (\(ds : (\k v -> List (Tuple2 k v)) bytestring integer) -> go ds)
            (unordEqWith
               {bytestring}
               {integer}
               equalsByteString
               (\(v : integer) ->
                  ifThenElse {Bool} (equalsInteger 0 v) True False)
               (\(x : integer) (y : integer) ->
                  ifThenElse {Bool} (equalsInteger x y) True False))
            l
            r)
         {all dead. Bool}
         (/\dead -> False)
         (/\dead -> True)
         {all dead. dead})
    (/\dead -> False)
    {all dead. dead}